{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/notepad.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getRecorddata, createRecord, bulkcreateRecord, updateRecord, deleteRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping, getLocalData, serverButtonHandler } from \"../js/index\";\nimport Paintpad from \"./paintpad\";\nimport Rte from \"./richtexteditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getServerData = async props => {\n      let {\n        action,\n        noteid\n      } = props; // alert(\"1-\" + noteid);\n\n      console.log(this.props);\n      let localdata = getLocalData(this.props);\n      let result = await getRecorddata({\n        objectName: \"note\",\n        objectData: {},\n        keyConditions: [{\n          field: \"orgname\",\n          value: localdata.orgname,\n          expression: \"=\"\n        }, {\n          field: \"id\",\n          value: noteid,\n          expression: \"=\"\n        }],\n        filterConditions: []\n      });\n      console.log(result);\n\n      if (result.isSuccess === \"false\") {\n        alert(\"url not found\");\n      } else {\n        console.log(result.dataprops.Items[0]);\n        console.log(JSON.parse(result.dataprops.Items[0].data));\n\n        if (result.dataprops && result.dataprops.Items) {\n          let order = 0;\n          let notepadDataArray = JSON.parse(result.dataprops.Items[0].data);\n          let notepadDataArraySorted = sortArray(notepadDataArray, \"order\", \"integer\");\n\n          for (let i = 0; i < notepadDataArraySorted.length; i++) {\n            order++;\n\n            if (notepadDataArraySorted[i].type === \"div\") {\n              let divProps = {\n                innerHTML: notepadDataArraySorted[i].innerhtml,\n                order: notepadDataArraySorted[i].order,\n                action: action\n              };\n              this.insertEditableDivHandler(divProps);\n            }\n\n            if (notepadDataArraySorted[i].type === \"canvas\") {\n              let props = {\n                order: notepadDataArraySorted[i].order,\n                defaultdrawHistory: notepadDataArraySorted[i].defaultdrawHistory,\n                action: action\n              };\n              this.insertPaintHandler(props);\n            }\n          }\n\n          this.setState({\n            order: order,\n            recorddata: result.dataprops.Items[0],\n            action: action\n          });\n        }\n      } //let paintProps = { id: \"id1\", htmlArray: \"<div>Tewst</div>\" };\n      // this.insertPaint(divProps);\n\n    };\n\n    this.paintpadAttachHandler = props => {\n      let {\n        defaultdrawHistoryObj\n      } = this.state;\n      console.log(props);\n      let {\n        drawHistory,\n        order\n      } = props;\n      defaultdrawHistoryObj[order] = drawHistory;\n      this.setState({\n        defaultdrawHistoryObj: defaultdrawHistoryObj\n      });\n    };\n\n    this.insertEditableDiv = props => {\n      let {\n        order\n      } = this.state;\n      order = parseInt(order) + 1;\n      let divProps = {\n        innerHTML: \"&nbsp;\",\n        order: order,\n        editable: true\n      };\n      this.insertEditableDivHandler(divProps);\n      this.setState({\n        order: order //  isEdit: true\n\n      });\n    };\n\n    this.insertEditableDivHandler = props => {\n      let {\n        innerHTML,\n        order\n      } = props;\n      var paintParentNextDiv = document.createElement(\"div\");\n      paintParentNextDiv.setAttribute(\"class\", \"notepadedit-div\");\n      paintParentNextDiv.setAttribute(\"contenteditable\", props.editable);\n      paintParentNextDiv.setAttribute(\"data-order\", order);\n      paintParentNextDiv.innerHTML = innerHTML;\n      document.getElementById(\"notepadedit\").insertAdjacentElement(\"beforeend\", paintParentNextDiv); // if(props.order === undefined ||){\n      //  this.setState({ order: parseInt(order) + 1 });\n      // }\n    };\n\n    this.insertPaint = () => {\n      let {\n        action\n      } = this.props;\n      let {\n        order\n      } = this.state;\n      order = parseInt(order) + 1;\n      let props = {\n        order: order,\n        defaultdrawHistory: [],\n        action: action\n      };\n      this.insertPaintHandler(props);\n      this.setState({\n        order: order\n      }, () => {\n        order = parseInt(order) + 1; // let divProps = {\n        //   innerHTML: \"&nbsp;\",\n        //   order: order,\n        //   editable: true };\n\n        this.insertEditableDiv({});\n      });\n    };\n\n    this.insertPaintHandler = props => {\n      let {\n        order,\n        defaultdrawHistory,\n        action\n      } = props;\n      let parentDivId = \"notepadedit-canvasdiv-\" + order;\n      let canvasId = \"notepadedit-canvas-\" + order;\n      let hiddenDivId = \"notepadedit-canvas-hiddendiv\" + order; // parent div\n\n      var paintParentDiv = document.createElement(\"div\");\n      paintParentDiv.setAttribute(\"id\", parentDivId);\n      paintParentDiv.setAttribute(\"style\", \"width:100%;height:50%;\");\n      paintParentDiv.setAttribute(\"class\", \"notepadedit-canvas\");\n      paintParentDiv.setAttribute(\"data-order\", order);\n      document.getElementById(\"notepadedit\").insertAdjacentElement(\"beforeend\", paintParentDiv); // paintpad comp\n\n      let compprops = {\n        order: order,\n        canvashtmlid: canvasId,\n        canvashtmlparentdivid: parentDivId,\n        hiddendivhtmlid: hiddenDivId,\n        action: action,\n        defaultdrawHistory: defaultdrawHistory\n      };\n      let onattach = this.paintpadAttachHandler;\n      let paintElement = /*#__PURE__*/React.createElement(Paintpad, {\n        compprops: compprops,\n        onattach: onattach\n      }, null);\n      let paintElementHmtl = [];\n      paintElementHmtl.push(paintElement);\n      ReactDOM.render(paintElementHmtl, document.getElementById(parentDivId));\n    };\n\n    this.saveNotes = async () => {\n      let {\n        tablename,\n        defaultsortparam,\n        enablelocaldbdata,\n        parentid,\n        //  defaultdatafilter,\n        iscreateactive,\n        isviewactive,\n        iseditactive,\n        isdeleteactive\n      } = this.props.compprops;\n      let localdata = getLocalData(this.props);\n      let {\n        noteid,\n        action\n      } = this.props;\n      let {\n        recorddata\n      } = this.state;\n      let {\n        defaultdrawHistoryObj\n      } = this.state;\n      let divandcanvasEle = [];\n      let divElements = document.getElementsByClassName(\"notepadedit-div\");\n\n      for (let i = 0; i < divElements.length; i++) {\n        console.log(divElements[i].innerHTML);\n        divandcanvasEle.push({\n          type: \"div\",\n          order: divElements[i].dataset.order,\n          innerhtml: divElements[i].innerHTML\n        });\n      }\n\n      let canvasElements = document.getElementsByClassName(\"notepadedit-canvas\");\n\n      for (let i = 0; i < canvasElements.length; i++) {\n        console.log(canvasElements[i]);\n        console.log(canvasElements[i].dataset.order);\n        console.log(defaultdrawHistoryObj[canvasElements[i].dataset.order]);\n        divandcanvasEle.push({\n          type: \"canvas\",\n          order: canvasElements[i].dataset.order,\n          defaultdrawHistory: defaultdrawHistoryObj[canvasElements[i].dataset.order]\n        });\n      }\n\n      console.log(divandcanvasEle);\n      console.log(JSON.stringify(divandcanvasEle));\n      recorddata.data = JSON.stringify(divandcanvasEle);\n      recorddata.parentid = parentid;\n\n      if (action === \"create\") {\n        recorddata.orgname = localdata.orgname;\n        let d = new Date();\n        recorddata.id = defaultsortparam + \"-\" + parentid + \"-\" + d.getTime(); // if (defaultdatafilter && Object.keys(defaultdatafilter).length > 0) {\n        //   for (let j in defaultdatafilter) {\n        //     recorddata[j] = defaultdatafilter[j];\n        //   }\n        // }\n\n        let result = await createRecord({\n          objectName: tablename,\n          objectData: recorddata\n        });\n\n        if (result.isSuccess === \"false\") {\n          alert(result.message);\n        } else {\n          // this.resetUI();\n          // let props = { editable: false, noteid: recorddata.id };\n          // await this.getServerData(props);\n          //   this.props.refreshNote({ noteid: recorddata.id });\n          this.props.childnoteHandler({\n            action: \"view\",\n            recordid: recorddata.id\n          });\n        }\n      } else {\n        let objectPrimaryKeyValue = {\n          orgname: recorddata.orgname,\n          id: recorddata.id\n        };\n        let target = {};\n        let recordDataUpdating = Object.assign(target, recorddata);\n        delete recordDataUpdating.orgname;\n        delete recordDataUpdating.id;\n        let result = await updateRecord({\n          objectName: tablename,\n          objectPrimaryKeyValue: objectPrimaryKeyValue,\n          objectData: recordDataUpdating\n        });\n\n        if (result.isSuccess === \"false\") {\n          alert(result.message);\n        } else {\n          this.props.childnoteHandler({\n            action: \"view\",\n            recordid: recorddata.id\n          });\n        }\n      }\n\n      console.log(recorddata);\n    };\n\n    this.editNote = async () => {\n      let {\n        noteid\n      } = this.props;\n      let props = {\n        action: \"edit\",\n        recordid: noteid\n      };\n      this.props.childnoteHandler(props);\n    };\n\n    this.cancelEditNote = async () => {\n      let {\n        noteid\n      } = this.props;\n      let props = {\n        action: \"view\",\n        recordid: noteid\n      };\n      this.props.childnoteHandler(props);\n    };\n\n    this.resetUI = () => {\n      document.getElementById(\"notepadedit\").innerHTML = \"\";\n    };\n\n    this.deleteNote = async props => {\n      let {\n        recorddata\n      } = this.state;\n      let localdata = getLocalData(this.props);\n      let result = await deleteRecord({\n        objectName: \"note\",\n        objectPrimaryKeyValue: {\n          id: recorddata.id,\n          orgname: localdata.orgname\n        }\n      });\n\n      if (result.isSuccess === \"false\") {\n        alert(result.message);\n      } else {\n        let props = {\n          action: \"\",\n          recordid: \"\"\n        };\n        this.props.childnoteHandler(props);\n      }\n    };\n\n    this.noteTitleChange = e => {\n      let {\n        recorddata\n      } = this.state;\n      recorddata.label = e.target.value;\n    };\n\n    this.state = {\n      defaultdrawHistoryObj: {},\n      order: 0,\n      recorddata: {},\n      isEdit: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    // let {\n    //   tablename,\n    //   defaultsortparam,\n    //   enablelocaldbdata,\n    //   parentid,\n    //   // defaultdatafilter,\n    //   iscreateactive,\n    //   isviewactive,\n    //   iseditactive,\n    //   isdeleteactive,\n    // } = this.props.compprops;\n    let {\n      noteid,\n      action\n    } = this.props;\n\n    if (noteid && action === \"view\") {\n      let props = {\n        action: action,\n        noteid: noteid\n      };\n      await this.getServerData(props);\n    } else if (noteid && action === \"edit\") {\n      let props = {\n        action: action,\n        noteid: noteid\n      };\n      await this.getServerData(props);\n    } else if (action === \"create\") {\n      this.insertEditableDiv();\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    let {\n      isEdit,\n      recorddata\n    } = this.state;\n    let {\n      noteid,\n      createNote,\n      action,\n      iseditactive,\n      isdeleteactive\n    } = this.props;\n    let mainpanelHtml = [];\n    let notepageHtml = [];\n    notepageHtml.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"org-flexbasis-100p org-mflexbasis-90p org-lflexbasis-90p\",\n        children: [/*#__PURE__*/_jsxDEV(Rte, {\n          iscreateactive: \"false\",\n          htmlid: \"notepadedit\",\n          noteid: noteid,\n          createNote: createNote,\n          insertPaint: this.insertPaint,\n          editNote: this.editNote,\n          saveNotes: this.saveNotes,\n          cancelEditNote: this.cancelEditNote,\n          deleteNote: this.deleteNote,\n          isEdit: isEdit,\n          action: action,\n          iseditactive: iseditactive,\n          isdeleteactive: isdeleteactive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: action === \"create\" || action === \"edit\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              defaultValue: recorddata.label,\n              onChange: this.noteTitleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: recorddata.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"notepadedit\",\n          contentEditable: \"true\",\n          style: {\n            width: \"100%\",\n            height: \"100vh\",\n            backgroundColor: \"lightyellow\",\n            color: \"black\",\n            position: \"relative\",\n            overflow: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)\n    }, void 0, false));\n    mainpanelHtml.push(notepageHtml);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: mainpanelHtml\n    }, void 0, false);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/notepad.js"],"names":["React","Component","ReactDOM","getRecorddata","createRecord","bulkcreateRecord","updateRecord","deleteRecord","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","Paintpad","Rte","F","constructor","props","getServerData","action","noteid","console","log","localdata","result","objectName","objectData","keyConditions","field","value","orgname","expression","filterConditions","isSuccess","alert","dataprops","Items","JSON","parse","data","order","notepadDataArray","notepadDataArraySorted","i","length","type","divProps","innerHTML","innerhtml","insertEditableDivHandler","defaultdrawHistory","insertPaintHandler","setState","recorddata","paintpadAttachHandler","defaultdrawHistoryObj","state","drawHistory","insertEditableDiv","parseInt","editable","paintParentNextDiv","document","createElement","setAttribute","getElementById","insertAdjacentElement","insertPaint","parentDivId","canvasId","hiddenDivId","paintParentDiv","compprops","canvashtmlid","canvashtmlparentdivid","hiddendivhtmlid","onattach","paintElement","paintElementHmtl","push","render","saveNotes","tablename","defaultsortparam","enablelocaldbdata","parentid","iscreateactive","isviewactive","iseditactive","isdeleteactive","divandcanvasEle","divElements","getElementsByClassName","dataset","canvasElements","stringify","d","Date","id","getTime","message","childnoteHandler","recordid","objectPrimaryKeyValue","target","recordDataUpdating","Object","assign","editNote","cancelEditNote","resetUI","deleteNote","noteTitleChange","e","label","isEdit","componentDidMount","createNote","mainpanelHtml","notepageHtml","width","height","backgroundColor","color","position","overflow"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  getRecorddata,\n  createRecord,\n  bulkcreateRecord,\n  updateRecord,\n  deleteRecord,\n} from \"../db/index\";\nimport {\n  sortArray,\n  fieldTypeHtmltoDBmapping,\n  getLocalData,\n  serverButtonHandler,\n} from \"../js/index\";\n\nimport Paintpad from \"./paintpad\";\nimport Rte from \"./richtexteditor\";\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultdrawHistoryObj: {},\n      order: 0,\n      recorddata: {},\n      isEdit: \"\",\n    };\n  }\n\n  async componentDidMount() {\n    // let {\n    //   tablename,\n    //   defaultsortparam,\n    //   enablelocaldbdata,\n    //   parentid,\n    //   // defaultdatafilter,\n    //   iscreateactive,\n    //   isviewactive,\n    //   iseditactive,\n    //   isdeleteactive,\n    // } = this.props.compprops;\n\n    let { noteid, action } = this.props;\n\n    if (noteid && action === \"view\") {\n      let props = { action: action, noteid: noteid };\n      await this.getServerData(props);\n    } else if (noteid && action === \"edit\") {\n      let props = { action: action, noteid: noteid };\n      await this.getServerData(props);\n    } else if (action === \"create\") {\n      this.insertEditableDiv();\n    }\n  }\n\n  getServerData = async (props) => {\n    let { action, noteid } = props;\n\n    // alert(\"1-\" + noteid);\n    console.log(this.props);\n    let localdata = getLocalData(this.props);\n\n    let result = await getRecorddata({\n      objectName: \"note\",\n      objectData: {},\n      keyConditions: [\n        { field: \"orgname\", value: localdata.orgname, expression: \"=\" },\n        { field: \"id\", value: noteid, expression: \"=\" },\n      ],\n      filterConditions: [],\n    });\n\n    console.log(result);\n    if (result.isSuccess === \"false\") {\n      alert(\"url not found\");\n    } else {\n      console.log(result.dataprops.Items[0]);\n      console.log(JSON.parse(result.dataprops.Items[0].data));\n      if (result.dataprops && result.dataprops.Items) {\n        let order = 0;\n        let notepadDataArray = JSON.parse(result.dataprops.Items[0].data);\n        let notepadDataArraySorted = sortArray(\n          notepadDataArray,\n          \"order\",\n          \"integer\"\n        );\n        for (let i = 0; i < notepadDataArraySorted.length; i++) {\n          order++;\n          if (notepadDataArraySorted[i].type === \"div\") {\n            let divProps = {\n              innerHTML: notepadDataArraySorted[i].innerhtml,\n              order: notepadDataArraySorted[i].order,\n              action: action,\n            };\n            this.insertEditableDivHandler(divProps);\n          }\n          if (notepadDataArraySorted[i].type === \"canvas\") {\n            let props = {\n              order: notepadDataArraySorted[i].order,\n              defaultdrawHistory: notepadDataArraySorted[i].defaultdrawHistory,\n              action: action,\n            };\n            this.insertPaintHandler(props);\n          }\n        }\n\n        this.setState({\n          order: order,\n          recorddata: result.dataprops.Items[0],\n          action: action,\n        });\n      }\n    }\n\n    //let paintProps = { id: \"id1\", htmlArray: \"<div>Tewst</div>\" };\n    // this.insertPaint(divProps);\n  };\n\n  paintpadAttachHandler = (props) => {\n    let { defaultdrawHistoryObj } = this.state;\n    console.log(props);\n    let { drawHistory, order } = props;\n    defaultdrawHistoryObj[order] = drawHistory;\n    this.setState({ defaultdrawHistoryObj: defaultdrawHistoryObj });\n  };\n\n  insertEditableDiv = (props) => {\n    let { order } = this.state;\n    order = parseInt(order) + 1;\n    let divProps = {\n      innerHTML: \"&nbsp;\",\n      order: order,\n      editable: true,\n    };\n    this.insertEditableDivHandler(divProps);\n    this.setState({\n      order: order,\n      //  isEdit: true\n    });\n  };\n\n  insertEditableDivHandler = (props) => {\n    let { innerHTML, order } = props;\n\n    var paintParentNextDiv = document.createElement(\"div\");\n    paintParentNextDiv.setAttribute(\"class\", \"notepadedit-div\");\n    paintParentNextDiv.setAttribute(\"contenteditable\", props.editable);\n    paintParentNextDiv.setAttribute(\"data-order\", order);\n    paintParentNextDiv.innerHTML = innerHTML;\n\n    document\n      .getElementById(\"notepadedit\")\n      .insertAdjacentElement(\"beforeend\", paintParentNextDiv);\n    // if(props.order === undefined ||){\n    //  this.setState({ order: parseInt(order) + 1 });\n    // }\n  };\n\n  insertPaint = () => {\n    let { action } = this.props;\n    let { order } = this.state;\n    order = parseInt(order) + 1;\n    let props = {\n      order: order,\n      defaultdrawHistory: [],\n      action: action,\n    };\n    this.insertPaintHandler(props);\n\n    this.setState({ order: order }, () => {\n      order = parseInt(order) + 1;\n      // let divProps = {\n      //   innerHTML: \"&nbsp;\",\n      //   order: order,\n      //   editable: true };\n      this.insertEditableDiv({});\n    });\n  };\n\n  insertPaintHandler = (props) => {\n    let { order, defaultdrawHistory, action } = props;\n    let parentDivId = \"notepadedit-canvasdiv-\" + order;\n    let canvasId = \"notepadedit-canvas-\" + order;\n    let hiddenDivId = \"notepadedit-canvas-hiddendiv\" + order;\n    // parent div\n    var paintParentDiv = document.createElement(\"div\");\n    paintParentDiv.setAttribute(\"id\", parentDivId);\n    paintParentDiv.setAttribute(\"style\", \"width:100%;height:50%;\");\n    paintParentDiv.setAttribute(\"class\", \"notepadedit-canvas\");\n    paintParentDiv.setAttribute(\"data-order\", order);\n\n    document\n      .getElementById(\"notepadedit\")\n      .insertAdjacentElement(\"beforeend\", paintParentDiv);\n\n    // paintpad comp\n\n    let compprops = {\n      order: order,\n      canvashtmlid: canvasId,\n      canvashtmlparentdivid: parentDivId,\n      hiddendivhtmlid: hiddenDivId,\n      action: action,\n      defaultdrawHistory: defaultdrawHistory,\n    };\n    let onattach = this.paintpadAttachHandler;\n\n    let paintElement = React.createElement(\n      Paintpad,\n      { compprops: compprops, onattach: onattach },\n      null\n    );\n\n    let paintElementHmtl = [];\n    paintElementHmtl.push(paintElement);\n\n    ReactDOM.render(paintElementHmtl, document.getElementById(parentDivId));\n  };\n\n  saveNotes = async () => {\n    let {\n      tablename,\n      defaultsortparam,\n      enablelocaldbdata,\n      parentid,\n      //  defaultdatafilter,\n      iscreateactive,\n      isviewactive,\n      iseditactive,\n      isdeleteactive,\n    } = this.props.compprops;\n\n    let localdata = getLocalData(this.props);\n    let { noteid, action } = this.props;\n    let { recorddata } = this.state;\n    let { defaultdrawHistoryObj } = this.state;\n    let divandcanvasEle = [];\n    let divElements = document.getElementsByClassName(\"notepadedit-div\");\n    for (let i = 0; i < divElements.length; i++) {\n      console.log(divElements[i].innerHTML);\n      divandcanvasEle.push({\n        type: \"div\",\n        order: divElements[i].dataset.order,\n        innerhtml: divElements[i].innerHTML,\n      });\n    }\n\n    let canvasElements = document.getElementsByClassName(\"notepadedit-canvas\");\n    for (let i = 0; i < canvasElements.length; i++) {\n      console.log(canvasElements[i]);\n      console.log(canvasElements[i].dataset.order);\n      console.log(defaultdrawHistoryObj[canvasElements[i].dataset.order]);\n      divandcanvasEle.push({\n        type: \"canvas\",\n        order: canvasElements[i].dataset.order,\n        defaultdrawHistory:\n          defaultdrawHistoryObj[canvasElements[i].dataset.order],\n      });\n    }\n    console.log(divandcanvasEle);\n    console.log(JSON.stringify(divandcanvasEle));\n    recorddata.data = JSON.stringify(divandcanvasEle);\n    recorddata.parentid = parentid;\n    if (action === \"create\") {\n      recorddata.orgname = localdata.orgname;\n      let d = new Date();\n\n      recorddata.id = defaultsortparam + \"-\" + parentid + \"-\" + d.getTime();\n      // if (defaultdatafilter && Object.keys(defaultdatafilter).length > 0) {\n      //   for (let j in defaultdatafilter) {\n      //     recorddata[j] = defaultdatafilter[j];\n      //   }\n      // }\n\n      let result = await createRecord({\n        objectName: tablename,\n        objectData: recorddata,\n      });\n      if (result.isSuccess === \"false\") {\n        alert(result.message);\n      } else {\n        // this.resetUI();\n        // let props = { editable: false, noteid: recorddata.id };\n        // await this.getServerData(props);\n        //   this.props.refreshNote({ noteid: recorddata.id });\n        this.props.childnoteHandler({\n          action: \"view\",\n          recordid: recorddata.id,\n        });\n      }\n    } else {\n      let objectPrimaryKeyValue = {\n        orgname: recorddata.orgname,\n        id: recorddata.id,\n      };\n      let target = {};\n      let recordDataUpdating = Object.assign(target, recorddata);\n      delete recordDataUpdating.orgname;\n      delete recordDataUpdating.id;\n\n      let result = await updateRecord({\n        objectName: tablename,\n        objectPrimaryKeyValue: objectPrimaryKeyValue,\n        objectData: recordDataUpdating,\n      });\n      if (result.isSuccess === \"false\") {\n        alert(result.message);\n      } else {\n        this.props.childnoteHandler({\n          action: \"view\",\n          recordid: recorddata.id,\n        });\n      }\n    }\n    console.log(recorddata);\n  };\n\n  editNote = async () => {\n    let { noteid } = this.props;\n    let props = { action: \"edit\", recordid: noteid };\n    this.props.childnoteHandler(props);\n  };\n\n  cancelEditNote = async () => {\n    let { noteid } = this.props;\n    let props = { action: \"view\", recordid: noteid };\n    this.props.childnoteHandler(props);\n  };\n\n  resetUI = () => {\n    document.getElementById(\"notepadedit\").innerHTML = \"\";\n  };\n\n  deleteNote = async (props) => {\n    let { recorddata } = this.state;\n    let localdata = getLocalData(this.props);\n\n    let result = await deleteRecord({\n      objectName: \"note\",\n      objectPrimaryKeyValue: { id: recorddata.id, orgname: localdata.orgname },\n    });\n    if (result.isSuccess === \"false\") {\n      alert(result.message);\n    } else {\n      let props = { action: \"\", recordid: \"\" };\n      this.props.childnoteHandler(props);\n    }\n  };\n\n  noteTitleChange = (e) => {\n    let { recorddata } = this.state;\n    recorddata.label = e.target.value;\n  };\n\n  render() {\n    console.log(this.props);\n    let { isEdit, recorddata } = this.state;\n    let {\n      noteid,\n      createNote,\n      action,\n      iseditactive,\n      isdeleteactive,\n    } = this.props;\n    let mainpanelHtml = [];\n    let notepageHtml = [];\n\n    notepageHtml.push(\n      <>\n        <div className=\"org-flexbasis-100p org-mflexbasis-90p org-lflexbasis-90p\">\n          <Rte\n            iscreateactive=\"false\"\n            htmlid=\"notepadedit\"\n            noteid={noteid}\n            createNote={createNote}\n            insertPaint={this.insertPaint}\n            editNote={this.editNote}\n            saveNotes={this.saveNotes}\n            cancelEditNote={this.cancelEditNote}\n            deleteNote={this.deleteNote}\n            isEdit={isEdit}\n            action={action}\n            iseditactive={iseditactive}\n            isdeleteactive={isdeleteactive}\n          />\n          <div>\n            {action === \"create\" || action === \"edit\" ? (\n              <div>\n                <input\n                  defaultValue={recorddata.label}\n                  onChange={this.noteTitleChange}\n                />\n              </div>\n            ) : (\n              <div>{recorddata.label}</div>\n            )}\n          </div>\n\n          <div\n            id=\"notepadedit\"\n            contentEditable=\"true\"\n            style={{\n              width: \"100%\",\n              height: \"100vh\",\n              backgroundColor: \"lightyellow\",\n              color: \"black\",\n              position: \"relative\",\n              overflow: \"auto\",\n            }}\n          >\n            {/* <div className=\"notepadedit-div org-bb\" contenteditable=\"true\"></div> */}\n          </div>\n        </div>\n      </>\n    );\n    mainpanelHtml.push(notepageHtml);\n\n    return <>{mainpanelHtml}</>;\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}