{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/tablecomp.js\";\nimport React from \"react\";\nimport \"../App.css\";\nimport { sortArray, GetAlphabetPanel } from \"../js/index\";\nimport Paginationcomp from \"./pagination\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class F extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabledropdownChange = e => {\n      this.props.tableOnclick({\n        tableName: e.target.dataset.tablename,\n        itemLabel: \"\",\n        itemName: e.target.value,\n        itemType: \"tabledropdown\",\n        actionid: e.target.dataset.actionid\n      });\n    };\n\n    this.tableActionBtnClick = e => {\n      let itemListData = [];\n      let {\n        recordDataTemp\n      } = this.state;\n\n      if (e.target.dataset.name == \"upload\" || e.target.dataset.name == \"download\") {\n        let tableCheckBoxElements = document.querySelectorAll(\".tablecompinputcheckbox\");\n\n        for (let i = 0; i < tableCheckBoxElements.length; i++) {\n          for (let j = 0; j < recordDataTemp.length; j++) {\n            if (tableCheckBoxElements[i].dataset.rowhtmlid1 == recordDataTemp[j][this.props.rowhtmlid1] && tableCheckBoxElements[i].checked) {\n              itemListData.push(recordDataTemp[j]);\n            }\n          }\n        }\n\n        console.log(itemListData);\n\n        if (e.target.dataset.name == \"upload\") {\n          this.props.tableOnclick({\n            itemLabel: \"\",\n            itemName: e.target.dataset.name,\n            itemType: \"tablebutton\",\n            itemData: \"\",\n            itemListData: itemListData\n          });\n        }\n\n        if (e.target.dataset.name == \"download\") {\n          this.setState({\n            downloadTableasCSV: true\n          });\n        }\n      } else {\n        this.props.tableOnclick({\n          itemLabel: \"\",\n          itemName: e.target.dataset.name,\n          itemType: e.target.dataset.actiontype,\n          itemId: e.target.dataset.actionid,\n          actionid: e.target.dataset.actionid,\n          itemData: \"\",\n          itemListData: itemListData\n        });\n      }\n    };\n\n    this.alphabetPanelClick = a => {\n      console.log(a);\n      let {\n        recordDataTemp,\n        sortedColumn\n      } = this.state;\n\n      if (sortedColumn != \"\") {\n        let recordData = [];\n\n        if (a == \"All\") {\n          this.setState({\n            recordData: recordDataTemp\n          });\n        } else {\n          for (let i in recordDataTemp) {\n            let sortedColumnValue = recordDataTemp[i][sortedColumn];\n\n            if (sortedColumnValue) {\n              if (sortedColumnValue.toLowerCase().startsWith(a.toLowerCase())) {\n                recordData.push(recordDataTemp[i]);\n              }\n            }\n          }\n\n          this.setState({\n            recordData: recordData\n          });\n        }\n      }\n    };\n\n    this.tableThClick = e => {\n      console.log(e.target.dataset.name);\n      let {\n        recordData\n      } = this.state;\n      console.log(recordData);\n      let recordDataSorted = sortArray(recordData, e.target.dataset.name, \"string\");\n      console.log(recordDataSorted);\n      this.setState({\n        recordData: recordDataSorted,\n        sortedColumn: e.target.dataset.name\n      });\n    };\n\n    this.tableTdNameLinkClick = e => {\n      this.props.tableOnclick({\n        itemLabel: e.target.dataset.label,\n        itemName: e.target.dataset.id,\n        actionid: e.target.dataset.actionid,\n        itemType: \"tabletdnamelink\"\n      });\n    };\n\n    this.tableNoofRowsPerPageChange = e => {\n      this.setState({\n        noofRowsPerPage: e.target.value,\n        startOfRows: 0\n      });\n    };\n\n    this.tablepaginationLinkClick = buttonName => {\n      console.log(buttonName);\n      let {\n        startOfRows,\n        noofRowsPerPage,\n        totalRows\n      } = this.state;\n      let nextstartOfRows = parseInt(startOfRows) + parseInt(noofRowsPerPage);\n      let previousstartOfRows = parseInt(startOfRows) - parseInt(noofRowsPerPage);\n\n      if (buttonName == \"first\") {\n        this.setState({\n          startOfRows: 0\n        });\n      }\n\n      if (buttonName == \"next\") {\n        this.setState({\n          startOfRows: nextstartOfRows\n        });\n      }\n\n      if (buttonName == \"previous\") {\n        this.setState({\n          startOfRows: previousstartOfRows\n        });\n      }\n\n      if (buttonName == \"last\") {\n        this.setState({\n          startOfRows: totalRows - noofRowsPerPage\n        });\n      }\n    };\n\n    this.selectAllRows = e => {\n      console.log(e.target.dataset);\n      let tableCheckBoxElements = document.querySelectorAll(\".tablecompinputcheckbox\");\n      console.log(tableCheckBoxElements);\n\n      for (let i = 0; i < tableCheckBoxElements.length; i++) {\n        if (e.target.dataset.tablehtmlid == tableCheckBoxElements[i].dataset.tablehtmlid) {\n          tableCheckBoxElements[i].checked = e.target.checked;\n        }\n      }\n\n      this.selectRow(e);\n    };\n\n    this.selectRow = e => {\n      console.log(e.target.dataset);\n      let {\n        recordDataTemp\n      } = this.state;\n      let selectedrecordData = [];\n      let tableCheckBoxElements = document.querySelectorAll(\".tablecompinputcheckbox\");\n      console.log(tableCheckBoxElements);\n\n      for (let i = 0; i < tableCheckBoxElements.length; i++) {\n        if (e.target.dataset.tablehtmlid == tableCheckBoxElements[i].dataset.tablehtmlid) {\n          if (tableCheckBoxElements[i].checked == true) {\n            console.log(tableCheckBoxElements[i]);\n\n            for (let j = 0; j < recordDataTemp.length; j++) {\n              if (tableCheckBoxElements[i].dataset.rowhtmlid1 == recordDataTemp[j][this.props.rowhtmlid1] && tableCheckBoxElements[i].dataset.rowhtmlid2 == recordDataTemp[j][this.props.rowhtmlid2]) {\n                selectedrecordData.push(recordDataTemp[j]);\n              }\n            }\n          }\n        }\n      }\n\n      this.setState({\n        selectedrecordData: selectedrecordData\n      });\n      console.log(selectedrecordData); // this.props.tableOnChange({\n      //   clientstatename: e.target.dataset.clientstatename,\n      //   clientstatetype: e.target.dataset.clientstatetype,\n      //   recordDataArray: selectedrecordData,\n      //   itemType: \"tablecheckbox\",\n      // });\n    };\n\n    this.state = {\n      startOfRows: 0,\n      noofRowsPerPage: 10,\n      totalRows: 0,\n      downloadTableasCSV: false,\n      recordData: [],\n      recordDataTemp: [],\n      selectedrecordData: [],\n      updaterecorddatafromstate: [],\n      morerecorddatafromstate: []\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.recordData) {\n      let totalRows = this.props.recordData.length;\n      this.setState({\n        totalRows: totalRows,\n        recordData: this.props.recordData,\n        recordDataTemp: this.props.recordData,\n        sortedColumn: \"\"\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.morerecorddata);\n    let {\n      recordData,\n      recordDataTemp,\n      updaterecorddatafromstate,\n      morerecorddatafromstate\n    } = this.state;\n    let {\n      morerecorddata,\n      updaterecorddata\n    } = this.props;\n    let {\n      prevmorerecorddata,\n      prevupdaterecorddata\n    } = prevProps;\n\n    if (JSON.stringify(morerecorddatafromstate) != JSON.stringify(morerecorddata)) {\n      for (let i in morerecorddata) {\n        recordDataTemp.push(morerecorddata[i]);\n      }\n\n      this.setState({\n        recordDataTemp: recordDataTemp,\n        recordData: recordData,\n        morerecorddatafromstate: morerecorddata\n      });\n    }\n\n    if (JSON.stringify(updaterecorddatafromstate) != JSON.stringify(updaterecorddata)) {\n      for (let i in recordDataTemp) {\n        for (let j in updaterecorddata) {\n          if (recordDataTemp[i].id == updaterecorddata[j].id) {\n            recordDataTemp[i] = Object.assign(recordDataTemp[i], updaterecorddata[j]);\n          }\n        }\n\n        for (let i in recordData) {\n          for (let j in updaterecorddata) {\n            if (recordData[i].id == updaterecorddata[j].id) {\n              recordData[i] = Object.assign(recordData[i], updaterecorddata[j]);\n            }\n          }\n        }\n\n        this.setState({\n          recordDataTemp: recordDataTemp,\n          recordData: recordData,\n          updaterecorddatafromstate: updaterecorddata\n        });\n      }\n    }\n  }\n\n  render() {\n    let {\n      recordData,\n      noofRowsPerPage,\n      startOfRows,\n      sortedColumn,\n      downloadTableasCSV\n    } = this.state;\n    console.log(recordData);\n    let {\n      columnMetadata,\n      activeTableviewName,\n      tablehtmlid,\n      clientstatename,\n      clientstatetype,\n      tableName,\n      rowhtmlid1,\n      rowhtmlid2,\n      viewnamedropdownchangeaction\n    } = this.props; //  alert(JSON.stringify(this.props));\n    //  alert(JSON.stringify(viewnamedropdownchangeaction));\n\n    let csvDownloadString = \"\";\n    let tablemetaData = columnMetadata;\n    let tableData = recordData;\n    let thNameList = [];\n    let thNameListObject = [];\n    let endOfRows = parseInt(startOfRows) + parseInt(noofRowsPerPage) - 1;\n    let isShowSelectionCheckbox = true; // table dropdown html\n\n    let tableMetaDataArray = [];\n    let tableMetaDataArraySorted = [];\n\n    for (let i in tablemetaData) {\n      tableMetaDataArray.push(tablemetaData[i]);\n    }\n\n    console.log(tableMetaDataArray); // soring table metadata by order value so that first will be default shown\n\n    tableMetaDataArraySorted = sortArray(tableMetaDataArray, \"order\", \"integer\");\n    console.log(tableMetaDataArraySorted); // prepare th data, buttondata\n\n    let buttonsHtml = [];\n    let thRowHtml = [];\n    let tableViewSelectionDropdownHtml = [];\n    let tableViewSelectionDropdownItemHtml = [];\n    let tableViewSelectionDropdownButtonItemHtml = [];\n\n    for (let i = 0; i < tableMetaDataArraySorted.length; i++) {\n      let metadataItem = tableMetaDataArraySorted[i];\n\n      if (activeTableviewName === metadataItem.name) {\n        //tableviewdropdown\n        tableViewSelectionDropdownItemHtml.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          value: metadataItem.name,\n          selected: true,\n          children: metadataItem.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this));\n        tableViewSelectionDropdownButtonItemHtml.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.tableActionBtnClick,\n          \"data-name\": metadataItem.name,\n          \"data-actionid\": \"\",\n          \"data-actiontype\": \"\",\n          children: metadataItem.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)); // button array\n\n        let buttonsArray = [];\n        let buttonsArraySorted = [];\n\n        for (let buttonI in metadataItem.buttons) {\n          buttonsArray.push(metadataItem.buttons[buttonI]);\n        }\n\n        buttonsArraySorted = sortArray(buttonsArray, \"order\", \"integer\");\n        console.log(buttonsArray);\n        console.log(buttonsArraySorted); //buttonarrayhtml\n\n        for (let i = 0; i < buttonsArraySorted.length; i++) {\n          console.log(i);\n          console.log(buttonsArraySorted[i]);\n          buttonsHtml.push( /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.tableActionBtnClick,\n            \"data-name\": buttonsArraySorted[i].name,\n            \"data-actionid\": buttonsArraySorted[i].action.id,\n            \"data-actiontype\": buttonsArraySorted[i].action.type,\n            children: buttonsArraySorted[i].label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this));\n        } // th html\n\n\n        let thArray = [];\n        let thArraySorted = [];\n        let thItemHtml = [];\n\n        for (let columnI in metadataItem.columns) {\n          thArray.push(metadataItem.columns[columnI]);\n        }\n\n        thArraySorted = sortArray(thArray, \"order\", \"integer\");\n        console.log(thArray);\n        console.log(thArraySorted);\n\n        if (isShowSelectionCheckbox) {\n          thItemHtml.push( /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: this.selectAllRows,\n              \"data-tablehtmlid\": tablehtmlid,\n              \"data-clientstatename\": clientstatename,\n              \"data-clientstatetype\": clientstatetype\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this));\n        }\n\n        for (let i = 0; i < thArraySorted.length; i++) {\n          console.log(i);\n          console.log(thArraySorted[i]);\n          thNameListObject[thArraySorted[i].name] = thArraySorted[i];\n          console.log(thNameListObject);\n          thNameList.push(thArraySorted[i].name); // prepare thitems if tablemetadata\n\n          thItemHtml.push( /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-cursor hoverclass org-fr org-fai-c \",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: this.tableThClick,\n                \"data-name\": thArraySorted[i].name,\n                children: thArraySorted[i].label.toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 17\n              }, this), sortedColumn == thArraySorted[i].name ? /*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n                name: \"unfold_more\",\n                onClick: this.tableThClick,\n                \"data-name\": thArraySorted[i].name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 19\n              }, this) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this));\n        } // prepare th row if  table metadata\n\n\n        thRowHtml.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            backgroundColor: \"grey\"\n          },\n          children: thItemHtml\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this));\n      } else {\n        //tableviewdropdown\n        tableViewSelectionDropdownItemHtml.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          value: metadataItem.name,\n          children: metadataItem.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this));\n        tableViewSelectionDropdownButtonItemHtml.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.tableActionBtnClick,\n          \"data-name\": metadataItem.name,\n          \"data-actionid\": \"\",\n          \"data-actiontype\": \"\",\n          children: metadataItem.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    console.log(tablemetaData);\n    tableViewSelectionDropdownHtml.push( /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: this.onTabledropdownChange,\n      \"data-actionid\": viewnamedropdownchangeaction.id,\n      \"data-tablename\": tableName,\n      children: tableViewSelectionDropdownItemHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this));\n    let totalRowHtml = [];\n    let thItemHtmlIfnoTablemetadata = []; // preparing table th html if columnmetadata is not given\n\n    if (!tablemetaData && tableData) {\n      for (let i = 0; i < tableData.length; i++) {\n        let tableDataItem = tableData[i];\n        console.log(tableDataItem);\n\n        if (isShowSelectionCheckbox) {\n          thItemHtmlIfnoTablemetadata.push( /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: this.selectAllRows,\n              \"data-tablehtmlid\": tablehtmlid,\n              \"data-clientstatename\": clientstatename,\n              \"data-clientstatetype\": clientstatetype\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this));\n        }\n\n        for (let j in tableDataItem) {\n          if (!thNameList.toString().includes(j)) {\n            thNameList.push(j);\n            thItemHtmlIfnoTablemetadata.push( /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"org-cursor hoverclass org-fr org-fai-c\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  onClick: this.tableThClick,\n                  \"data-name\": j,\n                  children: j.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 19\n                }, this), sortedColumn == j ? /*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n                  name: \"unfold_more\",\n                  onClick: this.tableThClick,\n                  \"data-name\": j\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 21\n                }, this) : \"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 15\n            }, this));\n          }\n        }\n      } // prepare th row if no table metadata\n\n\n      thRowHtml.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        style: {\n          backgroundColor: \"grey\"\n        },\n        \"data-tablehtmlid\": tablehtmlid,\n        children: thItemHtmlIfnoTablemetadata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this));\n    }\n\n    totalRowHtml.push(thRowHtml); // preparing table body\n\n    let totalRows = 0;\n    let csvThDownloadString = \"\";\n    let csvTrDownloadArray = [];\n    let csvTrDownloadString = \"\";\n\n    if (tableData) {\n      console.log(tableData);\n      console.log(thNameList);\n      csvThDownloadString = thNameList.join(\",\") + \"\\n\";\n      console.log(csvThDownloadString);\n      let tdRowhtml = [];\n      let tdHtml = [];\n      totalRows = tableData.length;\n\n      for (let tableDataItem = startOfRows; tableDataItem <= endOfRows; tableDataItem++) {\n        if (tableData[tableDataItem]) {\n          console.log(tableDataItem);\n          console.log(tableData[tableDataItem]);\n          let trItem = tableData[tableDataItem];\n          tdHtml = [];\n          tdHtml.push( /*#__PURE__*/_jsxDEV(\"td\", {\n            \"data-tablename\": tableName,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onChange: this.selectRow,\n              className: \"tablecompinputcheckbox\",\n              \"data-tablehtmlid\": tablehtmlid,\n              \"data-rowhtmlid1\": trItem[rowhtmlid1],\n              \"data-rowhtmlid2\": trItem[rowhtmlid2],\n              \"data-clientstatename\": clientstatename,\n              \"data-clientstatetype\": clientstatetype\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this));\n          let csvTdDownloadArrayItem = [];\n          let csvTdDownloadStringItem = \"\";\n\n          for (let thItem in thNameList) {\n            csvTdDownloadArrayItem.push(trItem[thNameList[thItem]]);\n            let listnviewactionid = \"\";\n\n            if (thNameListObject[thNameList[thItem]].listnviewaction && thNameListObject[thNameList[thItem]].listnviewaction.id) {\n              listnviewactionid = thNameListObject[thNameList[thItem]].listnviewaction.id;\n            }\n\n            tdHtml.push( /*#__PURE__*/_jsxDEV(\"td\", {\n              onClick: this.tableTdNameLinkClick,\n              \"data-id\": trItem.id,\n              \"data-label\": trItem[thNameList[thItem]],\n              \"data-tablename\": tableName,\n              \"data-actionid\": thNameListObject[thNameList[thItem]].action.id,\n              children: trItem[thNameList[thItem]]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 15\n            }, this));\n          }\n\n          csvTdDownloadStringItem = csvTdDownloadArrayItem.join(\",\");\n          csvTrDownloadArray.push(csvTdDownloadStringItem);\n          tdRowhtml.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: tdHtml\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 26\n          }, this));\n        }\n      }\n\n      csvTrDownloadString = csvTrDownloadArray.join(\"\\n\");\n      totalRowHtml.push(tdRowhtml);\n      csvDownloadString = csvThDownloadString + csvTrDownloadString;\n\n      if (downloadTableasCSV == true) {\n        const element = document.createElement(\"a\");\n        element.setAttribute(\"href\", `data:text/plain;charset=utf-8, ${csvDownloadString}`);\n        element.setAttribute(\"download\", `${\"fileName\"}.csv`);\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        this.setState({\n          downloadTableasCSV: false\n        });\n      }\n    }\n\n    console.log(this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"org-frnw\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p\",\n        children: [buttonsHtml, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"org-fr org-fjc-sb\",\n          children: [tableViewSelectionDropdownHtml, /*#__PURE__*/_jsxDEV(GetAlphabetPanel, {\n            aplhabetOnClickjs: this.alphabetPanelClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxHeight: \"300px\",\n            overflow: \"auto\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"table1\",\n            style: {\n              width: \"100%\"\n            },\n            children: totalRowHtml\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"org-fr org-fjc-c  org-fai-c \",\n          children: [/*#__PURE__*/_jsxDEV(Paginationcomp, {\n            clkHandler: this.tablepaginationLinkClick,\n            rowprops: {\n              startOfRows: startOfRows,\n              noofRowsPerPage: noofRowsPerPage,\n              totalRows: totalRows\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            style: {\n              paddingLeft: \"10px\"\n            },\n            onChange: this.tableNoofRowsPerPageChange,\n            value: noofRowsPerPage,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"20\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this), true ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.tableActionBtnClick,\n          \"data-name\": \"\",\n          \"data-actionid\": \"\",\n          \"data-actiontype\": \"morerecordsbutton\",\n          children: \"More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 13\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/tablecomp.js"],"names":["React","sortArray","GetAlphabetPanel","Paginationcomp","GetLocalIcon","GetGoogleIcon","F","Component","constructor","props","onTabledropdownChange","e","tableOnclick","tableName","target","dataset","tablename","itemLabel","itemName","value","itemType","actionid","tableActionBtnClick","itemListData","recordDataTemp","state","name","tableCheckBoxElements","document","querySelectorAll","i","length","j","rowhtmlid1","checked","push","console","log","itemData","setState","downloadTableasCSV","actiontype","itemId","alphabetPanelClick","a","sortedColumn","recordData","sortedColumnValue","toLowerCase","startsWith","tableThClick","recordDataSorted","tableTdNameLinkClick","label","id","tableNoofRowsPerPageChange","noofRowsPerPage","startOfRows","tablepaginationLinkClick","buttonName","totalRows","nextstartOfRows","parseInt","previousstartOfRows","selectAllRows","tablehtmlid","selectRow","selectedrecordData","rowhtmlid2","updaterecorddatafromstate","morerecorddatafromstate","componentDidMount","componentDidUpdate","prevProps","morerecorddata","updaterecorddata","prevmorerecorddata","prevupdaterecorddata","JSON","stringify","Object","assign","render","columnMetadata","activeTableviewName","clientstatename","clientstatetype","viewnamedropdownchangeaction","csvDownloadString","tablemetaData","tableData","thNameList","thNameListObject","endOfRows","isShowSelectionCheckbox","tableMetaDataArray","tableMetaDataArraySorted","buttonsHtml","thRowHtml","tableViewSelectionDropdownHtml","tableViewSelectionDropdownItemHtml","tableViewSelectionDropdownButtonItemHtml","metadataItem","buttonsArray","buttonsArraySorted","buttonI","buttons","action","type","thArray","thArraySorted","thItemHtml","columnI","columns","toUpperCase","backgroundColor","totalRowHtml","thItemHtmlIfnoTablemetadata","tableDataItem","toString","includes","csvThDownloadString","csvTrDownloadArray","csvTrDownloadString","join","tdRowhtml","tdHtml","trItem","csvTdDownloadArrayItem","csvTdDownloadStringItem","thItem","listnviewactionid","listnviewaction","element","createElement","setAttribute","style","display","body","appendChild","click","removeChild","maxHeight","overflow","width","paddingLeft"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport { sortArray, GetAlphabetPanel } from \"../js/index\";\nimport Paginationcomp from \"./pagination\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n\nexport default class F extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startOfRows: 0,\n      noofRowsPerPage: 10,\n      totalRows: 0,\n      downloadTableasCSV: false,\n      recordData: [],\n      recordDataTemp: [],\n      selectedrecordData: [],\n      updaterecorddatafromstate: [],\n      morerecorddatafromstate: [],\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.recordData) {\n      let totalRows = this.props.recordData.length;\n      this.setState({\n        totalRows: totalRows,\n        recordData: this.props.recordData,\n        recordDataTemp: this.props.recordData,\n        sortedColumn: \"\",\n      });\n    }\n  }\n\n  onTabledropdownChange = (e) => {\n    this.props.tableOnclick({\n      tableName: e.target.dataset.tablename,\n      itemLabel: \"\",\n      itemName: e.target.value,\n      itemType: \"tabledropdown\",\n      actionid: e.target.dataset.actionid,\n    });\n  };\n\n  tableActionBtnClick = (e) => {\n    let itemListData = [];\n    let { recordDataTemp } = this.state;\n    if (\n      e.target.dataset.name == \"upload\" ||\n      e.target.dataset.name == \"download\"\n    ) {\n      let tableCheckBoxElements = document.querySelectorAll(\n        \".tablecompinputcheckbox\"\n      );\n      for (let i = 0; i < tableCheckBoxElements.length; i++) {\n        for (let j = 0; j < recordDataTemp.length; j++) {\n          if (\n            tableCheckBoxElements[i].dataset.rowhtmlid1 ==\n              recordDataTemp[j][this.props.rowhtmlid1] &&\n            tableCheckBoxElements[i].checked\n          ) {\n            itemListData.push(recordDataTemp[j]);\n          }\n        }\n      }\n      console.log(itemListData);\n      if (e.target.dataset.name == \"upload\") {\n        this.props.tableOnclick({\n          itemLabel: \"\",\n          itemName: e.target.dataset.name,\n          itemType: \"tablebutton\",\n          itemData: \"\",\n          itemListData: itemListData,\n        });\n      }\n\n      if (e.target.dataset.name == \"download\") {\n        this.setState({ downloadTableasCSV: true });\n      }\n    } else {\n      this.props.tableOnclick({\n        itemLabel: \"\",\n        itemName: e.target.dataset.name,\n        itemType: e.target.dataset.actiontype,\n        itemId: e.target.dataset.actionid,\n        actionid: e.target.dataset.actionid,\n        itemData: \"\",\n        itemListData: itemListData,\n      });\n    }\n  };\n\n  alphabetPanelClick = (a) => {\n    console.log(a);\n    let { recordDataTemp, sortedColumn } = this.state;\n    if (sortedColumn != \"\") {\n      let recordData = [];\n      if (a == \"All\") {\n        this.setState({ recordData: recordDataTemp });\n      } else {\n        for (let i in recordDataTemp) {\n          let sortedColumnValue = recordDataTemp[i][sortedColumn];\n          if (sortedColumnValue) {\n            if (sortedColumnValue.toLowerCase().startsWith(a.toLowerCase())) {\n              recordData.push(recordDataTemp[i]);\n            }\n          }\n        }\n\n        this.setState({ recordData: recordData });\n      }\n    }\n  };\n\n  tableThClick = (e) => {\n    console.log(e.target.dataset.name);\n    let { recordData } = this.state;\n    console.log(recordData);\n    let recordDataSorted = sortArray(\n      recordData,\n      e.target.dataset.name,\n      \"string\"\n    );\n    console.log(recordDataSorted);\n    this.setState({\n      recordData: recordDataSorted,\n      sortedColumn: e.target.dataset.name,\n    });\n  };\n\n  tableTdNameLinkClick = (e) => {\n    this.props.tableOnclick({\n      itemLabel: e.target.dataset.label,\n      itemName: e.target.dataset.id,\n      actionid: e.target.dataset.actionid,\n      itemType: \"tabletdnamelink\",\n    });\n  };\n\n  tableNoofRowsPerPageChange = (e) => {\n    this.setState({ noofRowsPerPage: e.target.value, startOfRows: 0 });\n  };\n\n  tablepaginationLinkClick = (buttonName) => {\n    console.log(buttonName);\n    let { startOfRows, noofRowsPerPage, totalRows } = this.state;\n    let nextstartOfRows = parseInt(startOfRows) + parseInt(noofRowsPerPage);\n    let previousstartOfRows = parseInt(startOfRows) - parseInt(noofRowsPerPage);\n    if (buttonName == \"first\") {\n      this.setState({ startOfRows: 0 });\n    }\n    if (buttonName == \"next\") {\n      this.setState({ startOfRows: nextstartOfRows });\n    }\n    if (buttonName == \"previous\") {\n      this.setState({ startOfRows: previousstartOfRows });\n    }\n    if (buttonName == \"last\") {\n      this.setState({ startOfRows: totalRows - noofRowsPerPage });\n    }\n  };\n\n  selectAllRows = (e) => {\n    console.log(e.target.dataset);\n    let tableCheckBoxElements = document.querySelectorAll(\n      \".tablecompinputcheckbox\"\n    );\n    console.log(tableCheckBoxElements);\n    for (let i = 0; i < tableCheckBoxElements.length; i++) {\n      if (\n        e.target.dataset.tablehtmlid ==\n        tableCheckBoxElements[i].dataset.tablehtmlid\n      ) {\n        tableCheckBoxElements[i].checked = e.target.checked;\n      }\n    }\n    this.selectRow(e);\n  };\n\n  selectRow = (e) => {\n    console.log(e.target.dataset);\n    let { recordDataTemp } = this.state;\n    let selectedrecordData = [];\n\n    let tableCheckBoxElements = document.querySelectorAll(\n      \".tablecompinputcheckbox\"\n    );\n    console.log(tableCheckBoxElements);\n    for (let i = 0; i < tableCheckBoxElements.length; i++) {\n      if (\n        e.target.dataset.tablehtmlid ==\n        tableCheckBoxElements[i].dataset.tablehtmlid\n      ) {\n        if (tableCheckBoxElements[i].checked == true) {\n          console.log(tableCheckBoxElements[i]);\n          for (let j = 0; j < recordDataTemp.length; j++) {\n            if (\n              tableCheckBoxElements[i].dataset.rowhtmlid1 ==\n                recordDataTemp[j][this.props.rowhtmlid1] &&\n              tableCheckBoxElements[i].dataset.rowhtmlid2 ==\n                recordDataTemp[j][this.props.rowhtmlid2]\n            ) {\n              selectedrecordData.push(recordDataTemp[j]);\n            }\n          }\n        }\n      }\n    }\n    this.setState({ selectedrecordData: selectedrecordData });\n\n    console.log(selectedrecordData);\n\n    // this.props.tableOnChange({\n    //   clientstatename: e.target.dataset.clientstatename,\n    //   clientstatetype: e.target.dataset.clientstatetype,\n    //   recordDataArray: selectedrecordData,\n    //   itemType: \"tablecheckbox\",\n    // });\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.morerecorddata);\n    let {\n      recordData,\n      recordDataTemp,\n      updaterecorddatafromstate,\n      morerecorddatafromstate,\n    } = this.state;\n    let { morerecorddata, updaterecorddata } = this.props;\n    let { prevmorerecorddata, prevupdaterecorddata } = prevProps;\n    if (\n      JSON.stringify(morerecorddatafromstate) != JSON.stringify(morerecorddata)\n    ) {\n      for (let i in morerecorddata) {\n        recordDataTemp.push(morerecorddata[i]);\n      }\n      this.setState({\n        recordDataTemp: recordDataTemp,\n        recordData: recordData,\n        morerecorddatafromstate: morerecorddata,\n      });\n    }\n\n    if (\n      JSON.stringify(updaterecorddatafromstate) !=\n      JSON.stringify(updaterecorddata)\n    ) {\n      for (let i in recordDataTemp) {\n        for (let j in updaterecorddata) {\n          if (recordDataTemp[i].id == updaterecorddata[j].id) {\n            recordDataTemp[i] = Object.assign(\n              recordDataTemp[i],\n              updaterecorddata[j]\n            );\n          }\n        }\n\n        for (let i in recordData) {\n          for (let j in updaterecorddata) {\n            if (recordData[i].id == updaterecorddata[j].id) {\n              recordData[i] = Object.assign(recordData[i], updaterecorddata[j]);\n            }\n          }\n        }\n\n        this.setState({\n          recordDataTemp: recordDataTemp,\n          recordData: recordData,\n          updaterecorddatafromstate: updaterecorddata,\n        });\n      }\n    }\n  }\n\n  render() {\n    let {\n      recordData,\n      noofRowsPerPage,\n      startOfRows,\n      sortedColumn,\n      downloadTableasCSV,\n    } = this.state;\n    console.log(recordData);\n    let {\n      columnMetadata,\n      activeTableviewName,\n      tablehtmlid,\n      clientstatename,\n      clientstatetype,\n      tableName,\n      rowhtmlid1,\n      rowhtmlid2,\n      viewnamedropdownchangeaction,\n    } = this.props;\n    //  alert(JSON.stringify(this.props));\n    //  alert(JSON.stringify(viewnamedropdownchangeaction));\n    let csvDownloadString = \"\";\n    let tablemetaData = columnMetadata;\n    let tableData = recordData;\n    let thNameList = [];\n    let thNameListObject = [];\n\n    let endOfRows = parseInt(startOfRows) + parseInt(noofRowsPerPage) - 1;\n    let isShowSelectionCheckbox = true;\n    // table dropdown html\n    let tableMetaDataArray = [];\n    let tableMetaDataArraySorted = [];\n    for (let i in tablemetaData) {\n      tableMetaDataArray.push(tablemetaData[i]);\n    }\n    console.log(tableMetaDataArray);\n\n    // soring table metadata by order value so that first will be default shown\n    tableMetaDataArraySorted = sortArray(\n      tableMetaDataArray,\n      \"order\",\n      \"integer\"\n    );\n    console.log(tableMetaDataArraySorted);\n\n    // prepare th data, buttondata\n    let buttonsHtml = [];\n    let thRowHtml = [];\n    let tableViewSelectionDropdownHtml = [];\n    let tableViewSelectionDropdownItemHtml = [];\n    let tableViewSelectionDropdownButtonItemHtml = [];\n\n    for (let i = 0; i < tableMetaDataArraySorted.length; i++) {\n      let metadataItem = tableMetaDataArraySorted[i];\n      if (activeTableviewName === metadataItem.name) {\n        //tableviewdropdown\n        tableViewSelectionDropdownItemHtml.push(\n          <option value={metadataItem.name} selected>\n            {metadataItem.label}\n          </option>\n        );\n        tableViewSelectionDropdownButtonItemHtml.push(\n          <button\n            onClick={this.tableActionBtnClick}\n            data-name={metadataItem.name}\n            data-actionid=\"\"\n            data-actiontype=\"\"\n          >\n            {metadataItem.label}\n          </button>\n        );\n\n        // button array\n        let buttonsArray = [];\n        let buttonsArraySorted = [];\n        for (let buttonI in metadataItem.buttons) {\n          buttonsArray.push(metadataItem.buttons[buttonI]);\n        }\n\n        buttonsArraySorted = sortArray(buttonsArray, \"order\", \"integer\");\n        console.log(buttonsArray);\n        console.log(buttonsArraySorted);\n        //buttonarrayhtml\n        for (let i = 0; i < buttonsArraySorted.length; i++) {\n          console.log(i);\n          console.log(buttonsArraySorted[i]);\n          buttonsHtml.push(\n            <button\n              onClick={this.tableActionBtnClick}\n              data-name={buttonsArraySorted[i].name}\n              data-actionid={buttonsArraySorted[i].action.id}\n              data-actiontype={buttonsArraySorted[i].action.type}\n            >\n              {buttonsArraySorted[i].label}\n            </button>\n          );\n        }\n\n        // th html\n        let thArray = [];\n        let thArraySorted = [];\n        let thItemHtml = [];\n        for (let columnI in metadataItem.columns) {\n          thArray.push(metadataItem.columns[columnI]);\n        }\n\n        thArraySorted = sortArray(thArray, \"order\", \"integer\");\n        console.log(thArray);\n        console.log(thArraySorted);\n        if (isShowSelectionCheckbox) {\n          thItemHtml.push(\n            <th>\n              <input\n                type=\"checkbox\"\n                onChange={this.selectAllRows}\n                data-tablehtmlid={tablehtmlid}\n                data-clientstatename={clientstatename}\n                data-clientstatetype={clientstatetype}\n              />\n            </th>\n          );\n        }\n\n        for (let i = 0; i < thArraySorted.length; i++) {\n          console.log(i);\n          console.log(thArraySorted[i]);\n          thNameListObject[thArraySorted[i].name] = thArraySorted[i];\n          console.log(thNameListObject);\n          thNameList.push(thArraySorted[i].name);\n          // prepare thitems if tablemetadata\n          thItemHtml.push(\n            <th>\n              <div className=\"org-cursor hoverclass org-fr org-fai-c \">\n                <span\n                  onClick={this.tableThClick}\n                  data-name={thArraySorted[i].name}\n                >\n                  {thArraySorted[i].label.toUpperCase()}\n                </span>\n                {sortedColumn == thArraySorted[i].name ? (\n                  <GetGoogleIcon\n                    name=\"unfold_more\"\n                    onClick={this.tableThClick}\n                    data-name={thArraySorted[i].name}\n                  />\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </th>\n          );\n        }\n        // prepare th row if  table metadata\n        thRowHtml.push(\n          <tr style={{ backgroundColor: \"grey\" }}>{thItemHtml}</tr>\n        );\n      } else {\n        //tableviewdropdown\n        tableViewSelectionDropdownItemHtml.push(\n          <option value={metadataItem.name}>{metadataItem.label}</option>\n        );\n        tableViewSelectionDropdownButtonItemHtml.push(\n          <button\n            onClick={this.tableActionBtnClick}\n            data-name={metadataItem.name}\n            data-actionid=\"\"\n            data-actiontype=\"\"\n          >\n            {metadataItem.label}\n          </button>\n        );\n      }\n    }\n    console.log(tablemetaData);\n    tableViewSelectionDropdownHtml.push(\n      <select\n        onChange={this.onTabledropdownChange}\n        data-actionid={viewnamedropdownchangeaction.id}\n        data-tablename={tableName}\n      >\n        {tableViewSelectionDropdownItemHtml}\n      </select>\n    );\n\n    let totalRowHtml = [];\n\n    let thItemHtmlIfnoTablemetadata = [];\n\n    // preparing table th html if columnmetadata is not given\n    if (!tablemetaData && tableData) {\n      for (let i = 0; i < tableData.length; i++) {\n        let tableDataItem = tableData[i];\n        console.log(tableDataItem);\n        if (isShowSelectionCheckbox) {\n          thItemHtmlIfnoTablemetadata.push(\n            <th>\n              <input\n                type=\"checkbox\"\n                onChange={this.selectAllRows}\n                data-tablehtmlid={tablehtmlid}\n                data-clientstatename={clientstatename}\n                data-clientstatetype={clientstatetype}\n              />\n            </th>\n          );\n        }\n        for (let j in tableDataItem) {\n          if (!thNameList.toString().includes(j)) {\n            thNameList.push(j);\n            thItemHtmlIfnoTablemetadata.push(\n              <th>\n                <div className=\"org-cursor hoverclass org-fr org-fai-c\">\n                  <span onClick={this.tableThClick} data-name={j}>\n                    {j.toUpperCase()}\n                  </span>\n                  {sortedColumn == j ? (\n                    <GetGoogleIcon\n                      name=\"unfold_more\"\n                      onClick={this.tableThClick}\n                      data-name={j}\n                    />\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </th>\n            );\n          }\n        }\n      }\n      // prepare th row if no table metadata\n      thRowHtml.push(\n        <tr style={{ backgroundColor: \"grey\" }} data-tablehtmlid={tablehtmlid}>\n          {thItemHtmlIfnoTablemetadata}\n        </tr>\n      );\n    }\n\n    totalRowHtml.push(thRowHtml);\n\n    // preparing table body\n    let totalRows = 0;\n    let csvThDownloadString = \"\";\n    let csvTrDownloadArray = [];\n    let csvTrDownloadString = \"\";\n\n    if (tableData) {\n      console.log(tableData);\n      console.log(thNameList);\n\n      csvThDownloadString = thNameList.join(\",\") + \"\\n\";\n      console.log(csvThDownloadString);\n\n      let tdRowhtml = [];\n      let tdHtml = [];\n      totalRows = tableData.length;\n\n      for (\n        let tableDataItem = startOfRows;\n        tableDataItem <= endOfRows;\n        tableDataItem++\n      ) {\n        if (tableData[tableDataItem]) {\n          console.log(tableDataItem);\n          console.log(tableData[tableDataItem]);\n          let trItem = tableData[tableDataItem];\n          tdHtml = [];\n\n          tdHtml.push(\n            <td data-tablename={tableName}>\n              <input\n                type=\"checkbox\"\n                onChange={this.selectRow}\n                className=\"tablecompinputcheckbox\"\n                data-tablehtmlid={tablehtmlid}\n                data-rowhtmlid1={trItem[rowhtmlid1]}\n                data-rowhtmlid2={trItem[rowhtmlid2]}\n                data-clientstatename={clientstatename}\n                data-clientstatetype={clientstatetype}\n              />\n            </td>\n          );\n\n          let csvTdDownloadArrayItem = [];\n          let csvTdDownloadStringItem = \"\";\n          for (let thItem in thNameList) {\n            csvTdDownloadArrayItem.push(trItem[thNameList[thItem]]);\n            let listnviewactionid = \"\";\n            if (\n              thNameListObject[thNameList[thItem]].listnviewaction &&\n              thNameListObject[thNameList[thItem]].listnviewaction.id\n            ) {\n              listnviewactionid =\n                thNameListObject[thNameList[thItem]].listnviewaction.id;\n            }\n            tdHtml.push(\n              <td\n                onClick={this.tableTdNameLinkClick}\n                data-id={trItem.id}\n                data-label={trItem[thNameList[thItem]]}\n                data-tablename={tableName}\n                data-actionid={thNameListObject[thNameList[thItem]].action.id}\n              >\n                {trItem[thNameList[thItem]]}\n                {/* {listnviewactionid == \"\" ? (\n                  \"\"\n                ) : (\n                  <span\n                    onClick={this.tableTdNameLinkClick}\n                    data-id={trItem.id}\n                    data-label={trItem[thNameList[thItem]]}\n                    data-tablename={tableName}\n                    data-actionid={listnviewactionid}\n                  >\n                    listnview\n                  </span>\n                )} */}\n              </td>\n            );\n          }\n          csvTdDownloadStringItem = csvTdDownloadArrayItem.join(\",\");\n          csvTrDownloadArray.push(csvTdDownloadStringItem);\n          tdRowhtml.push(<tr>{tdHtml}</tr>);\n        }\n      }\n      csvTrDownloadString = csvTrDownloadArray.join(\"\\n\");\n      totalRowHtml.push(tdRowhtml);\n\n      csvDownloadString = csvThDownloadString + csvTrDownloadString;\n\n      if (downloadTableasCSV == true) {\n        const element = document.createElement(\"a\");\n        element.setAttribute(\n          \"href\",\n          `data:text/plain;charset=utf-8, ${csvDownloadString}`\n        );\n        element.setAttribute(\"download\", `${\"fileName\"}.csv`);\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        this.setState({ downloadTableasCSV: false });\n      }\n    }\n    console.log(this.props);\n    return (\n      <div className=\"org-frnw\">\n        {/* <div className=\"org-flexbasis-100p org-mflexbasis-15p org-lflexbasis-15p org-fc\">\n          {tableViewSelectionDropdownButtonItemHtml}\n        </div> */}\n        <div className=\"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p\">\n          {buttonsHtml}\n          <div className=\"org-fr org-fjc-sb\">\n            {tableViewSelectionDropdownHtml}\n            <GetAlphabetPanel aplhabetOnClickjs={this.alphabetPanelClick} />\n          </div>\n          <div style={{ maxHeight: \"300px\", overflow: \"auto\" }}>\n            <table id=\"table1\" style={{ width: \"100%\" }}>\n              {totalRowHtml}\n            </table>\n          </div>\n          <div className=\"org-fr org-fjc-c  org-fai-c \">\n            <Paginationcomp\n              clkHandler={this.tablepaginationLinkClick}\n              rowprops={{\n                startOfRows: startOfRows,\n                noofRowsPerPage: noofRowsPerPage,\n                totalRows: totalRows,\n              }}\n            />\n            <select\n              style={{ paddingLeft: \"10px\" }}\n              onChange={this.tableNoofRowsPerPageChange}\n              value={noofRowsPerPage}\n            >\n              <option>5</option>\n              <option>10</option>\n              <option>20</option>\n              <option>50</option>\n              <option>100</option>\n            </select>\n          </div>\n          {true ? (\n            <button\n              onClick={this.tableActionBtnClick}\n              data-name=\"\"\n              data-actionid=\"\"\n              data-actiontype=\"morerecordsbutton\"\n            >\n              More\n            </button>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}