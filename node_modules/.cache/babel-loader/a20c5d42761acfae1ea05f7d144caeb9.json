{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddatanew.js\";\nimport React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping, getLocalData, serverButtonHandler } from \"../js/index\";\nimport Htmlform from \"./htmlformnew\";\nimport Tabpanel from \"./tabpanel\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n/*\n let urlsearchparams = new URLSearchParams(\n      this.props.routerprops.location.search\n    );\n\n/////\n   <Recorddatanew\n          {...this.props}\n          compprops={{\n            orgname: \"gouthama\",\n            userprofileid: \"gouthama-admin\",\n            userid: \"\",\n            parenttablename: \"\",\n            tablename: \"student2\",\n            parentrecid: \"\",\n            recordid: \"AC-fdf-fdfdfdd\",\n            action: \"new\",\n            urlsearchparams: urlsearchparams,\n          }}\n          styleprops={{\n            width: \"100%\",\n            height: \"\",\n            backgroundColor: \"\",\n            overflow: \"auto\",\n          }}\n        />\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.tabclkHanlder = props => {\n      let {\n        tabLabel,\n        tabName,\n        tabType\n      } = props;\n      console.log(props);\n      let inputrecorddatatabcontentArray = document.getElementsByClassName(\"inputrecorddatatabcontent\");\n\n      for (let i = 0; i < inputrecorddatatabcontentArray.length; i++) {\n        console.log(inputrecorddatatabcontentArray[i]);\n\n        if (tabName == inputrecorddatatabcontentArray[i].dataset.tabname) {\n          inputrecorddatatabcontentArray[i].style.display = \"flex\";\n        } else {\n          inputrecorddatatabcontentArray[i].style.display = \"none\";\n        }\n      }\n    };\n\n    this.subsectionclkHanlder = (tabName, sectionName, subsectionName) => {\n      let isValid = true;\n      let htmlformsubsectioncontentArray = document.getElementsByClassName(\"htmlformsubsectioncontent\");\n\n      for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n        console.log(htmlformsubsectioncontentArray[i]);\n\n        if (tabName == htmlformsubsectioncontentArray[i].dataset.tabname && sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname) {\n          if (htmlformsubsectioncontentArray[i].style.display == \"flex\") {\n            //reset subsection errors\n            let errorelements = htmlformsubsectioncontentArray[i].getElementsByClassName(\"htmlforminputitemerror\");\n\n            for (let j = 0; j < errorelements.length; j++) {\n              errorelements[j].style.display = \"none\";\n            } //validate childs\n\n\n            for (let childrenI in htmlformsubsectioncontentArray[i].getElementsByTagName(\"*\")) {\n              let children = htmlformsubsectioncontentArray[i].getElementsByTagName(\"*\")[childrenI];\n              console.log(children);\n\n              if (this.inputElementValidate(children) == false) {\n                isValid = false;\n              }\n            }\n          }\n        }\n      }\n\n      if (isValid == true) {\n        for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n          console.log(htmlformsubsectioncontentArray[i]);\n\n          if (tabName == htmlformsubsectioncontentArray[i].dataset.tabname && sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname) {\n            if (subsectionName == htmlformsubsectioncontentArray[i].dataset.subsectionname) {\n              htmlformsubsectioncontentArray[i].style.display = \"flex\";\n            } else {\n              htmlformsubsectioncontentArray[i].style.display = \"none\";\n            }\n          }\n        }\n      }\n    };\n\n    this.inputElementValidate = htmllement => {\n      let isValid = true;\n\n      if (htmllement && htmllement.required) {\n        if (htmllement.value.trim() == \"\" || htmllement.value == undefined) {\n          htmllement.style.borderBottomColor = \"red\";\n          htmllement.style.borderBottomWidth = \"2px\";\n          var newDiv = document.createElement(\"div\");\n          var newContent = document.createTextNode(\"This is required\");\n          newDiv.setAttribute(\"class\", \"htmlforminputitemerror\");\n          newDiv.appendChild(newContent);\n          htmllement.insertAdjacentElement(\"afterend\", newDiv);\n          isValid = false;\n        } else {\n          htmllement.style.borderBottomColor = htmllement.style.borderRightColor;\n          htmllement.style.borderBottomWidth = htmllement.style.borderRightWidth;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.inputChangeHandler = props => {\n      let {\n        inputName,\n        inputValue\n      } = props;\n      let recorddata = this.state.recorddata;\n      recorddata[inputName] = inputValue;\n      this.setState({\n        recorddata: recorddata\n      });\n      console.log(this.state);\n    };\n\n    this.clickHandler = props => {\n      console.log(props);\n      let localdata = getLocalData(this.props);\n      serverButtonHandler({\n        localdata: localdata,\n        clickprops: props,\n        recorddata: this.state.recorddata\n      });\n    };\n\n    this.inputKeyupHandler = () => {};\n\n    this.state = {\n      mainPanelHtml: [],\n      recorddata: {}\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      actionname,\n      urlsearchparams\n    } = this.props.compprops;\n    let routerpropsparams = this.props.routerprops.match.params;\n    this.getRecordNewMetadataAndDatafromServer({\n      orgname: orgname,\n      userprofileid: userprofileid,\n      userid: userid,\n      tablename: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: actionname,\n      viewname: \"\",\n      urlsearchparams: urlsearchparams\n    });\n  }\n\n  async getRecordNewMetadataAndDatafromServer(props) {\n    console.log(props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      urlsearchparams\n    } = props;\n    let {\n      recorddata\n    } = this.state;\n    let fieldsupdatedfromurl = {};\n    let objectmetadataParams = {};\n    let layoutmetadataParams = {}; // get object metadata for field types to show on ui\n\n    objectmetadataParams = {\n      objectName: \"tableinfo\",\n      objectData: {},\n      keyConditions: [{\n        field: \"orgname\",\n        value: orgname,\n        expression: \"=\"\n      }, {\n        field: \"id\",\n        value: tablename,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    }; // get layout metadata for order of the fields\n\n    layoutmetadataParams = {\n      objectName: \"layoutperuserprofile\",\n      objectData: {},\n      keyConditions: [{\n        field: \"userprofileid\",\n        value: userprofileid,\n        expression: \"=\"\n      }, {\n        field: \"tableid\",\n        value: tablename + \"-\" + action,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    }; // get object metadata\n\n    console.log(objectmetadataParams);\n    let objectmetadataresult = await getRecorddata(objectmetadataParams);\n\n    if (objectmetadataresult.isSuccess === \"false\") {\n      alert(\"layoutmetadata\" + objectmetadataresult.message);\n    } else {\n      // console.log(objectmetadataresult.dataprops.Items);\n      if (objectmetadataresult.dataprops.Items[0]) {\n        let objectMetadata = objectmetadataresult.dataprops.Items[0].data; // get layout metadata\n\n        let layoutmetadataresult = await getRecorddata(layoutmetadataParams);\n\n        if (layoutmetadataresult.isSuccess === \"false\") {\n          alert(\"layoutmetadata\" + layoutmetadataresult.message);\n        } else {\n          let layoutMetadata = layoutmetadataresult.dataprops.Items[0].dataprops;\n          console.log(layoutMetadata);\n          let layoutMetadataHtml = [];\n          let htmlFormDataprops = [];\n          let tabArrayObject = layoutMetadata.tabs;\n          console.log(tabArrayObject);\n          let tabarray = [];\n\n          for (let i in tabArrayObject) {\n            tabarray.push(tabArrayObject[i]);\n          }\n\n          let sortedTabs = sortArray(tabarray, \"order\", \"integer\");\n          console.log(sortedTabs);\n          let tabHtml = [];\n          let tabObjectArray = [];\n          let tabdataprops = [];\n          let activeTabName;\n\n          for (let tabI in sortedTabs) {\n            if (sortedTabs[tabI].defaultactive == \"true\") {\n              activeTabName = sortedTabs[tabI].name;\n            }\n\n            tabObjectArray.push({\n              label: sortedTabs[tabI].label,\n              name: sortedTabs[tabI].name\n            });\n          }\n\n          tabHtml.push( /*#__PURE__*/_jsxDEV(Tabpanel, {\n            bgcolor: \"\",\n            onTabOpen: this.tabclkHanlder,\n            compprops: {\n              activetab: activeTabName,\n              tabs: tabObjectArray\n            },\n            styleprops: {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this));\n\n          for (let tabI in sortedTabs) {\n            let sectionarray = [];\n\n            for (let i in sortedTabs[tabI].sections) {\n              sectionarray.push(sortedTabs[tabI].sections[i]);\n            }\n\n            let sortedSections = sortArray(sectionarray, \"order\", \"integer\");\n            console.log(sortedSections);\n            let sectionHtml = [];\n\n            for (let sectionI in sortedSections) {\n              let subsectionarray = [];\n\n              for (let i in sortedSections[sectionI].subsections) {\n                subsectionarray.push(sortedSections[sectionI].subsections[i]);\n              }\n\n              let sortedsubSections = sortArray(subsectionarray, \"order\", \"integer\");\n              console.log(sortedsubSections);\n              let subsectionHtml = [];\n\n              for (let subsectionI in sortedsubSections) {\n                let fieldsarray = [];\n\n                for (let i in sortedsubSections[subsectionI].fields) {\n                  fieldsarray.push(sortedsubSections[subsectionI].fields[i]);\n                }\n\n                let sortedFields = sortArray(fieldsarray, \"order\", \"integer\");\n                console.log(sortedFields);\n                let fieldsArrayHtml = [];\n                htmlFormDataprops = [];\n\n                for (let fieldI in sortedFields) {\n                  let fieldobject = sortedFields[fieldI]; ////////////////\n\n                  if (fieldobject.isglobalfield == \"true\") {\n                    if (fieldobject.type == \"select\") {\n                      let optionsObj = fieldobject.typeparams.options;\n                      let optionsArray = [];\n                      let optionsArraySorted = [];\n\n                      for (let fieldoption in optionsObj) {\n                        optionsArray.push(optionsObj[fieldoption]);\n                      }\n\n                      optionsArraySorted = sortArray(optionsArray, \"order\", \"integer\");\n                      htmlFormDataprops.push({\n                        label: fieldobject.label,\n                        name: fieldobject.name,\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType: fieldobject.type,\n                          inputOrOutput: fieldobject.inputoroutput\n                        }),\n                        options: optionsArraySorted,\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n                        placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n                        defaultvalue: urlsearchparams.get(fieldobject.name) ? urlsearchparams.get(fieldobject.name) : fieldobject.defaultvalue,\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype\n                      });\n\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(fieldobject.name);\n                      }\n                    } else if (fieldobject.type == \"buttonpanel\") {\n                      let buttonsObj = fieldobject.globalfieldtypeparams.buttons;\n                      let buttonsArray = [];\n                      let buttonsArraySorted = [];\n\n                      for (let button in buttonsObj) {\n                        buttonsArray.push(buttonsObj[button]);\n                      }\n\n                      buttonsArraySorted = sortArray(buttonsArray, \"order\", \"integer\");\n                      let sectionfooterbuttonpanel = {\n                        label: \"footerbuttonpanel\",\n                        name: \"footerbuttonpanel\",\n                        value: \"footerbuttonpanel\",\n                        buttonarrayprops: buttonsArraySorted,\n                        type: \"buttonpanel\",\n                        width: \"100%\",\n                        placeholder: \"\",\n                        required: \"true\"\n                      };\n                      htmlFormDataprops.push(sectionfooterbuttonpanel);\n                    } else {\n                      htmlFormDataprops.push({\n                        label: fieldobject.label,\n                        name: fieldobject.name,\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType: fieldobject.type,\n                          inputOrOutput: fieldobject.inputoroutput\n                        }),\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n                        placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n                        defaultvalue: urlsearchparams.get(fieldobject.name) ? urlsearchparams.get(fieldobject.name) : fieldobject.defaultvalue,\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype\n                      });\n\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(fieldobject.name);\n                      }\n                    }\n                  } else {\n                    console.log(fieldobject.name);\n\n                    if (objectMetadata.fields[fieldobject.name].type == \"select\") {\n                      let optionsObj = objectMetadata.fields[fieldobject.name].typeparams.options;\n                      let optionsArray = [];\n                      let optionsArraySorted = [];\n\n                      for (let fieldoption in optionsObj) {\n                        optionsArray.push(optionsObj[fieldoption]);\n                      }\n\n                      optionsArraySorted = sortArray(optionsArray, \"order\", \"integer\");\n                      htmlFormDataprops.push({\n                        label: objectMetadata.fields[fieldobject.name].label,\n                        name: fieldobject.name,\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType: objectMetadata.fields[fieldobject.name].type,\n                          inputOrOutput: fieldobject.inputoroutput\n                        }),\n                        options: optionsArraySorted,\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n                        placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n                        // defaultvalue: fieldobject.defaultvalue,\n                        defaultvalue: urlsearchparams.get(fieldobject.name) ? urlsearchparams.get(fieldobject.name) : fieldobject.defaultvalue,\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype\n                      });\n\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(fieldobject.name);\n                      }\n                    } else {\n                      // if field is not globalfield and not select\n                      htmlFormDataprops.push({\n                        label: objectMetadata.fields[fieldobject.name].label,\n                        name: fieldobject.name,\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType: objectMetadata.fields[fieldobject.name].type,\n                          inputOrOutput: fieldobject.inputoroutput\n                        }),\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n                        placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n                        defaultvalue: urlsearchparams.get(fieldobject.name) ? urlsearchparams.get(fieldobject.name) : fieldobject.defaultvalue,\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype\n                      });\n\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(fieldobject.name);\n                      }\n                    }\n                  } ///////////////\n\n\n                  console.log(htmlFormDataprops);\n                }\n\n                fieldsArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\",\n                  children: /*#__PURE__*/_jsxDEV(Htmlform, {\n                    inputChanged: this.inputChangeHandler,\n                    clkHandler: this.clickHandler,\n                    inputKeyUp: this.inputKeyupHandler,\n                    dataprops: htmlFormDataprops,\n                    bgcolor: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 526,\n                  columnNumber: 19\n                }, this));\n\n                if (sortedsubSections[subsectionI].defaultactive == \"true\") {\n                  subsectionHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      width: \"100%\"\n                    },\n                    children: [sortedsubSections[subsectionI].hideheader == \"true\" ? \"\" : /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"org-fr org-fai-c htmlformsubsectiondropdown\",\n                      style: {\n                        backgroundColor: \"#717171\",\n                        opacity: \"0.5\"\n                      },\n                      onClick: () => this.subsectionclkHanlder(sortedTabs[tabI].name, sortedSections[sectionI].name, sortedsubSections[subsectionI].name),\n                      children: [/*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n                        name: \"expand_less\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 554,\n                        columnNumber: 27\n                      }, this), sortedsubSections[subsectionI].label]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 543,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"htmlformsubsectioncontent org-fr org-fjc-s\",\n                      \"data-tabname\": sortedTabs[tabI].name,\n                      \"data-sectionname\": sortedSections[sectionI].name,\n                      \"data-subsectionname\": sortedsubSections[subsectionI].name,\n                      style: {\n                        display: \"flex\"\n                      },\n                      children: fieldsArrayHtml\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 558,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 539,\n                    columnNumber: 21\n                  }, this));\n                } else {\n                  subsectionHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      width: \"100%\"\n                    },\n                    children: [sortedsubSections[subsectionI].hideheader == \"true\" ? \"\" : /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"org-fr org-fai-c htmlformsubsectiondropdown\",\n                      style: {\n                        backgroundColor: \"#717171\",\n                        opacity: \"0.5\"\n                      },\n                      onClick: () => this.subsectionclkHanlder(sortedTabs[tabI].name, sortedSections[sectionI].name, sortedsubSections[subsectionI].name),\n                      children: [/*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n                        name: \"expand_more\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 588,\n                        columnNumber: 27\n                      }, this), sortedsubSections[subsectionI].label]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 577,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"htmlformsubsectioncontent org-fr org-fjc-s\",\n                      \"data-tabname\": sortedTabs[tabI].name,\n                      \"data-sectionname\": sortedSections[sectionI].name,\n                      \"data-subsectionname\": sortedsubSections[subsectionI].name,\n                      style: {\n                        display: \"none\"\n                      },\n                      children: fieldsArrayHtml\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 592,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 573,\n                    columnNumber: 21\n                  }, this));\n                }\n              }\n\n              sectionHtml.push(subsectionHtml);\n            }\n\n            if (sortedTabs[tabI].defaultactive == \"true\") {\n              tabHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  flexWrap: \"wrap\",\n                  width: \"100%\"\n                },\n                \"data-tabname\": sortedTabs[tabI].name,\n                className: \"inputrecorddatatabcontent\",\n                children: sectionHtml\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 17\n              }, this));\n            } else {\n              tabHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"none\",\n                  flexWrap: \"wrap\",\n                  width: \"100%\"\n                },\n                \"data-tabname\": sortedTabs[tabI].name,\n                className: \"inputrecorddatatabcontent\",\n                children: sectionHtml\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 17\n              }, this));\n            } //  tabHtml.push(sectionHtml);\n\n          }\n\n          layoutMetadataHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\",\n              children: tabHtml\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 13\n          }, this));\n          console.log(htmlFormDataprops);\n          let mainPanelHtml = [];\n          mainPanelHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: \"#F2F2F2\"\n            },\n            children: layoutMetadataHtml\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 13\n          }, this));\n          this.setState({\n            mainPanelHtml: []\n          }, () => {\n            this.setState({\n              mainPanelHtml: mainPanelHtml,\n              recorddata: recorddata\n            });\n          });\n        }\n      } else {\n        alert(\"please enter validate url\");\n      }\n    }\n\n    console.log(this.state);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.htmlid,\n      style: this.props.styleprops,\n      children: this.state.mainPanelHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddatanew.js"],"names":["React","Component","getRecorddata","createRecord","bulkcreateRecord","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","Htmlform","Tabpanel","GetLocalIcon","GetGoogleIcon","F","constructor","props","tabclkHanlder","tabLabel","tabName","tabType","console","log","inputrecorddatatabcontentArray","document","getElementsByClassName","i","length","dataset","tabname","style","display","subsectionclkHanlder","sectionName","subsectionName","isValid","htmlformsubsectioncontentArray","sectionname","errorelements","j","childrenI","getElementsByTagName","children","inputElementValidate","subsectionname","htmllement","required","value","trim","undefined","borderBottomColor","borderBottomWidth","newDiv","createElement","newContent","createTextNode","setAttribute","appendChild","insertAdjacentElement","borderRightColor","borderRightWidth","inputChangeHandler","inputName","inputValue","recorddata","state","setState","clickHandler","localdata","clickprops","inputKeyupHandler","mainPanelHtml","componentDidMount","orgname","userprofileid","userid","tablename","actionname","urlsearchparams","compprops","routerpropsparams","routerprops","match","params","getRecordNewMetadataAndDatafromServer","datasortparambeginswith","datasortparamequalsto","action","viewname","viewName","fieldsupdatedfromurl","objectmetadataParams","layoutmetadataParams","objectName","objectData","keyConditions","field","expression","filterConditions","pageSize","limit","exclusiveStartKey","objectmetadataresult","isSuccess","alert","message","dataprops","Items","objectMetadata","data","layoutmetadataresult","layoutMetadata","layoutMetadataHtml","htmlFormDataprops","tabArrayObject","tabs","tabarray","push","sortedTabs","tabHtml","tabObjectArray","tabdataprops","activeTabName","tabI","defaultactive","name","label","activetab","sectionarray","sections","sortedSections","sectionHtml","sectionI","subsectionarray","subsections","sortedsubSections","subsectionHtml","subsectionI","fieldsarray","fields","sortedFields","fieldsArrayHtml","fieldI","fieldobject","isglobalfield","type","optionsObj","typeparams","options","optionsArray","optionsArraySorted","fieldoption","fieldType","inputOrOutput","inputoroutput","width","height","placeholder","readonly","defaultvalue","get","clientstatename","clientstatetype","buttonsObj","globalfieldtypeparams","buttons","buttonsArray","buttonsArraySorted","button","sectionfooterbuttonpanel","buttonarrayprops","hideheader","backgroundColor","opacity","flexWrap","render","htmlid","styleprops"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport {\n  sortArray,\n  fieldTypeHtmltoDBmapping,\n  getLocalData,\n  serverButtonHandler,\n} from \"../js/index\";\nimport Htmlform from \"./htmlformnew\";\nimport Tabpanel from \"./tabpanel\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n\n/*\n let urlsearchparams = new URLSearchParams(\n      this.props.routerprops.location.search\n    );\n\n/////\n   <Recorddatanew\n          {...this.props}\n          compprops={{\n            orgname: \"gouthama\",\n            userprofileid: \"gouthama-admin\",\n            userid: \"\",\n            parenttablename: \"\",\n            tablename: \"student2\",\n            parentrecid: \"\",\n            recordid: \"AC-fdf-fdfdfdd\",\n            action: \"new\",\n            urlsearchparams: urlsearchparams,\n          }}\n          styleprops={{\n            width: \"100%\",\n            height: \"\",\n            backgroundColor: \"\",\n            overflow: \"auto\",\n          }}\n        />\n\n*/\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { mainPanelHtml: [], recorddata: {} };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      actionname,\n      urlsearchparams,\n    } = this.props.compprops;\n    let routerpropsparams = this.props.routerprops.match.params;\n\n    this.getRecordNewMetadataAndDatafromServer({\n      orgname: orgname,\n      userprofileid: userprofileid,\n      userid: userid,\n      tablename: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: actionname,\n      viewname: \"\",\n      urlsearchparams: urlsearchparams,\n    });\n  }\n\n  tabclkHanlder = (props) => {\n    let { tabLabel, tabName, tabType } = props;\n    console.log(props);\n    let inputrecorddatatabcontentArray = document.getElementsByClassName(\n      \"inputrecorddatatabcontent\"\n    );\n\n    for (let i = 0; i < inputrecorddatatabcontentArray.length; i++) {\n      console.log(inputrecorddatatabcontentArray[i]);\n      if (tabName == inputrecorddatatabcontentArray[i].dataset.tabname) {\n        inputrecorddatatabcontentArray[i].style.display = \"flex\";\n      } else {\n        inputrecorddatatabcontentArray[i].style.display = \"none\";\n      }\n    }\n  };\n  subsectionclkHanlder = (tabName, sectionName, subsectionName) => {\n    let isValid = true;\n\n    let htmlformsubsectioncontentArray = document.getElementsByClassName(\n      \"htmlformsubsectioncontent\"\n    );\n\n    for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n      console.log(htmlformsubsectioncontentArray[i]);\n      if (\n        tabName == htmlformsubsectioncontentArray[i].dataset.tabname &&\n        sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname\n      ) {\n        if (htmlformsubsectioncontentArray[i].style.display == \"flex\") {\n          //reset subsection errors\n          let errorelements = htmlformsubsectioncontentArray[\n            i\n          ].getElementsByClassName(\"htmlforminputitemerror\");\n          for (let j = 0; j < errorelements.length; j++) {\n            errorelements[j].style.display = \"none\";\n          }\n\n          //validate childs\n          for (let childrenI in htmlformsubsectioncontentArray[\n            i\n          ].getElementsByTagName(\"*\")) {\n            let children = htmlformsubsectioncontentArray[\n              i\n            ].getElementsByTagName(\"*\")[childrenI];\n            console.log(children);\n            if (this.inputElementValidate(children) == false) {\n              isValid = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (isValid == true) {\n      for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n        console.log(htmlformsubsectioncontentArray[i]);\n        if (\n          tabName == htmlformsubsectioncontentArray[i].dataset.tabname &&\n          sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname\n        ) {\n          if (\n            subsectionName ==\n            htmlformsubsectioncontentArray[i].dataset.subsectionname\n          ) {\n            htmlformsubsectioncontentArray[i].style.display = \"flex\";\n          } else {\n            htmlformsubsectioncontentArray[i].style.display = \"none\";\n          }\n        }\n      }\n    }\n  };\n\n  inputElementValidate = (htmllement) => {\n    let isValid = true;\n    if (htmllement && htmllement.required) {\n      if (htmllement.value.trim() == \"\" || htmllement.value == undefined) {\n        htmllement.style.borderBottomColor = \"red\";\n        htmllement.style.borderBottomWidth = \"2px\";\n        var newDiv = document.createElement(\"div\");\n        var newContent = document.createTextNode(\"This is required\");\n        newDiv.setAttribute(\"class\", \"htmlforminputitemerror\");\n        newDiv.appendChild(newContent);\n\n        htmllement.insertAdjacentElement(\"afterend\", newDiv);\n        isValid = false;\n      } else {\n        htmllement.style.borderBottomColor = htmllement.style.borderRightColor;\n        htmllement.style.borderBottomWidth = htmllement.style.borderRightWidth;\n      }\n    }\n    return isValid;\n  };\n\n  inputChangeHandler = (props) => {\n    let { inputName, inputValue } = props;\n    let recorddata = this.state.recorddata;\n    recorddata[inputName] = inputValue;\n    this.setState({ recorddata: recorddata });\n    console.log(this.state);\n  };\n\n  clickHandler = (props) => {\n    console.log(props);\n    let localdata = getLocalData(this.props);\n\n    serverButtonHandler({\n      localdata: localdata,\n      clickprops: props,\n      recorddata: this.state.recorddata,\n    });\n  };\n\n  inputKeyupHandler = () => {};\n\n  async getRecordNewMetadataAndDatafromServer(props) {\n    console.log(props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      urlsearchparams,\n    } = props;\n    let { recorddata } = this.state;\n\n    let fieldsupdatedfromurl = {};\n\n    let objectmetadataParams = {};\n    let layoutmetadataParams = {};\n\n    // get object metadata for field types to show on ui\n    objectmetadataParams = {\n      objectName: \"tableinfo\",\n      objectData: {},\n      keyConditions: [\n        { field: \"orgname\", value: orgname, expression: \"=\" },\n        {\n          field: \"id\",\n          value: tablename,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n\n    // get layout metadata for order of the fields\n    layoutmetadataParams = {\n      objectName: \"layoutperuserprofile\",\n      objectData: {},\n      keyConditions: [\n        { field: \"userprofileid\", value: userprofileid, expression: \"=\" },\n        {\n          field: \"tableid\",\n          value: tablename + \"-\" + action,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n\n    // get object metadata\n    console.log(objectmetadataParams);\n    let objectmetadataresult = await getRecorddata(objectmetadataParams);\n    if (objectmetadataresult.isSuccess === \"false\") {\n      alert(\"layoutmetadata\" + objectmetadataresult.message);\n    } else {\n      // console.log(objectmetadataresult.dataprops.Items);\n      if (objectmetadataresult.dataprops.Items[0]) {\n        let objectMetadata = objectmetadataresult.dataprops.Items[0].data;\n\n        // get layout metadata\n        let layoutmetadataresult = await getRecorddata(layoutmetadataParams);\n        if (layoutmetadataresult.isSuccess === \"false\") {\n          alert(\"layoutmetadata\" + layoutmetadataresult.message);\n        } else {\n          let layoutMetadata =\n            layoutmetadataresult.dataprops.Items[0].dataprops;\n          console.log(layoutMetadata);\n\n          let layoutMetadataHtml = [];\n\n          let htmlFormDataprops = [];\n\n          let tabArrayObject = layoutMetadata.tabs;\n\n          console.log(tabArrayObject);\n          let tabarray = [];\n          for (let i in tabArrayObject) {\n            tabarray.push(tabArrayObject[i]);\n          }\n          let sortedTabs = sortArray(tabarray, \"order\", \"integer\");\n          console.log(sortedTabs);\n          let tabHtml = [];\n          let tabObjectArray = [];\n          let tabdataprops = [];\n          let activeTabName;\n          for (let tabI in sortedTabs) {\n            if (sortedTabs[tabI].defaultactive == \"true\") {\n              activeTabName = sortedTabs[tabI].name;\n            }\n            tabObjectArray.push({\n              label: sortedTabs[tabI].label,\n              name: sortedTabs[tabI].name,\n            });\n          }\n\n          tabHtml.push(\n            <Tabpanel\n              bgcolor=\"\"\n              onTabOpen={this.tabclkHanlder}\n              compprops={{ activetab: activeTabName, tabs: tabObjectArray }}\n              styleprops={{}}\n            />\n          );\n\n          for (let tabI in sortedTabs) {\n            let sectionarray = [];\n            for (let i in sortedTabs[tabI].sections) {\n              sectionarray.push(sortedTabs[tabI].sections[i]);\n            }\n            let sortedSections = sortArray(sectionarray, \"order\", \"integer\");\n            console.log(sortedSections);\n            let sectionHtml = [];\n            for (let sectionI in sortedSections) {\n              let subsectionarray = [];\n              for (let i in sortedSections[sectionI].subsections) {\n                subsectionarray.push(sortedSections[sectionI].subsections[i]);\n              }\n\n              let sortedsubSections = sortArray(\n                subsectionarray,\n                \"order\",\n                \"integer\"\n              );\n              console.log(sortedsubSections);\n              let subsectionHtml = [];\n              for (let subsectionI in sortedsubSections) {\n                let fieldsarray = [];\n                for (let i in sortedsubSections[subsectionI].fields) {\n                  fieldsarray.push(sortedsubSections[subsectionI].fields[i]);\n                }\n\n                let sortedFields = sortArray(fieldsarray, \"order\", \"integer\");\n                console.log(sortedFields);\n\n                let fieldsArrayHtml = [];\n                htmlFormDataprops = [];\n                for (let fieldI in sortedFields) {\n                  let fieldobject = sortedFields[fieldI];\n\n                  ////////////////\n                  if (fieldobject.isglobalfield == \"true\") {\n                    if (fieldobject.type == \"select\") {\n                      let optionsObj = fieldobject.typeparams.options;\n                      let optionsArray = [];\n                      let optionsArraySorted = [];\n                      for (let fieldoption in optionsObj) {\n                        optionsArray.push(optionsObj[fieldoption]);\n                      }\n                      optionsArraySorted = sortArray(\n                        optionsArray,\n                        \"order\",\n                        \"integer\"\n                      );\n\n                      htmlFormDataprops.push({\n                        label: fieldobject.label,\n                        name: fieldobject.name,\n\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType: fieldobject.type,\n                          inputOrOutput: fieldobject.inputoroutput,\n                        }),\n\n                        options: optionsArraySorted,\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n\n                        placeholder: fieldobject.placeholder\n                          ? fieldobject.placeholder\n                          : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n                        defaultvalue: urlsearchparams.get(fieldobject.name)\n                          ? urlsearchparams.get(fieldobject.name)\n                          : fieldobject.defaultvalue,\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype,\n                      });\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(\n                          fieldobject.name\n                        );\n                      }\n                    } else if (fieldobject.type == \"buttonpanel\") {\n                      let buttonsObj =\n                        fieldobject.globalfieldtypeparams.buttons;\n                      let buttonsArray = [];\n                      let buttonsArraySorted = [];\n                      for (let button in buttonsObj) {\n                        buttonsArray.push(buttonsObj[button]);\n                      }\n                      buttonsArraySorted = sortArray(\n                        buttonsArray,\n                        \"order\",\n                        \"integer\"\n                      );\n\n                      let sectionfooterbuttonpanel = {\n                        label: \"footerbuttonpanel\",\n                        name: \"footerbuttonpanel\",\n                        value: \"footerbuttonpanel\",\n                        buttonarrayprops: buttonsArraySorted,\n                        type: \"buttonpanel\",\n                        width: \"100%\",\n                        placeholder: \"\",\n                        required: \"true\",\n                      };\n                      htmlFormDataprops.push(sectionfooterbuttonpanel);\n                    } else {\n                      htmlFormDataprops.push({\n                        label: fieldobject.label,\n                        name: fieldobject.name,\n\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType: fieldobject.type,\n                          inputOrOutput: fieldobject.inputoroutput,\n                        }),\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n\n                        placeholder: fieldobject.placeholder\n                          ? fieldobject.placeholder\n                          : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n                        defaultvalue: urlsearchparams.get(fieldobject.name)\n                          ? urlsearchparams.get(fieldobject.name)\n                          : fieldobject.defaultvalue,\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype,\n                      });\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(\n                          fieldobject.name\n                        );\n                      }\n                    }\n                  } else {\n                    console.log(fieldobject.name);\n                    if (\n                      objectMetadata.fields[fieldobject.name].type == \"select\"\n                    ) {\n                      let optionsObj =\n                        objectMetadata.fields[fieldobject.name].typeparams\n                          .options;\n                      let optionsArray = [];\n                      let optionsArraySorted = [];\n                      for (let fieldoption in optionsObj) {\n                        optionsArray.push(optionsObj[fieldoption]);\n                      }\n                      optionsArraySorted = sortArray(\n                        optionsArray,\n                        \"order\",\n                        \"integer\"\n                      );\n\n                      htmlFormDataprops.push({\n                        label: objectMetadata.fields[fieldobject.name].label,\n                        name: fieldobject.name,\n\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType:\n                            objectMetadata.fields[fieldobject.name].type,\n                          inputOrOutput: fieldobject.inputoroutput,\n                        }),\n                        options: optionsArraySorted,\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n                        placeholder: fieldobject.placeholder\n                          ? fieldobject.placeholder\n                          : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n                        // defaultvalue: fieldobject.defaultvalue,\n                        defaultvalue: urlsearchparams.get(fieldobject.name)\n                          ? urlsearchparams.get(fieldobject.name)\n                          : fieldobject.defaultvalue,\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype,\n                      });\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(\n                          fieldobject.name\n                        );\n                      }\n                    } else {\n                      // if field is not globalfield and not select\n\n                      htmlFormDataprops.push({\n                        label: objectMetadata.fields[fieldobject.name].label,\n                        name: fieldobject.name,\n\n                        type: fieldTypeHtmltoDBmapping({\n                          fieldType:\n                            objectMetadata.fields[fieldobject.name].type,\n                          inputOrOutput: fieldobject.inputoroutput,\n                        }),\n\n                        width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                        height: fieldobject.height ? fieldobject.height : \"50%\",\n\n                        placeholder: fieldobject.placeholder\n                          ? fieldobject.placeholder\n                          : \"\",\n                        required: fieldobject.required,\n                        readonly: fieldobject.readonly,\n\n                        defaultvalue: urlsearchparams.get(fieldobject.name)\n                          ? urlsearchparams.get(fieldobject.name)\n                          : fieldobject.defaultvalue,\n\n                        clientstatename: fieldobject.clientstatename,\n                        clientstatetype: fieldobject.clientstatetype,\n                      });\n\n                      if (urlsearchparams.get(fieldobject.name)) {\n                        recorddata[fieldobject.name] = urlsearchparams.get(\n                          fieldobject.name\n                        );\n                      }\n                    }\n                  }\n                  ///////////////\n                  console.log(htmlFormDataprops);\n                }\n\n                fieldsArrayHtml.push(\n                  <div className=\"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\">\n                    <Htmlform\n                      inputChanged={this.inputChangeHandler}\n                      clkHandler={this.clickHandler}\n                      inputKeyUp={this.inputKeyupHandler}\n                      dataprops={htmlFormDataprops}\n                      bgcolor=\"\"\n                    />\n                  </div>\n                );\n\n                if (sortedsubSections[subsectionI].defaultactive == \"true\") {\n                  subsectionHtml.push(\n                    <div style={{ width: \"100%\" }}>\n                      {sortedsubSections[subsectionI].hideheader == \"true\" ? (\n                        \"\"\n                      ) : (\n                        <div\n                          className=\"org-fr org-fai-c htmlformsubsectiondropdown\"\n                          style={{ backgroundColor: \"#717171\", opacity: \"0.5\" }}\n                          onClick={() =>\n                            this.subsectionclkHanlder(\n                              sortedTabs[tabI].name,\n                              sortedSections[sectionI].name,\n                              sortedsubSections[subsectionI].name\n                            )\n                          }\n                        >\n                          <GetGoogleIcon name=\"expand_less\" />\n                          {sortedsubSections[subsectionI].label}\n                        </div>\n                      )}\n                      <div\n                        className=\"htmlformsubsectioncontent org-fr org-fjc-s\"\n                        data-tabname={sortedTabs[tabI].name}\n                        data-sectionname={sortedSections[sectionI].name}\n                        data-subsectionname={\n                          sortedsubSections[subsectionI].name\n                        }\n                        style={{ display: \"flex\" }}\n                      >\n                        {fieldsArrayHtml}\n                      </div>\n                    </div>\n                  );\n                } else {\n                  subsectionHtml.push(\n                    <div style={{ width: \"100%\" }}>\n                      {sortedsubSections[subsectionI].hideheader == \"true\" ? (\n                        \"\"\n                      ) : (\n                        <div\n                          className=\"org-fr org-fai-c htmlformsubsectiondropdown\"\n                          style={{ backgroundColor: \"#717171\", opacity: \"0.5\" }}\n                          onClick={() =>\n                            this.subsectionclkHanlder(\n                              sortedTabs[tabI].name,\n                              sortedSections[sectionI].name,\n                              sortedsubSections[subsectionI].name\n                            )\n                          }\n                        >\n                          <GetGoogleIcon name=\"expand_more\" />\n                          {sortedsubSections[subsectionI].label}\n                        </div>\n                      )}\n                      <div\n                        className=\"htmlformsubsectioncontent org-fr org-fjc-s\"\n                        data-tabname={sortedTabs[tabI].name}\n                        data-sectionname={sortedSections[sectionI].name}\n                        data-subsectionname={\n                          sortedsubSections[subsectionI].name\n                        }\n                        style={{ display: \"none\" }}\n                      >\n                        {fieldsArrayHtml}\n                      </div>\n                    </div>\n                  );\n                }\n              }\n              sectionHtml.push(subsectionHtml);\n            }\n\n            if (sortedTabs[tabI].defaultactive == \"true\") {\n              tabHtml.push(\n                <div\n                  style={{ display: \"flex\", flexWrap: \"wrap\", width: \"100%\" }}\n                  data-tabname={sortedTabs[tabI].name}\n                  className=\"inputrecorddatatabcontent\"\n                >\n                  {sectionHtml}\n                </div>\n              );\n            } else {\n              tabHtml.push(\n                <div\n                  style={{ display: \"none\", flexWrap: \"wrap\", width: \"100%\" }}\n                  data-tabname={sortedTabs[tabI].name}\n                  className=\"inputrecorddatatabcontent\"\n                >\n                  {sectionHtml}\n                </div>\n              );\n            }\n\n            //  tabHtml.push(sectionHtml);\n          }\n\n          layoutMetadataHtml.push(\n            <div>\n              <div className=\"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\">\n                {tabHtml}\n              </div>\n            </div>\n          );\n\n          console.log(htmlFormDataprops);\n\n          let mainPanelHtml = [];\n          mainPanelHtml.push(\n            <div\n              style={{\n                backgroundColor: \"#F2F2F2\",\n              }}\n            >\n              {layoutMetadataHtml}\n            </div>\n          );\n\n          this.setState({ mainPanelHtml: [] }, () => {\n            this.setState({\n              mainPanelHtml: mainPanelHtml,\n              recorddata: recorddata,\n            });\n          });\n        }\n      } else {\n        alert(\"please enter validate url\");\n      }\n    }\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div id={this.props.htmlid} style={this.props.styleprops}>\n        {this.state.mainPanelHtml}\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}