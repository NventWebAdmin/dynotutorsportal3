{"ast":null,"code":"import _classCallCheck from\"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";/*\n  documentatnion:\n\n .js code:\n\n  let modalheadertext = \"header\";\n    let modalbodytext = [];\n\n    modalbodytext.push(\n      <>\n        <p>\n          In this example, we use CSS to create a modal (dialog box) that is\n          hidden by default.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n      </>\n    );\n\n    let modalfooter = {};\n    let buttons = [\n      { label: \"Cancel\", name: \"cancel\", onClick: this.modalfooterbtnClk },\n      { label: \"Next\", name: \"next\", onClick: this.modalfooterbtnClk },\n      { label: \"Save\", name: \"save\", onClick: this.modalfooterbtnClk },\n    ];\n    modalfooter.buttons = buttons;\n\n\n    .html code:\n       <Svgcomp\n          modalbody={{ text: modalbodytext }}\n          modalheader={{ text: modalheadertext }}\n          modalfooter={modalfooter}\n          isModalOpen={this.state.isModalOpen}\n        />\n \n  */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var F=/*#__PURE__*/function(_Component){_inherits(F,_Component);var _super=_createSuper(F);function F(props){var _this;_classCallCheck(this,F);_this=_super.call(this,props);_this.closeModal=function(){document.getElementById(\"modalcomp\").style.display=\"none\";};_this.clkOnNext=function(){document.getElementById(\"modalcomp\").style.display=\"none\";};_this.clkOnSave=function(){document.getElementById(\"modalcomp\").style.display=\"none\";};_this.state={};return _this;}_createClass(F,[{key:\"render\",value:function render(){var modalfooterbuttonshtml=[];for(var i=0;i<this.props.modalfooter.buttons.length;i++){modalfooterbuttonshtml.push(/*#__PURE__*/_jsx(\"button\",{\"data-name\":this.props.modalfooter.buttons[i].name,onClick:this.props.modalfooter.buttons[i].onClick,children:this.props.modalfooter.buttons[i].label}));}var modalclass;if(this.props.isModalOpen===\"true\"){modalclass=\"org-show\";}else{modalclass=\"org-hide\";}return/*#__PURE__*/_jsx(\"div\",{style:{position:\"fixed\",top:0,left:0,backgroundColor:\"rgba(0,0,0,0.7)\",width:\"100%\",height:\"100%\",zIndex:2},className:modalclass,id:\"modalcomp\",children:/*#__PURE__*/_jsxs(\"div\",{style:{width:this.props.width===\"\"?\"80%\":this.props.width,height:\"80%\",border:\"2px solid black\",margin:\"auto\",marginTop:\"3vh\",backgroundColor:\"white\",color:\"black\",overflow:\"auto\"},children:[/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:\"#EEEEEE\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"10%\"},children:/*#__PURE__*/_jsx(\"div\",{style:{verticalAlign:\"center\"},children:this.props.modalheader.text})}),/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:\"\",overflow:\"auto\",height:\"80%\",padding:\"0.5vh 2vw\"},children:/*#__PURE__*/_jsx(\"div\",{children:this.props.modalbody.text})}),/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:\"#EEEEEE\",display:\"flex\",justifyContent:\"flex-end\",alignItems:\"center\",height:\"10%\",padding:\"0vh 1vw\"},children:/*#__PURE__*/_jsx(\"div\",{children:modalfooterbuttonshtml})})]})});}}]);return F;}(Component);export default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/modal.js"],"names":["React","Component","F","props","closeModal","document","getElementById","style","display","clkOnNext","clkOnSave","state","modalfooterbuttonshtml","i","modalfooter","buttons","length","push","name","onClick","label","modalclass","isModalOpen","position","top","left","backgroundColor","width","height","zIndex","border","margin","marginTop","color","overflow","justifyContent","alignItems","verticalAlign","modalheader","text","padding","modalbody"],"mappings":"ouBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I,2FAEMC,CAAAA,C,sFACJ,WAAYC,KAAZ,CAAmB,mCACjB,uBAAMA,KAAN,EADiB,MAKnBC,UALmB,CAKN,UAAM,CACjBC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,CAA2CC,OAA3C,CAAqD,MAArD,CACD,CAPkB,OASnBC,SATmB,CASP,UAAM,CAChBJ,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,CAA2CC,OAA3C,CAAqD,MAArD,CACD,CAXkB,OAanBE,SAbmB,CAaP,UAAM,CAChBL,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,CAA2CC,OAA3C,CAAqD,MAArD,CACD,CAfkB,CAEjB,MAAKG,KAAL,CAAa,EAAb,CAFiB,aAGlB,C,oCAcD,iBAAS,CACP,GAAIC,CAAAA,sBAAsB,CAAG,EAA7B,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAKV,KAAL,CAAWW,WAAX,CAAuBC,OAAvB,CAA+BC,MAAnD,CAA2DH,CAAC,EAA5D,CAAgE,CAC9DD,sBAAsB,CAACK,IAAvB,cACE,eACE,YAAW,KAAKd,KAAL,CAAWW,WAAX,CAAuBC,OAAvB,CAA+BF,CAA/B,EAAkCK,IAD/C,CAEE,OAAO,CAAE,KAAKf,KAAL,CAAWW,WAAX,CAAuBC,OAAvB,CAA+BF,CAA/B,EAAkCM,OAF7C,UAIG,KAAKhB,KAAL,CAAWW,WAAX,CAAuBC,OAAvB,CAA+BF,CAA/B,EAAkCO,KAJrC,EADF,EAQD,CAED,GAAIC,CAAAA,UAAJ,CACA,GAAI,KAAKlB,KAAL,CAAWmB,WAAX,GAA2B,MAA/B,CAAuC,CACrCD,UAAU,CAAG,UAAb,CACD,CAFD,IAEO,CACLA,UAAU,CAAG,UAAb,CACD,CAED,mBACE,YACE,KAAK,CAAE,CACLE,QAAQ,CAAE,OADL,CAELC,GAAG,CAAE,CAFA,CAGLC,IAAI,CAAE,CAHD,CAILC,eAAe,CAAE,iBAJZ,CAKLC,KAAK,CAAE,MALF,CAMLC,MAAM,CAAE,MANH,CAOLC,MAAM,CAAE,CAPH,CADT,CAUE,SAAS,CAAER,UAVb,CAWE,EAAE,CAAC,WAXL,uBAaE,aACE,KAAK,CAAE,CACLM,KAAK,CAAE,KAAKxB,KAAL,CAAWwB,KAAX,GAAqB,EAArB,CAA0B,KAA1B,CAAkC,KAAKxB,KAAL,CAAWwB,KAD/C,CAELC,MAAM,CAAE,KAFH,CAILE,MAAM,CAAE,iBAJH,CAMLC,MAAM,CAAE,MANH,CAOLC,SAAS,CAAE,KAPN,CAQLN,eAAe,CAAE,OARZ,CASLO,KAAK,CAAE,OATF,CAULC,QAAQ,CAAE,MAVL,CADT,wBAeE,YACE,KAAK,CAAE,CACLR,eAAe,CAAE,SADZ,CAELlB,OAAO,CAAE,MAFJ,CAGL2B,cAAc,CAAE,QAHX,CAILC,UAAU,CAAE,QAJP,CAKLR,MAAM,CAAE,KALH,CADT,uBASE,YAAK,KAAK,CAAE,CAAES,aAAa,CAAE,QAAjB,CAAZ,UACG,KAAKlC,KAAL,CAAWmC,WAAX,CAAuBC,IAD1B,EATF,EAfF,cA8BE,YACE,KAAK,CAAE,CACLb,eAAe,CAAE,EADZ,CAELQ,QAAQ,CAAE,MAFL,CAGLN,MAAM,CAAE,KAHH,CAILY,OAAO,CAAE,WAJJ,CADT,uBAQE,qBAAM,KAAKrC,KAAL,CAAWsC,SAAX,CAAqBF,IAA3B,EARF,EA9BF,cA0CE,YACE,KAAK,CAAE,CACLb,eAAe,CAAE,SADZ,CAELlB,OAAO,CAAE,MAFJ,CAGL2B,cAAc,CAAE,UAHX,CAILC,UAAU,CAAE,QAJP,CAKLR,MAAM,CAAE,KALH,CAMLY,OAAO,CAAE,SANJ,CADT,uBAUE,qBAAM5B,sBAAN,EAVF,EA1CF,GAbF,EADF,CAuED,C,eA7GaX,S,EAgHhB,cAAeC,CAAAA,CAAf","sourcesContent":["import React, { Component } from \"react\";\n\n/*\n  documentatnion:\n\n .js code:\n\n  let modalheadertext = \"header\";\n    let modalbodytext = [];\n\n    modalbodytext.push(\n      <>\n        <p>\n          In this example, we use CSS to create a modal (dialog box) that is\n          hidden by default.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n      </>\n    );\n\n    let modalfooter = {};\n    let buttons = [\n      { label: \"Cancel\", name: \"cancel\", onClick: this.modalfooterbtnClk },\n      { label: \"Next\", name: \"next\", onClick: this.modalfooterbtnClk },\n      { label: \"Save\", name: \"save\", onClick: this.modalfooterbtnClk },\n    ];\n    modalfooter.buttons = buttons;\n\n\n    .html code:\n       <Svgcomp\n          modalbody={{ text: modalbodytext }}\n          modalheader={{ text: modalheadertext }}\n          modalfooter={modalfooter}\n          isModalOpen={this.state.isModalOpen}\n        />\n \n  */\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  closeModal = () => {\n    document.getElementById(\"modalcomp\").style.display = \"none\";\n  };\n\n  clkOnNext = () => {\n    document.getElementById(\"modalcomp\").style.display = \"none\";\n  };\n\n  clkOnSave = () => {\n    document.getElementById(\"modalcomp\").style.display = \"none\";\n  };\n\n  render() {\n    let modalfooterbuttonshtml = [];\n    for (let i = 0; i < this.props.modalfooter.buttons.length; i++) {\n      modalfooterbuttonshtml.push(\n        <button\n          data-name={this.props.modalfooter.buttons[i].name}\n          onClick={this.props.modalfooter.buttons[i].onClick}\n        >\n          {this.props.modalfooter.buttons[i].label}\n        </button>\n      );\n    }\n\n    let modalclass;\n    if (this.props.isModalOpen === \"true\") {\n      modalclass = \"org-show\";\n    } else {\n      modalclass = \"org-hide\";\n    }\n\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          backgroundColor: \"rgba(0,0,0,0.7)\",\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: 2,\n        }}\n        className={modalclass}\n        id=\"modalcomp\"\n      >\n        <div\n          style={{\n            width: this.props.width === \"\" ? \"80%\" : this.props.width,\n            height: \"80%\",\n\n            border: \"2px solid black\",\n\n            margin: \"auto\",\n            marginTop: \"3vh\",\n            backgroundColor: \"white\",\n            color: \"black\",\n            overflow: \"auto\",\n          }}\n        >\n          {/* header */}\n          <div\n            style={{\n              backgroundColor: \"#EEEEEE\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              height: \"10%\",\n            }}\n          >\n            <div style={{ verticalAlign: \"center\" }}>\n              {this.props.modalheader.text}\n            </div>\n          </div>\n\n          {/* body */}\n          <div\n            style={{\n              backgroundColor: \"\",\n              overflow: \"auto\",\n              height: \"80%\",\n              padding: \"0.5vh 2vw\",\n            }}\n          >\n            <div>{this.props.modalbody.text}</div>\n          </div>\n\n          {/* footer */}\n          <div\n            style={{\n              backgroundColor: \"#EEEEEE\",\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              alignItems: \"center\",\n              height: \"10%\",\n              padding: \"0vh 1vw\",\n            }}\n          >\n            <div>{modalfooterbuttonshtml}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}