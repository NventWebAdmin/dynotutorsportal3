{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/paintpad.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar prevX,\n    prevY,\n    currX,\n    currY = 0,\n    lineprevX,\n    lineprevY,\n    linecurrX,\n    linecurrY = 0,\n    color = \"black\",\n    thickness = 2,\n    flag = false,\n    paintArray = [];\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.resize = () => {\n      alert();\n    };\n\n    this.drawText = props => {\n      let {\n        canvashtmlid\n      } = this.props.compprops;\n      console.log(props);\n      let {\n        font,\n        text,\n        x,\n        y\n      } = props;\n      var c = document.getElementById(canvashtmlid);\n      var ctx = c.getContext(\"2d\");\n      ctx.font = font;\n      ctx.fillText(text, x, y);\n    };\n\n    this.drawRect = () => {\n      let {\n        canvashtmlid\n      } = this.props.compprops;\n      var c = document.getElementById(canvashtmlid);\n      var ctx = c.getContext(\"2d\");\n      ctx.font = \"20px Georgia\";\n      ctx.fillText(\"Hello World!\", 10, 50);\n    };\n\n    this.mouseDown = e => {};\n\n    this.mouseDrop = e => {\n      let {\n        canvashtmlid,\n        hiddendivhtmlid\n      } = this.props.compprops;\n      console.log(\"canvas mouseDrop\");\n      console.log(this.state);\n      var c = document.getElementById(canvashtmlid);\n      var BB = c.getBoundingClientRect();\n      let cLeft = BB.left;\n      let cTop = BB.top;\n      let {\n        dragType\n      } = this.state;\n\n      if (dragType === \"text\") {\n        document.getElementById(hiddendivhtmlid).innerHTML = \"\";\n        console.log(e.clientX);\n        console.log(e.clientY);\n        var node = document.createElement(\"input\", {});\n\n        node.onchange = e => {\n          this.inputTextChanged(e);\n        }; //  node.innerHTML = \"                                      \";\n        // node.contenteditable = \"true\";\n\n\n        let inputX = e.clientX - cLeft;\n        let inputY = e.clientY - cTop;\n        node.style = \" position: absolute; left:\" + inputX + \"px;top:\" + inputY + \"px;z-index:11;\";\n        console.log(node.style);\n        document.getElementById(hiddendivhtmlid).appendChild(node);\n      }\n    };\n\n    this.mouseMove = e => {\n      console.log(\"canvas mousemove\");\n    };\n\n    this.drawPaintArray = props => {\n      let {\n        data\n      } = props;\n      let {\n        canvashtmlid\n      } = this.props.compprops;\n      var canvas = document.getElementById(canvashtmlid);\n      var ctx = canvas.getContext(\"2d\");\n\n      for (let i = 0; i < data.length; i++) {\n        //  console.log(data[i]);\n        ctx.beginPath();\n        ctx.moveTo(data[i].prevX, data[i].prevY);\n        ctx.lineTo(data[i].currX, data[i].currY);\n        ctx.strokeStyle = data[i].color;\n        ctx.lineWidth = data[i].thickness;\n        ctx.stroke();\n        ctx.closePath();\n      }\n    };\n\n    this.mouseMoveCanvas2 = e => {\n      let {\n        clkType\n      } = this.state;\n      let {\n        canvashtmlid\n      } = this.props.compprops; // console.log(\"canvas2 mousemove\" + e.clientX);\n      // console.log(\"canvas2 mousemove\" + cLeft);\n\n      var canvas = document.getElementById(canvashtmlid);\n      var ctx = canvas.getContext(\"2d\");\n      var BB = canvas.getBoundingClientRect();\n      let cLeft = BB.left;\n      let cTop = BB.top;\n\n      if (e.type === \"mouseout\") {\n        this.attachtoParent();\n      }\n\n      if (clkType === \"paint\") {\n        // console.log(\"aaaaa\" + prevX + \"====\" + prevY);\n        // console.log(\"aaaaa\" + currX + \"====\" + currY);\n        prevX = currX;\n        prevY = currY;\n        currX = e.clientX - cLeft;\n        currY = e.clientY - cTop;\n\n        if (e.type === \"mousedown\") {\n          flag = true;\n        }\n\n        if (e.type === \"mouseup\" || e.type === \"mouseout\") {\n          flag = false;\n\n          if (e.type === \"mouseup\") {\n            this.autoSavePaintDatatoState();\n          }\n        }\n\n        if (e.type === \"mousemove\") {\n          if (flag) {\n            paintArray.push({\n              prevX: prevX,\n              prevY: prevY,\n              currX: currX,\n              currY: currY,\n              strokeStyle: color,\n              lineWidth: thickness\n            });\n            console.log(paintArray);\n            ctx.beginPath();\n            ctx.moveTo(prevX, prevY);\n            ctx.lineTo(currX, currY);\n            ctx.strokeStyle = color;\n            ctx.lineWidth = thickness;\n            ctx.stroke();\n            ctx.closePath();\n          }\n        }\n      }\n\n      if (clkType === \"line\") {\n        if (e.type === \"mousedown\") {\n          flag = true;\n          currX = e.clientX - cLeft;\n          currY = e.clientY - cTop;\n          linecurrX = e.clientX - cLeft;\n          linecurrY = e.clientY - cTop;\n        }\n\n        if (e.type === \"mousemove\" && flag === true) {\n          prevX = currX;\n          prevY = currY;\n          currX = e.clientX - cLeft;\n          currY = e.clientY - cTop;\n          ctx.beginPath();\n          ctx.moveTo(prevX, prevY);\n          ctx.lineTo(currX, currY);\n          ctx.strokeStyle = color;\n          ctx.lineWidth = thickness;\n          ctx.stroke();\n          ctx.closePath();\n        }\n\n        if (e.type === \"mouseup\") {\n          flag = false;\n          lineprevX = linecurrX;\n          lineprevY = linecurrY;\n          linecurrX = e.clientX - cLeft;\n          linecurrY = e.clientY - cTop;\n          paintArray.push({\n            prevX: lineprevX,\n            prevY: lineprevY,\n            currX: linecurrX,\n            currY: linecurrY,\n            strokeStyle: color,\n            lineWidth: thickness\n          });\n          this.autoSavePaintDatatoState();\n        }\n      }\n    };\n\n    this.reDraw = () => {\n      let {\n        drawHistory\n      } = this.state;\n      let {\n        canvashtmlid //   hiddentexthtmlid,\n        //  defaultdrawHistory,\n\n      } = this.props.compprops;\n      console.log(this.state);\n      var c = document.getElementById(canvashtmlid);\n      var ctx = c.getContext(\"2d\");\n      ctx.clearRect(0, 0, c.width, c.height); // if (defaultdrawHistory) {\n      //   for (let i = 0; i < defaultdrawHistory.length; i++) {\n      //     let drawHElement = defaultdrawHistory[i];\n      //     if (drawHElement.type === \"drawText\") {\n      //       this.drawText({\n      //         font: drawHElement.font,\n      //         text: drawHElement.text,\n      //         x: drawHElement.x,\n      //         y: drawHElement.y,\n      //       });\n      //     }\n      //     if (drawHElement.type === \"paintarray\") {\n      //       this.drawPaintArray({\n      //         data: drawHElement.data,\n      //       });\n      //     }\n      //   }\n      // }\n\n      for (let i = 0; i < drawHistory.length; i++) {\n        let drawHElement = drawHistory[i];\n\n        if (drawHElement.type === \"drawText\") {\n          this.drawText({\n            font: drawHElement.font,\n            text: drawHElement.text,\n            x: drawHElement.x,\n            y: drawHElement.y\n          });\n        }\n\n        if (drawHElement.type === \"paintarray\") {\n          this.drawPaintArray({\n            data: drawHElement.data\n          });\n        }\n      }\n    };\n\n    this.undoLast = () => {\n      let {\n        drawHistory\n      } = this.state;\n      drawHistory.pop();\n      this.setState({\n        drawHistory: drawHistory\n      }, () => {\n        this.reDraw();\n      });\n    };\n\n    this.textDrag = props => {\n      let {\n        dragType\n      } = props;\n      this.setState({\n        dragType: dragType\n      });\n    };\n\n    this.allowDrop = e => {\n      e.preventDefault();\n    };\n\n    this.inputTextChanged = e => {\n      let {\n        canvashtmlid,\n        hiddendivhtmlid\n      } = this.props.compprops;\n      let {\n        drawHistory\n      } = this.state;\n      var rect = e.target.getBoundingClientRect();\n      let d = new Date();\n      let time = d.getTime();\n      var c = document.getElementById(canvashtmlid);\n      var BB = c.getBoundingClientRect();\n      let cLeft = BB.left;\n      let cTop = BB.top;\n      drawHistory.push({\n        type: \"drawText\",\n        font: \"20px Georgia\",\n        text: e.target.value,\n        x: rect.left - cLeft,\n        y: rect.top - cTop,\n        time: time\n      });\n      this.setState({\n        drawHistory: drawHistory\n      }, () => {\n        this.reDraw();\n      });\n      var list = document.getElementById(hiddendivhtmlid);\n      list.removeChild(list.childNodes[0]);\n    };\n\n    this.autoSavePaintDatatoState = () => {\n      let {\n        drawHistory\n      } = this.state;\n      console.log(paintArray);\n\n      if (paintArray.length > 0) {\n        drawHistory.push({\n          type: \"paintarray\",\n          data: paintArray\n        });\n      }\n\n      paintArray = [];\n      console.log(drawHistory);\n      this.setState({\n        drawHistory: drawHistory\n      }, () => {\n        this.reDraw();\n      });\n    };\n\n    this.attachtoParent = () => {\n      let {\n        drawHistory\n      } = this.state;\n      let {\n        // canvashtmlid,\n        canvashtmlparentdivid,\n        // hiddentexthtmlid,\n        order\n      } = this.props.compprops; // drawHistorytoAttach = drawHistory;\n\n      console.log(drawHistory);\n      this.props.onattach({\n        canvashtmlparentdivid: canvashtmlparentdivid,\n        drawHistory: drawHistory,\n        order: order\n      });\n    };\n\n    let _drawHistory = []; // drawHistory.push({\n    //   prevX: 300,\n    //   prevY: 300,\n    //   currntX: 400,\n    //   currntY: 400,\n    //   strokeStyle: \"blue\",\n    //   lineWidth: 2,\n    // });\n\n    this.state = {\n      //  cWidth: \"\",\n      //  cHeight: \"\",\n      clkType: \"\",\n      dragType: \"\",\n      drawHistory: _drawHistory,\n      drawHistorytoAttach: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    let {\n      //canvashtmlid,\n      hiddentexthtmlid,\n      defaultdrawHistory\n    } = this.props.compprops;\n    console.log(\"1\" + hiddentexthtmlid);\n    console.log(prevProps.compprops.defaultdrawHistory);\n    console.log(defaultdrawHistory);\n    this.reDraw(); // if (prevProps && JSON.stringify(this.props) != JSON.stringify(prevProps)) {\n    //   console.log(\"1\" + hiddentexthtmlid);\n    //   if (\n    //     prevProps.compprops.defaultdrawHistory &&\n    //     JSON.stringify(prevProps.compprops.defaultdrawHistory) !=\n    //       JSON.stringify(defaultdrawHistory)\n    //   ) {\n    //     console.log(\"2\");\n    //     this.reDraw();\n    //   }\n    // }\n  }\n\n  componentDidMount() {\n    console.log(this.props.compprops);\n    let {\n      canvashtmlid,\n      // hiddentexthtmlid,\n      defaultdrawHistory // editable,\n\n    } = this.props.compprops;\n    let {\n      drawHistory\n    } = this.state;\n\n    if (defaultdrawHistory) {\n      for (let i = 0; i < defaultdrawHistory.length; i++) {\n        drawHistory.push(defaultdrawHistory[i]);\n      }\n    } // let drawHistorytoupdate = [];\n    // if (defaultdrawHistory && defaultdrawHistory.length > 0) {\n    //   drawHistorytoupdate = defaultdrawHistory;\n    // }\n\n\n    var c = document.getElementById(\"myCanvas\");\n    console.log(c.width);\n    console.log(c.parentElement.clientWidth);\n    c.width = c.parentElement.clientWidth - 20;\n    c.height = c.parentElement.clientHeight - 20;\n\n    if (canvashtmlid !== \"\") {\n      c.id = canvashtmlid;\n    } // var BB = c.getBoundingClientRect();\n\n\n    this.setState({\n      //  cWidth: c.width,\n      //   cHeight: c.height,\n      drawHistory: drawHistory\n    }, () => {\n      this.attachtoParent();\n    }); //   var canvashtmlparentdivid = document.getElementById(\"canvaspar\");\n    //  canvashtmlparentdivid.addEventListener(\"resize\", this.resize());\n  }\n\n  render() {\n    let {\n      action,\n      hiddendivhtmlid\n    } = this.props.compprops;\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"yellow\",\n        position: \"relative\"\n      },\n      contentEditable: \"false\" //id=\"canvaspar\"\n      ,\n      children: [action === \"create\" || action === \"edit\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: hiddendivhtmlid,\n        style: {\n          left: 0,\n          top: 0,\n          zIndex: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this) : \"\", action === \"create\" || action === \"edit\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          left: 0,\n          top: 0,\n          zIndex: 11\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"org-fr org-fjc-sb\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"org-bb esm mf\",\n              onDrag: () => this.textDrag({\n                dragType: \"text\",\n                clkType: \"\"\n              }),\n              draggable: \"true\",\n              children: \"T\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"org-bb esm mf\",\n              onClick: () => this.setState({\n                clkType: \"paint\"\n              }),\n              draggable: \"true\",\n              children: \"P\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"org-bb esm mf\",\n              onClick: () => this.setState({\n                clkType: \"line\"\n              }),\n              draggable: \"true\",\n              children: \"L\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"org-bb esm mf\",\n              onClick: this.undoLast,\n              children: \"Undo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myCanvas\",\n        width: \"1000px\",\n        height: \"500px\",\n        style: {\n          backgroundColor: \"lightblue\",\n          left: 0,\n          top: 0,\n          zIndex: 9,\n          width: \"100%\",\n          overflow: \"auto\" //  height: \"500px\",\n\n        } // onMouseDown={this.mouseDown}\n        ,\n        onDrop: this.mouseDrop,\n        onMouseMove: this.mouseMoveCanvas2,\n        onMouseDown: this.mouseMoveCanvas2,\n        onMouseUp: this.mouseMoveCanvas2,\n        onMouseOut: this.mouseMoveCanvas2,\n        onDragOver: e => this.allowDrop(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/paintpad.js"],"names":["React","Component","prevX","prevY","currX","currY","lineprevX","lineprevY","linecurrX","linecurrY","color","thickness","flag","paintArray","F","constructor","props","resize","alert","drawText","canvashtmlid","compprops","console","log","font","text","x","y","c","document","getElementById","ctx","getContext","fillText","drawRect","mouseDown","e","mouseDrop","hiddendivhtmlid","state","BB","getBoundingClientRect","cLeft","left","cTop","top","dragType","innerHTML","clientX","clientY","node","createElement","onchange","inputTextChanged","inputX","inputY","style","appendChild","mouseMove","drawPaintArray","data","canvas","i","length","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","mouseMoveCanvas2","clkType","type","attachtoParent","autoSavePaintDatatoState","push","reDraw","drawHistory","clearRect","width","height","drawHElement","undoLast","pop","setState","textDrag","allowDrop","preventDefault","rect","target","d","Date","time","getTime","value","list","removeChild","childNodes","canvashtmlparentdivid","order","onattach","drawHistorytoAttach","componentDidUpdate","prevProps","hiddentexthtmlid","defaultdrawHistory","componentDidMount","parentElement","clientWidth","clientHeight","id","render","action","backgroundColor","position","zIndex","overflow"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nvar prevX,\n  prevY,\n  currX,\n  currY = 0,\n  lineprevX,\n  lineprevY,\n  linecurrX,\n  linecurrY = 0,\n  color = \"black\",\n  thickness = 2,\n  flag = false,\n  paintArray = [];\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    let drawHistory = [];\n    // drawHistory.push({\n    //   prevX: 300,\n    //   prevY: 300,\n    //   currntX: 400,\n    //   currntY: 400,\n    //   strokeStyle: \"blue\",\n    //   lineWidth: 2,\n    // });\n\n    this.state = {\n      //  cWidth: \"\",\n      //  cHeight: \"\",\n      clkType: \"\",\n      dragType: \"\",\n      drawHistory: drawHistory,\n      drawHistorytoAttach: [],\n    };\n  }\n  componentDidUpdate(prevProps) {\n    let {\n      //canvashtmlid,\n      hiddentexthtmlid,\n      defaultdrawHistory,\n    } = this.props.compprops;\n    console.log(\"1\" + hiddentexthtmlid);\n    console.log(prevProps.compprops.defaultdrawHistory);\n    console.log(defaultdrawHistory);\n    this.reDraw();\n    // if (prevProps && JSON.stringify(this.props) != JSON.stringify(prevProps)) {\n    //   console.log(\"1\" + hiddentexthtmlid);\n    //   if (\n    //     prevProps.compprops.defaultdrawHistory &&\n    //     JSON.stringify(prevProps.compprops.defaultdrawHistory) !=\n    //       JSON.stringify(defaultdrawHistory)\n    //   ) {\n    //     console.log(\"2\");\n    //     this.reDraw();\n    //   }\n    // }\n  }\n\n  componentDidMount() {\n    console.log(this.props.compprops);\n    let {\n      canvashtmlid,\n      // hiddentexthtmlid,\n      defaultdrawHistory,\n      // editable,\n    } = this.props.compprops;\n    let { drawHistory } = this.state;\n    if (defaultdrawHistory) {\n      for (let i = 0; i < defaultdrawHistory.length; i++) {\n        drawHistory.push(defaultdrawHistory[i]);\n      }\n    }\n    // let drawHistorytoupdate = [];\n    // if (defaultdrawHistory && defaultdrawHistory.length > 0) {\n    //   drawHistorytoupdate = defaultdrawHistory;\n    // }\n    var c = document.getElementById(\"myCanvas\");\n    console.log(c.width);\n    console.log(c.parentElement.clientWidth);\n    c.width = c.parentElement.clientWidth - 20;\n    c.height = c.parentElement.clientHeight - 20;\n    if (canvashtmlid !== \"\") {\n      c.id = canvashtmlid;\n    }\n    // var BB = c.getBoundingClientRect();\n\n    this.setState(\n      {\n        //  cWidth: c.width,\n        //   cHeight: c.height,\n        drawHistory: drawHistory,\n      },\n      () => {\n        this.attachtoParent();\n      }\n    );\n    //   var canvashtmlparentdivid = document.getElementById(\"canvaspar\");\n    //  canvashtmlparentdivid.addEventListener(\"resize\", this.resize());\n  }\n\n  resize = () => {\n    alert();\n  };\n\n  drawText = (props) => {\n    let { canvashtmlid } = this.props.compprops;\n    console.log(props);\n    let { font, text, x, y } = props;\n    var c = document.getElementById(canvashtmlid);\n    var ctx = c.getContext(\"2d\");\n    ctx.font = font;\n    ctx.fillText(text, x, y);\n  };\n\n  drawRect = () => {\n    let { canvashtmlid } = this.props.compprops;\n\n    var c = document.getElementById(canvashtmlid);\n    var ctx = c.getContext(\"2d\");\n    ctx.font = \"20px Georgia\";\n    ctx.fillText(\"Hello World!\", 10, 50);\n  };\n\n  mouseDown = (e) => {};\n  mouseDrop = (e) => {\n    let { canvashtmlid, hiddendivhtmlid } = this.props.compprops;\n    console.log(\"canvas mouseDrop\");\n    console.log(this.state);\n    var c = document.getElementById(canvashtmlid);\n\n    var BB = c.getBoundingClientRect();\n    let cLeft = BB.left;\n    let cTop = BB.top;\n    let { dragType } = this.state;\n    if (dragType === \"text\") {\n      document.getElementById(hiddendivhtmlid).innerHTML = \"\";\n      console.log(e.clientX);\n      console.log(e.clientY);\n\n      var node = document.createElement(\"input\", {});\n      node.onchange = (e) => {\n        this.inputTextChanged(e);\n      };\n      //  node.innerHTML = \"                                      \";\n      // node.contenteditable = \"true\";\n      let inputX = e.clientX - cLeft;\n      let inputY = e.clientY - cTop;\n      node.style =\n        \" position: absolute; left:\" +\n        inputX +\n        \"px;top:\" +\n        inputY +\n        \"px;z-index:11;\";\n      console.log(node.style);\n      document.getElementById(hiddendivhtmlid).appendChild(node);\n    }\n  };\n  mouseMove = (e) => {\n    console.log(\"canvas mousemove\");\n  };\n\n  drawPaintArray = (props) => {\n    let { data } = props;\n    let { canvashtmlid } = this.props.compprops;\n\n    var canvas = document.getElementById(canvashtmlid);\n    var ctx = canvas.getContext(\"2d\");\n    for (let i = 0; i < data.length; i++) {\n      //  console.log(data[i]);\n      ctx.beginPath();\n      ctx.moveTo(data[i].prevX, data[i].prevY);\n      ctx.lineTo(data[i].currX, data[i].currY);\n      ctx.strokeStyle = data[i].color;\n      ctx.lineWidth = data[i].thickness;\n      ctx.stroke();\n      ctx.closePath();\n    }\n  };\n  mouseMoveCanvas2 = (e) => {\n    let { clkType } = this.state;\n    let { canvashtmlid } = this.props.compprops;\n    // console.log(\"canvas2 mousemove\" + e.clientX);\n    // console.log(\"canvas2 mousemove\" + cLeft);\n    var canvas = document.getElementById(canvashtmlid);\n    var ctx = canvas.getContext(\"2d\");\n\n    var BB = canvas.getBoundingClientRect();\n    let cLeft = BB.left;\n    let cTop = BB.top;\n\n    if (e.type === \"mouseout\") {\n      this.attachtoParent();\n    }\n\n    if (clkType === \"paint\") {\n      // console.log(\"aaaaa\" + prevX + \"====\" + prevY);\n      // console.log(\"aaaaa\" + currX + \"====\" + currY);\n      prevX = currX;\n      prevY = currY;\n      currX = e.clientX - cLeft;\n      currY = e.clientY - cTop;\n      if (e.type === \"mousedown\") {\n        flag = true;\n      }\n      if (e.type === \"mouseup\" || e.type === \"mouseout\") {\n        flag = false;\n        if (e.type === \"mouseup\") {\n          this.autoSavePaintDatatoState();\n        }\n      }\n      if (e.type === \"mousemove\") {\n        if (flag) {\n          paintArray.push({\n            prevX: prevX,\n            prevY: prevY,\n            currX: currX,\n            currY: currY,\n            strokeStyle: color,\n            lineWidth: thickness,\n          });\n\n          console.log(paintArray);\n          ctx.beginPath();\n          ctx.moveTo(prevX, prevY);\n          ctx.lineTo(currX, currY);\n          ctx.strokeStyle = color;\n          ctx.lineWidth = thickness;\n          ctx.stroke();\n          ctx.closePath();\n        }\n      }\n    }\n\n    if (clkType === \"line\") {\n      if (e.type === \"mousedown\") {\n        flag = true;\n        currX = e.clientX - cLeft;\n        currY = e.clientY - cTop;\n        linecurrX = e.clientX - cLeft;\n        linecurrY = e.clientY - cTop;\n      }\n      if (e.type === \"mousemove\" && flag === true) {\n        prevX = currX;\n        prevY = currY;\n        currX = e.clientX - cLeft;\n        currY = e.clientY - cTop;\n        ctx.beginPath();\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(currX, currY);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.stroke();\n        ctx.closePath();\n      }\n      if (e.type === \"mouseup\") {\n        flag = false;\n        lineprevX = linecurrX;\n        lineprevY = linecurrY;\n        linecurrX = e.clientX - cLeft;\n        linecurrY = e.clientY - cTop;\n\n        paintArray.push({\n          prevX: lineprevX,\n          prevY: lineprevY,\n          currX: linecurrX,\n          currY: linecurrY,\n          strokeStyle: color,\n          lineWidth: thickness,\n        });\n\n        this.autoSavePaintDatatoState();\n      }\n    }\n  };\n\n  reDraw = () => {\n    let { drawHistory } = this.state;\n    let {\n      canvashtmlid,\n      //   hiddentexthtmlid,\n      //  defaultdrawHistory,\n    } = this.props.compprops;\n    console.log(this.state);\n    var c = document.getElementById(canvashtmlid);\n\n    var ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n\n    // if (defaultdrawHistory) {\n    //   for (let i = 0; i < defaultdrawHistory.length; i++) {\n    //     let drawHElement = defaultdrawHistory[i];\n    //     if (drawHElement.type === \"drawText\") {\n    //       this.drawText({\n    //         font: drawHElement.font,\n    //         text: drawHElement.text,\n    //         x: drawHElement.x,\n    //         y: drawHElement.y,\n    //       });\n    //     }\n    //     if (drawHElement.type === \"paintarray\") {\n    //       this.drawPaintArray({\n    //         data: drawHElement.data,\n    //       });\n    //     }\n    //   }\n    // }\n\n    for (let i = 0; i < drawHistory.length; i++) {\n      let drawHElement = drawHistory[i];\n      if (drawHElement.type === \"drawText\") {\n        this.drawText({\n          font: drawHElement.font,\n          text: drawHElement.text,\n          x: drawHElement.x,\n          y: drawHElement.y,\n        });\n      }\n      if (drawHElement.type === \"paintarray\") {\n        this.drawPaintArray({\n          data: drawHElement.data,\n        });\n      }\n    }\n  };\n\n  undoLast = () => {\n    let { drawHistory } = this.state;\n    drawHistory.pop();\n    this.setState({ drawHistory: drawHistory }, () => {\n      this.reDraw();\n    });\n  };\n  textDrag = (props) => {\n    let { dragType } = props;\n    this.setState({ dragType: dragType });\n  };\n\n  allowDrop = (e) => {\n    e.preventDefault();\n  };\n\n  inputTextChanged = (e) => {\n    let { canvashtmlid, hiddendivhtmlid } = this.props.compprops;\n    let { drawHistory } = this.state;\n    var rect = e.target.getBoundingClientRect();\n    let d = new Date();\n\n    let time = d.getTime();\n    var c = document.getElementById(canvashtmlid);\n    var BB = c.getBoundingClientRect();\n    let cLeft = BB.left;\n    let cTop = BB.top;\n\n    drawHistory.push({\n      type: \"drawText\",\n      font: \"20px Georgia\",\n      text: e.target.value,\n      x: rect.left - cLeft,\n      y: rect.top - cTop,\n      time: time,\n    });\n    this.setState({ drawHistory: drawHistory }, () => {\n      this.reDraw();\n    });\n    var list = document.getElementById(hiddendivhtmlid);\n    list.removeChild(list.childNodes[0]);\n  };\n\n  autoSavePaintDatatoState = () => {\n    let { drawHistory } = this.state;\n    console.log(paintArray);\n    if (paintArray.length > 0) {\n      drawHistory.push({ type: \"paintarray\", data: paintArray });\n    }\n    paintArray = [];\n    console.log(drawHistory);\n    this.setState({ drawHistory: drawHistory }, () => {\n      this.reDraw();\n    });\n  };\n\n  attachtoParent = () => {\n    let { drawHistory } = this.state;\n    let {\n      // canvashtmlid,\n      canvashtmlparentdivid,\n      // hiddentexthtmlid,\n      order,\n    } = this.props.compprops;\n    // drawHistorytoAttach = drawHistory;\n    console.log(drawHistory);\n    this.props.onattach({\n      canvashtmlparentdivid: canvashtmlparentdivid,\n      drawHistory: drawHistory,\n      order: order,\n    });\n  };\n\n  render() {\n    let { action, hiddendivhtmlid } = this.props.compprops;\n\n    console.log(this.state);\n\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: \"yellow\",\n          position: \"relative\",\n        }}\n        contentEditable=\"false\"\n        //id=\"canvaspar\"\n      >\n        {action === \"create\" || action === \"edit\" ? (\n          <div\n            id={hiddendivhtmlid}\n            style={{ left: 0, top: 0, zIndex: 10 }}\n          ></div>\n        ) : (\n          \"\"\n        )}\n\n        {action === \"create\" || action === \"edit\" ? (\n          <span style={{ left: 0, top: 0, zIndex: 11 }}>\n            <div className=\"org-fr org-fjc-sb\">\n              <div>\n                <span\n                  className=\"org-bb esm mf\"\n                  onDrag={() =>\n                    this.textDrag({ dragType: \"text\", clkType: \"\" })\n                  }\n                  draggable=\"true\"\n                >\n                  T\n                </span>\n                <span\n                  className=\"org-bb esm mf\"\n                  onClick={() => this.setState({ clkType: \"paint\" })}\n                  draggable=\"true\"\n                >\n                  P\n                </span>\n                <span\n                  className=\"org-bb esm mf\"\n                  onClick={() => this.setState({ clkType: \"line\" })}\n                  draggable=\"true\"\n                >\n                  L\n                </span>\n\n                <span className=\"org-bb esm mf\" onClick={this.undoLast}>\n                  Undo\n                </span>\n              </div>\n              <div>\n                {/* <span className=\"org-bb esm mf\" onClick={this.attachtoParent}>\n                  Attach\n                </span>\n                <span className=\"org-bb esm mf\" onClick={this.props.onclose}>\n                  close\n                </span> */}\n              </div>\n            </div>\n          </span>\n        ) : (\n          \"\"\n        )}\n        <canvas\n          id=\"myCanvas\"\n          width=\"1000px\"\n          height=\"500px\"\n          style={{\n            backgroundColor: \"lightblue\",\n            left: 0,\n            top: 0,\n            zIndex: 9,\n            width: \"100%\",\n            overflow: \"auto\",\n            //  height: \"500px\",\n          }}\n          // onMouseDown={this.mouseDown}\n          onDrop={this.mouseDrop}\n          onMouseMove={this.mouseMoveCanvas2}\n          onMouseDown={this.mouseMoveCanvas2}\n          onMouseUp={this.mouseMoveCanvas2}\n          onMouseOut={this.mouseMoveCanvas2}\n          onDragOver={(e) => this.allowDrop(e)}\n        ></canvas>\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}