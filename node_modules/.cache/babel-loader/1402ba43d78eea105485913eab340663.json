{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/modal.js\";\nimport React, { Component } from \"react\";\n/*\n  documentatnion:\n\n .js code:\n\n  let modalheadertext = \"header\";\n    let modalbodytext = [];\n\n    modalbodytext.push(\n      <>\n        <p>\n          In this example, we use CSS to create a modal (dialog box) that is\n          hidden by default.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n      </>\n    );\n\n    let modalfooter = {};\n    let buttons = [\n      { label: \"Cancel\", name: \"cancel\", onClick: this.modalfooterbtnClk },\n      { label: \"Next\", name: \"next\", onClick: this.modalfooterbtnClk },\n      { label: \"Save\", name: \"save\", onClick: this.modalfooterbtnClk },\n    ];\n    modalfooter.buttons = buttons;\n\n\n    .html code:\n       <Svgcomp\n          modalbody={{ text: modalbodytext }}\n          modalheader={{ text: modalheadertext }}\n          modalfooter={modalfooter}\n          isModalOpen={this.state.isModalOpen}\n        />\n \n  */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      document.getElementById(\"modalcomp\").style.display = \"none\";\n    };\n\n    this.clkOnNext = () => {\n      document.getElementById(\"modalcomp\").style.display = \"none\";\n    };\n\n    this.clkOnSave = () => {\n      document.getElementById(\"modalcomp\").style.display = \"none\";\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    let modalfooterbuttonshtml = [];\n\n    for (let i = 0; i < this.props.modalfooter.buttons.length; i++) {\n      modalfooterbuttonshtml.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-name\": this.props.modalfooter.buttons[i].name,\n        onClick: this.props.modalfooter.buttons[i].onClick,\n        children: this.props.modalfooter.buttons[i].label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this));\n    }\n\n    let modalclass;\n\n    if (this.props.isModalOpen === \"true\") {\n      modalclass = \"org-show\";\n    } else {\n      modalclass = \"org-hide\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        backgroundColor: \"rgba(0,0,0,0.7)\",\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 2\n      },\n      className: modalclass,\n      id: \"modalcomp\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: this.props.width === \"\" ? \"80%\" : this.props.width,\n          height: \"80%\",\n          border: \"2px solid black\",\n          margin: \"auto\",\n          marginTop: \"3vh\",\n          backgroundColor: \"white\",\n          color: \"black\",\n          overflow: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"#EEEEEE\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"10%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              verticalAlign: \"center\"\n            },\n            children: this.props.modalheader.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"\",\n            overflow: \"auto\",\n            height: \"80%\",\n            padding: \"0.5vh 2vw\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.props.modalbody.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"#EEEEEE\",\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n            height: \"10%\",\n            padding: \"0vh 1vw\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: modalfooterbuttonshtml\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/modal.js"],"names":["React","Component","F","constructor","props","closeModal","document","getElementById","style","display","clkOnNext","clkOnSave","state","render","modalfooterbuttonshtml","i","modalfooter","buttons","length","push","name","onClick","label","modalclass","isModalOpen","position","top","left","backgroundColor","width","height","zIndex","border","margin","marginTop","color","overflow","justifyContent","alignItems","verticalAlign","modalheader","text","padding","modalbody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,CAAN,SAAgBD,SAAhB,CAA0B;AACxBE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAKnBC,UALmB,GAKN,MAAM;AACjBC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,CAA2CC,OAA3C,GAAqD,MAArD;AACD,KAPkB;;AAAA,SASnBC,SATmB,GASP,MAAM;AAChBJ,MAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,CAA2CC,OAA3C,GAAqD,MAArD;AACD,KAXkB;;AAAA,SAanBE,SAbmB,GAaP,MAAM;AAChBL,MAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,CAA2CC,OAA3C,GAAqD,MAArD;AACD,KAfkB;;AAEjB,SAAKG,KAAL,GAAa,EAAb;AACD;;AAcDC,EAAAA,MAAM,GAAG;AACP,QAAIC,sBAAsB,GAAG,EAA7B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,KAAL,CAAWY,WAAX,CAAuBC,OAAvB,CAA+BC,MAAnD,EAA2DH,CAAC,EAA5D,EAAgE;AAC9DD,MAAAA,sBAAsB,CAACK,IAAvB,eACE;AACE,qBAAW,KAAKf,KAAL,CAAWY,WAAX,CAAuBC,OAAvB,CAA+BF,CAA/B,EAAkCK,IAD/C;AAEE,QAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWY,WAAX,CAAuBC,OAAvB,CAA+BF,CAA/B,EAAkCM,OAF7C;AAAA,kBAIG,KAAKjB,KAAL,CAAWY,WAAX,CAAuBC,OAAvB,CAA+BF,CAA/B,EAAkCO;AAJrC;AAAA;AAAA;AAAA;AAAA,cADF;AAQD;;AAED,QAAIC,UAAJ;;AACA,QAAI,KAAKnB,KAAL,CAAWoB,WAAX,KAA2B,MAA/B,EAAuC;AACrCD,MAAAA,UAAU,GAAG,UAAb;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU,GAAG,UAAb;AACD;;AAED,wBACE;AACE,MAAA,KAAK,EAAE;AACLE,QAAAA,QAAQ,EAAE,OADL;AAELC,QAAAA,GAAG,EAAE,CAFA;AAGLC,QAAAA,IAAI,EAAE,CAHD;AAILC,QAAAA,eAAe,EAAE,iBAJZ;AAKLC,QAAAA,KAAK,EAAE,MALF;AAMLC,QAAAA,MAAM,EAAE,MANH;AAOLC,QAAAA,MAAM,EAAE;AAPH,OADT;AAUE,MAAA,SAAS,EAAER,UAVb;AAWE,MAAA,EAAE,EAAC,WAXL;AAAA,6BAaE;AACE,QAAA,KAAK,EAAE;AACLM,UAAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWyB,KAAX,KAAqB,EAArB,GAA0B,KAA1B,GAAkC,KAAKzB,KAAL,CAAWyB,KAD/C;AAELC,UAAAA,MAAM,EAAE,KAFH;AAILE,UAAAA,MAAM,EAAE,iBAJH;AAMLC,UAAAA,MAAM,EAAE,MANH;AAOLC,UAAAA,SAAS,EAAE,KAPN;AAQLN,UAAAA,eAAe,EAAE,OARZ;AASLO,UAAAA,KAAK,EAAE,OATF;AAULC,UAAAA,QAAQ,EAAE;AAVL,SADT;AAAA,gCAeE;AACE,UAAA,KAAK,EAAE;AACLR,YAAAA,eAAe,EAAE,SADZ;AAELnB,YAAAA,OAAO,EAAE,MAFJ;AAGL4B,YAAAA,cAAc,EAAE,QAHX;AAILC,YAAAA,UAAU,EAAE,QAJP;AAKLR,YAAAA,MAAM,EAAE;AALH,WADT;AAAA,iCASE;AAAK,YAAA,KAAK,EAAE;AAAES,cAAAA,aAAa,EAAE;AAAjB,aAAZ;AAAA,sBACG,KAAKnC,KAAL,CAAWoC,WAAX,CAAuBC;AAD1B;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,gBAfF,eA8BE;AACE,UAAA,KAAK,EAAE;AACLb,YAAAA,eAAe,EAAE,EADZ;AAELQ,YAAAA,QAAQ,EAAE,MAFL;AAGLN,YAAAA,MAAM,EAAE,KAHH;AAILY,YAAAA,OAAO,EAAE;AAJJ,WADT;AAAA,iCAQE;AAAA,sBAAM,KAAKtC,KAAL,CAAWuC,SAAX,CAAqBF;AAA3B;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,gBA9BF,eA0CE;AACE,UAAA,KAAK,EAAE;AACLb,YAAAA,eAAe,EAAE,SADZ;AAELnB,YAAAA,OAAO,EAAE,MAFJ;AAGL4B,YAAAA,cAAc,EAAE,UAHX;AAILC,YAAAA,UAAU,EAAE,QAJP;AAKLR,YAAAA,MAAM,EAAE,KALH;AAMLY,YAAAA,OAAO,EAAE;AANJ,WADT;AAAA,iCAUE;AAAA,sBAAM5B;AAAN;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,gBA1CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAbF;AAAA;AAAA;AAAA;AAAA,YADF;AAuED;;AA7GuB;;AAgH1B,eAAeZ,CAAf","sourcesContent":["import React, { Component } from \"react\";\n\n/*\n  documentatnion:\n\n .js code:\n\n  let modalheadertext = \"header\";\n    let modalbodytext = [];\n\n    modalbodytext.push(\n      <>\n        <p>\n          In this example, we use CSS to create a modal (dialog box) that is\n          hidden by default.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n        <p>\n          We use JavaScript to trigger the modal and to display the current\n          image inside the modal when it is clicked on. Also note that we use\n          the value from the image's \"alt\" attribute as an image caption text\n          inside the modal.\n        </p>\n        <p>\n          Don't worry if you do not understand the code right away. When you are\n          done with CSS, go to our JavaScript Tutorial to learn more.\n        </p>\n      </>\n    );\n\n    let modalfooter = {};\n    let buttons = [\n      { label: \"Cancel\", name: \"cancel\", onClick: this.modalfooterbtnClk },\n      { label: \"Next\", name: \"next\", onClick: this.modalfooterbtnClk },\n      { label: \"Save\", name: \"save\", onClick: this.modalfooterbtnClk },\n    ];\n    modalfooter.buttons = buttons;\n\n\n    .html code:\n       <Svgcomp\n          modalbody={{ text: modalbodytext }}\n          modalheader={{ text: modalheadertext }}\n          modalfooter={modalfooter}\n          isModalOpen={this.state.isModalOpen}\n        />\n \n  */\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  closeModal = () => {\n    document.getElementById(\"modalcomp\").style.display = \"none\";\n  };\n\n  clkOnNext = () => {\n    document.getElementById(\"modalcomp\").style.display = \"none\";\n  };\n\n  clkOnSave = () => {\n    document.getElementById(\"modalcomp\").style.display = \"none\";\n  };\n\n  render() {\n    let modalfooterbuttonshtml = [];\n    for (let i = 0; i < this.props.modalfooter.buttons.length; i++) {\n      modalfooterbuttonshtml.push(\n        <button\n          data-name={this.props.modalfooter.buttons[i].name}\n          onClick={this.props.modalfooter.buttons[i].onClick}\n        >\n          {this.props.modalfooter.buttons[i].label}\n        </button>\n      );\n    }\n\n    let modalclass;\n    if (this.props.isModalOpen === \"true\") {\n      modalclass = \"org-show\";\n    } else {\n      modalclass = \"org-hide\";\n    }\n\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          backgroundColor: \"rgba(0,0,0,0.7)\",\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: 2,\n        }}\n        className={modalclass}\n        id=\"modalcomp\"\n      >\n        <div\n          style={{\n            width: this.props.width === \"\" ? \"80%\" : this.props.width,\n            height: \"80%\",\n\n            border: \"2px solid black\",\n\n            margin: \"auto\",\n            marginTop: \"3vh\",\n            backgroundColor: \"white\",\n            color: \"black\",\n            overflow: \"auto\",\n          }}\n        >\n          {/* header */}\n          <div\n            style={{\n              backgroundColor: \"#EEEEEE\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              height: \"10%\",\n            }}\n          >\n            <div style={{ verticalAlign: \"center\" }}>\n              {this.props.modalheader.text}\n            </div>\n          </div>\n\n          {/* body */}\n          <div\n            style={{\n              backgroundColor: \"\",\n              overflow: \"auto\",\n              height: \"80%\",\n              padding: \"0.5vh 2vw\",\n            }}\n          >\n            <div>{this.props.modalbody.text}</div>\n          </div>\n\n          {/* footer */}\n          <div\n            style={{\n              backgroundColor: \"#EEEEEE\",\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              alignItems: \"center\",\n              height: \"10%\",\n              padding: \"0vh 1vw\",\n            }}\n          >\n            <div>{modalfooterbuttonshtml}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}