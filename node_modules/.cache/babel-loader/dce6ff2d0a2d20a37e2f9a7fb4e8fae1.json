{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddatalistortable.js\";\nimport React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\"; //import { sortArray, fieldTypeHtmltoDBmapping } from \"../../js/index\";\n//import Htmlform from \"./htmlformnew\";\n//import Tabpanel from \"./tabpanel\";\n\nimport Listtable from \"./listtable\";\nimport Tablecomp from \"./tablecomp\"; //import { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n\nimport { getLocalData, serverButtonHandler } from \"../js/index\";\n/*\n  <Recorddata\n                    {...this.props}\n                    compprops={{\n                      orgname: \"gouthama\",\n                      userProfileId: \"gouthama-admin\",\n                      userId: \"\",\n                      parenttableName: \"\",\n                      tableName: \"student\",\n                      parentRecId: \"\",\n                    }}\n                    styleprops={{\n                      width: \"100%\",\n                      height: \"30vh\",\n                      backgroundColor: \"\",\n                      overflow: \"auto\",\n                    }}\n                  />\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.clickHandler = async props => {\n      console.log(props);\n      let {\n        orgname,\n        userprofileid,\n        userid,\n        tablename,\n        recordnamelinkactionid,\n        recordnewbuttonactionid\n      } = this.props.compprops;\n      let {\n        itemType,\n        itemId,\n        itemName,\n        actionid\n      } = props;\n      let localdata = getLocalData(this.props);\n\n      if (itemType == \"tabletdnamelink\") {\n        this.props.serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: actionid,\n            recordid: itemName\n          }\n        });\n      }\n\n      if (itemType == \"layoutbutton\") {\n        this.props.serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: actionid,\n            recordid: \"\"\n          }\n        });\n      }\n\n      if (itemType == \"layoutaction\") {\n        this.props.serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: actionid,\n            recordid: \"\"\n          }\n        });\n      }\n\n      if (itemType == \"tabledropdown\") {\n        this.props.serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: actionid,\n            viewname: itemName\n          }\n        });\n      }\n\n      if (itemType == \"morerecordsbutton\") {\n        this.morerecordsOnclick();\n      }\n    };\n\n    this.inputKeyupHandler = () => {};\n\n    this.morerecordsOnclick = async () => {\n      let dataParams = this.state.dataParams;\n      let LastEvaluatedKey = this.state.LastEvaluatedKey;\n\n      if (LastEvaluatedKey != \"\" && LastEvaluatedKey != undefined) {\n        dataParams.exclusiveStartKey = LastEvaluatedKey;\n        let dataresult = await getRecorddata(dataParams);\n\n        if (dataresult.isSuccess === \"false\") {\n          alert(\"data\" + dataresult.message);\n        } else {\n          let recordDataList = dataresult.dataprops.Items;\n          LastEvaluatedKey = dataresult.dataprops.LastEvaluatedKey;\n          console.log(LastEvaluatedKey);\n          console.log(recordDataList);\n          this.setState({\n            LastEvaluatedKey: LastEvaluatedKey,\n            morerecorddata: recordDataList\n          });\n        }\n      }\n    };\n\n    this.componentDidUpdate = async prevProps => {\n      let {\n        componenthtmlid\n      } = this.props;\n      console.log(this.props);\n      let datasyncEventprops = this.props.datasyncEventprops;\n\n      if (prevProps && JSON.stringify(this.props.datasyncEventprops) != JSON.stringify(prevProps.datasyncEventprops)) {\n        if (datasyncEventprops.componenthtmlid == \"all\" || datasyncEventprops.componenthtmlid == componenthtmlid) {\n          if (datasyncEventprops.name == \"updaterecorddata\") {\n            this.setState({\n              updaterecorddata: datasyncEventprops.data\n            });\n          }\n        }\n      }\n    };\n\n    this.serverEventHandler = () => {};\n\n    this.state = {\n      mainPanelHtmlObj: [],\n      recorddata: {},\n      dataParams: {},\n      LastEvaluatedKey: \"\",\n      // when more button is clicked\n      morerecorddata: [],\n      // on updaterecorddata datasync event\n      updaterecorddata: []\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datadisplaytype,\n      viewname\n    } = this.props.compprops;\n\n    if (viewname == null) {\n      viewname = \"recentlyviewed\";\n    }\n\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: \"\",\n      viewName: viewname,\n      datadisplaytype: datadisplaytype\n    });\n    alert(userprofileid);\n    alert(tablename);\n    alert(datadisplaytype);\n  }\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      datadisplaytype\n    } = props;\n    let {\n      mainPanelHtmlObj\n    } = this.state;\n    alert(viewName);\n    let metadataParams = {};\n    let dataParams = {}; // tableview metadata\n\n    metadataParams = {\n      objectName: \"tableview\",\n      objectData: {},\n      keyConditions: [{\n        field: \"orgname\",\n        value: orgname,\n        expression: \"=\"\n      }, {\n        field: \"tableviewid\",\n        value: userProfileId + \"-\" + tableName + \"-\" + datadisplaytype,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    };\n    console.log(\"metadataParams\" + JSON.stringify(metadataParams));\n    let metadataresult = await getRecorddata(metadataParams);\n\n    if (metadataresult.isSuccess === \"false\") {\n      alert(\"metadata\" + metadataresult.message);\n    } else {\n      if (metadataresult.dataprops.Items[0]) {\n        console.log(metadataresult.dataprops.Items[0]); // column data for table\n\n        let columnMetadata = metadataresult.dataprops.Items[0].data;\n        let viewnamedropdownchangeaction = metadataresult.dataprops.Items[0].viewnamedropdownchangeaction;\n        let serverretriverowslimit = metadataresult.dataprops.Items[0].serverretriverowslimit;\n        console.log(viewnamedropdownchangeaction);\n        let listrecordcompsperrow = metadataresult.dataprops.Items[0].listrecordcompsperrow;\n        console.log(columnMetadata);\n        console.log(viewName);\n        console.log(datasortparambeginswith);\n        console.log(datasortparamequalsto); // tableview defult sortparam  get all data if no tableview name given\n\n        let defaultIdsortparam = metadataresult.dataprops.Items[0].defaultidsortparam;\n\n        if (viewName != \"\" //&&\n        //     datasortparambeginswith == \"\" &&\n        //    datasortparamequalsto == \"\"\n        ) {\n            if (viewName != \"recentlyviewed\") {\n              // table view not recentlyviewed\n              for (let i in columnMetadata) {\n                if (columnMetadata[i].name == viewName) {\n                  datasortparambeginswith = columnMetadata[i].idsortparam;\n                }\n              }\n            } else {\n              // tableview recentlyviewd\n              datasortparambeginswith = defaultIdsortparam;\n            }\n\n            dataParams = {\n              objectName: tableName,\n              objectData: {},\n              keyConditions: [{\n                field: \"orgname\",\n                value: orgname,\n                expression: \"=\"\n              }, {\n                field: \"id\",\n                value: datasortparambeginswith,\n                expression: \"beginswith\"\n              }],\n              filterConditions: [],\n              pageSize: 1,\n              limit: serverretriverowslimit,\n              exclusiveStartKey: \"\"\n            };\n          } else {\n          // no tableview name given get data based on equalsto or begin with\n          if (datasortparamequalsto != \"\") {\n            dataParams = {\n              objectName: tableName,\n              objectData: {},\n              keyConditions: [{\n                field: \"orgname\",\n                value: orgname,\n                expression: \"=\"\n              }, {\n                field: \"id\",\n                value: datasortparamequalsto,\n                expression: \"=\"\n              }],\n              filterConditions: [],\n              pageSize: \"\",\n              limit: \"\",\n              exclusiveStartKey: \"\"\n            };\n          } // get records begin with data\n\n\n          if (datasortparambeginswith != \"\") {\n            dataParams = {\n              objectName: tableName,\n              objectData: {},\n              keyConditions: [{\n                field: \"orgname\",\n                value: orgname,\n                expression: \"=\"\n              }, {\n                field: \"id\",\n                value: datasortparambeginswith,\n                expression: \"beginswith\"\n              }],\n              filterConditions: [],\n              pageSize: \"\",\n              limit: \"\",\n              exclusiveStartKey: \"\"\n            };\n          }\n        }\n\n        console.log(\"dataParams\" + JSON.stringify(dataParams));\n        let dataresult = await getRecorddata(dataParams);\n\n        if (dataresult.isSuccess === \"false\") {\n          alert(\"data\" + dataresult.message);\n        } else {\n          let recordDataList = dataresult.dataprops.Items;\n          let LastEvaluatedKey = dataresult.dataprops.LastEvaluatedKey;\n          console.log(dataParams);\n          console.log(\"========\");\n          console.log(dataresult);\n          console.log(datadisplaytype);\n\n          if (datadisplaytype == \"list\") {\n            let tablehtmlid = tableName + \"view\";\n            mainPanelHtmlObj[tablehtmlid] = /*#__PURE__*/React.createElement(Listtable, {\n              componentname: \"Listtable\",\n              dataProps: {\n                name: \"meganavpanel-list-content-recordname\",\n                type: \"meganavpanel-list-content-recordname\"\n              },\n              columnMetadata: columnMetadata,\n              tableOnclick: this.clickHandler,\n              tableOnChange: this.inputChangeHandler,\n              recordData: recordDataList,\n              activeTableviewName: viewName,\n              tableName: tableName,\n              tablehtmlid: tablehtmlid,\n              rowhtmlid1: \"id\",\n              rowhtmlid2: \"id\",\n              clientstatename: tableName,\n              clientstatetype: \"recordlistdata\",\n              listrecordcompsperrow: listrecordcompsperrow,\n              viewnamedropdownchangeaction: viewnamedropdownchangeaction\n            }, \"\");\n          } else {\n            let tablehtmlid = tableName + \"view\";\n            mainPanelHtmlObj[tablehtmlid] = /*#__PURE__*/React.createElement(Tablecomp, {\n              componentname: \"Tablecomp\",\n              dataProps: {\n                name: \"meganavpanel-list-content-recordname\",\n                type: \"meganavpanel-list-content-recordname\"\n              },\n              columnMetadata: columnMetadata,\n              tableOnclick: this.clickHandler,\n              tableOnChange: this.inputChangeHandler,\n              recordData: recordDataList,\n              activeTableviewName: viewName,\n              tableName: tableName,\n              tablehtmlid: tableName + \"view\",\n              rowhtmlid1: \"id\",\n              rowhtmlid2: \"id\",\n              clientstatename: tableName,\n              clientstatetype: \"recordlistdata\",\n              morerecordData: [],\n              viewnamedropdownchangeaction: viewnamedropdownchangeaction\n            }, \"\");\n          }\n\n          this.setState({\n            mainPanelHtmlObj: mainPanelHtmlObj,\n            LastEvaluatedKey: LastEvaluatedKey,\n            dataParams: dataParams\n          });\n        }\n      } else {\n        alert(\"please enter validate url\");\n      }\n    }\n  } // get static component\n\n\n  getStaticReactcompfromDynamic(comp, propsfromlocalparent) {\n    console.log(comp);\n    let componentname = comp.props.componentname;\n    let componentprops = comp.props;\n    console.log(comp.props);\n    let componenthtml = [];\n\n    if (componentname == \"Tablecomp\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Tablecomp, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"Listtable\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Listtable, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n  } // when more button on table or list comp is clicked\n\n\n  render() {\n    let {\n      mainPanelHtmlObj,\n      morerecorddata\n    } = this.state;\n    console.log(morerecorddata);\n    console.log(mainPanelHtmlObj);\n    let mainpanelHtml = [];\n    console.log(this.props);\n\n    for (let i in mainPanelHtmlObj) {\n      let Staticcomp = this.getStaticReactcompfromDynamic(mainPanelHtmlObj[i], {\n        morerecorddata: morerecorddata,\n        updaterecorddata: this.state.updaterecorddata\n      });\n      mainpanelHtml.push(Staticcomp);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.htmlid,\n      style: { ...this.props.styleprops\n      },\n      children: mainpanelHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddatalistortable.js"],"names":["React","Component","getRecorddata","createRecord","bulkcreateRecord","Listtable","Tablecomp","getLocalData","serverButtonHandler","F","constructor","props","clickHandler","console","log","orgname","userprofileid","userid","tablename","recordnamelinkactionid","recordnewbuttonactionid","compprops","itemType","itemId","itemName","actionid","localdata","clickprops","recordid","viewname","morerecordsOnclick","inputKeyupHandler","dataParams","state","LastEvaluatedKey","undefined","exclusiveStartKey","dataresult","isSuccess","alert","message","recordDataList","dataprops","Items","setState","morerecorddata","componentDidUpdate","prevProps","componenthtmlid","datasyncEventprops","JSON","stringify","name","updaterecorddata","data","serverEventHandler","mainPanelHtmlObj","recorddata","componentDidMount","datadisplaytype","getRecordListMetadataAndDatafromServer","userProfileId","userId","tableName","datasortparambeginswith","datasortparamequalsto","action","viewName","metadataParams","objectName","objectData","keyConditions","field","value","expression","filterConditions","pageSize","limit","metadataresult","columnMetadata","viewnamedropdownchangeaction","serverretriverowslimit","listrecordcompsperrow","defaultIdsortparam","defaultidsortparam","i","idsortparam","tablehtmlid","createElement","componentname","dataProps","type","tableOnclick","tableOnChange","inputChangeHandler","recordData","activeTableviewName","rowhtmlid1","rowhtmlid2","clientstatename","clientstatetype","morerecordData","getStaticReactcompfromDynamic","comp","propsfromlocalparent","componentprops","componenthtml","push","render","mainpanelHtml","Staticcomp","htmlid","styleprops"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,gBAAtC,QAA8D,aAA9D,C,CACA;AACA;AACA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CACA;;AACA,SAASC,YAAT,EAAuBC,mBAAvB,QAAkD,aAAlD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,CAAN,SAAgBR,SAAhB,CAA0B;AACxBS,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACjB,UAAMA,MAAN;;AADiB,SA2CnBC,YA3CmB,GA2CJ,MAAOD,KAAP,IAAiB;AAC9BE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,UAAI;AACFI,QAAAA,OADE;AAEFC,QAAAA,aAFE;AAGFC,QAAAA,MAHE;AAIFC,QAAAA,SAJE;AAKFC,QAAAA,sBALE;AAMFC,QAAAA;AANE,UAOA,KAAKT,KAAL,CAAWU,SAPf;AAQA,UAAI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA,QAApB;AAA8BC,QAAAA;AAA9B,UAA2Cd,KAA/C;AACA,UAAIe,SAAS,GAAGnB,YAAY,CAAC,KAAKI,KAAN,CAA5B;;AACA,UAAIW,QAAQ,IAAI,iBAAhB,EAAmC;AACjC,aAAKX,KAAL,CAAWH,mBAAX,CAA+B;AAC7BkB,UAAAA,SAAS,EAAEA,SADkB;AAE7BC,UAAAA,UAAU,EAAE;AACVF,YAAAA,QAAQ,EAAEA,QADA;AAEVG,YAAAA,QAAQ,EAAEJ;AAFA;AAFiB,SAA/B;AAOD;;AACD,UAAIF,QAAQ,IAAI,cAAhB,EAAgC;AAC9B,aAAKX,KAAL,CAAWH,mBAAX,CAA+B;AAC7BkB,UAAAA,SAAS,EAAEA,SADkB;AAE7BC,UAAAA,UAAU,EAAE;AACVF,YAAAA,QAAQ,EAAEA,QADA;AAEVG,YAAAA,QAAQ,EAAE;AAFA;AAFiB,SAA/B;AAOD;;AACD,UAAIN,QAAQ,IAAI,cAAhB,EAAgC;AAC9B,aAAKX,KAAL,CAAWH,mBAAX,CAA+B;AAC7BkB,UAAAA,SAAS,EAAEA,SADkB;AAE7BC,UAAAA,UAAU,EAAE;AACVF,YAAAA,QAAQ,EAAEA,QADA;AAEVG,YAAAA,QAAQ,EAAE;AAFA;AAFiB,SAA/B;AAOD;;AACD,UAAIN,QAAQ,IAAI,eAAhB,EAAiC;AAC/B,aAAKX,KAAL,CAAWH,mBAAX,CAA+B;AAC7BkB,UAAAA,SAAS,EAAEA,SADkB;AAE7BC,UAAAA,UAAU,EAAE;AACVF,YAAAA,QAAQ,EAAEA,QADA;AAEVI,YAAAA,QAAQ,EAAEL;AAFA;AAFiB,SAA/B;AAOD;;AACD,UAAIF,QAAQ,IAAI,mBAAhB,EAAqC;AACnC,aAAKQ,kBAAL;AACD;AACF,KA9FkB;;AAAA,SAgGnBC,iBAhGmB,GAgGC,MAAM,CAAE,CAhGT;;AAAA,SA0VnBD,kBA1VmB,GA0VE,YAAY;AAC/B,UAAIE,UAAU,GAAG,KAAKC,KAAL,CAAWD,UAA5B;AACA,UAAIE,gBAAgB,GAAG,KAAKD,KAAL,CAAWC,gBAAlC;;AACA,UAAIA,gBAAgB,IAAI,EAApB,IAA0BA,gBAAgB,IAAIC,SAAlD,EAA6D;AAC3DH,QAAAA,UAAU,CAACI,iBAAX,GAA+BF,gBAA/B;AAEA,YAAIG,UAAU,GAAG,MAAMnC,aAAa,CAAC8B,UAAD,CAApC;;AACA,YAAIK,UAAU,CAACC,SAAX,KAAyB,OAA7B,EAAsC;AACpCC,UAAAA,KAAK,CAAC,SAASF,UAAU,CAACG,OAArB,CAAL;AACD,SAFD,MAEO;AACL,cAAIC,cAAc,GAAGJ,UAAU,CAACK,SAAX,CAAqBC,KAA1C;AACAT,UAAAA,gBAAgB,GAAGG,UAAU,CAACK,SAAX,CAAqBR,gBAAxC;AACArB,UAAAA,OAAO,CAACC,GAAR,CAAYoB,gBAAZ;AACArB,UAAAA,OAAO,CAACC,GAAR,CAAY2B,cAAZ;AACA,eAAKG,QAAL,CAAc;AACZV,YAAAA,gBAAgB,EAAEA,gBADN;AAEZW,YAAAA,cAAc,EAAEJ;AAFJ,WAAd;AAID;AACF;AACF,KA9WkB;;AAAA,SAiXnBK,kBAjXmB,GAiXE,MAAOC,SAAP,IAAqB;AACxC,UAAI;AAAEC,QAAAA;AAAF,UAAsB,KAAKrC,KAA/B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;AACA,UAAIsC,kBAAkB,GAAG,KAAKtC,KAAL,CAAWsC,kBAApC;;AAEA,UACEF,SAAS,IACTG,IAAI,CAACC,SAAL,CAAe,KAAKxC,KAAL,CAAWsC,kBAA1B,KACEC,IAAI,CAACC,SAAL,CAAeJ,SAAS,CAACE,kBAAzB,CAHJ,EAIE;AACA,YACEA,kBAAkB,CAACD,eAAnB,IAAsC,KAAtC,IACAC,kBAAkB,CAACD,eAAnB,IAAsCA,eAFxC,EAGE;AACA,cAAIC,kBAAkB,CAACG,IAAnB,IAA2B,kBAA/B,EAAmD;AACjD,iBAAKR,QAAL,CAAc;AAAES,cAAAA,gBAAgB,EAAEJ,kBAAkB,CAACK;AAAvC,aAAd;AACD;AACF;AACF;AACF,KApYkB;;AAAA,SAsYnBC,kBAtYmB,GAsYE,MAAM,CAAE,CAtYV;;AAEjB,SAAKtB,KAAL,GAAa;AACXuB,MAAAA,gBAAgB,EAAE,EADP;AAEXC,MAAAA,UAAU,EAAE,EAFD;AAGXzB,MAAAA,UAAU,EAAE,EAHD;AAIXE,MAAAA,gBAAgB,EAAE,EAJP;AAKX;AACAW,MAAAA,cAAc,EAAE,EANL;AAOX;AACAQ,MAAAA,gBAAgB,EAAE;AARP,KAAb;AAUD;;AAEsB,QAAjBK,iBAAiB,GAAG;AACxB7C,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;AACA,QAAI;AACFI,MAAAA,OADE;AAEFC,MAAAA,aAFE;AAGFC,MAAAA,MAHE;AAIFC,MAAAA,SAJE;AAKFyC,MAAAA,eALE;AAMF9B,MAAAA;AANE,QAOA,KAAKlB,KAAL,CAAWU,SAPf;;AAQA,QAAIQ,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,MAAAA,QAAQ,GAAG,gBAAX;AACD;;AACD,SAAK+B,sCAAL,CAA4C;AAC1C7C,MAAAA,OAAO,EAAEA,OADiC;AAE1C8C,MAAAA,aAAa,EAAE7C,aAF2B;AAG1C8C,MAAAA,MAAM,EAAE7C,MAHkC;AAI1C8C,MAAAA,SAAS,EAAE7C,SAJ+B;AAK1C8C,MAAAA,uBAAuB,EAAE,EALiB;AAM1CC,MAAAA,qBAAqB,EAAE,EANmB;AAO1CC,MAAAA,MAAM,EAAE,EAPkC;AAQ1CC,MAAAA,QAAQ,EAAEtC,QARgC;AAS1C8B,MAAAA,eAAe,EAAEA;AATyB,KAA5C;AAWApB,IAAAA,KAAK,CAACvB,aAAD,CAAL;AACAuB,IAAAA,KAAK,CAACrB,SAAD,CAAL;AACAqB,IAAAA,KAAK,CAACoB,eAAD,CAAL;AACD;;AAyD2C,QAAtCC,sCAAsC,CAACjD,KAAD,EAAQ;AAClD,QAAI;AACFI,MAAAA,OADE;AAEF8C,MAAAA,aAFE;AAGFC,MAAAA,MAHE;AAIFC,MAAAA,SAJE;AAKFC,MAAAA,uBALE;AAMFC,MAAAA,qBANE;AAOFC,MAAAA,MAPE;AAQFC,MAAAA,QARE;AASFR,MAAAA;AATE,QAUAhD,KAVJ;AAWA,QAAI;AAAE6C,MAAAA;AAAF,QAAuB,KAAKvB,KAAhC;AACAM,IAAAA,KAAK,CAAC4B,QAAD,CAAL;AACA,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIpC,UAAU,GAAG,EAAjB,CAfkD,CAiBlD;;AACAoC,IAAAA,cAAc,GAAG;AACfC,MAAAA,UAAU,EAAE,WADG;AAEfC,MAAAA,UAAU,EAAE,EAFG;AAGfC,MAAAA,aAAa,EAAE,CACb;AACEC,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,KAAK,EAAE1D,OAFT;AAGE2D,QAAAA,UAAU,EAAE;AAHd,OADa,EAMb;AACEF,QAAAA,KAAK,EAAE,aADT;AAEEC,QAAAA,KAAK,EAAEZ,aAAa,GAAG,GAAhB,GAAsBE,SAAtB,GAAkC,GAAlC,GAAwCJ,eAFjD;AAGEe,QAAAA,UAAU,EAAE;AAHd,OANa,CAHA;AAefC,MAAAA,gBAAgB,EAAE,EAfH;AAgBfC,MAAAA,QAAQ,EAAE,EAhBK;AAiBfC,MAAAA,KAAK,EAAE,EAjBQ;AAkBfzC,MAAAA,iBAAiB,EAAE;AAlBJ,KAAjB;AAoBAvB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBoC,IAAI,CAACC,SAAL,CAAeiB,cAAf,CAA/B;AACA,QAAIU,cAAc,GAAG,MAAM5E,aAAa,CAACkE,cAAD,CAAxC;;AACA,QAAIU,cAAc,CAACxC,SAAf,KAA6B,OAAjC,EAA0C;AACxCC,MAAAA,KAAK,CAAC,aAAauC,cAAc,CAACtC,OAA7B,CAAL;AACD,KAFD,MAEO;AACL,UAAIsC,cAAc,CAACpC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,CAAJ,EAAuC;AACrC9B,QAAAA,OAAO,CAACC,GAAR,CAAYgE,cAAc,CAACpC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,CAAZ,EADqC,CAGrC;;AACA,YAAIoC,cAAc,GAAGD,cAAc,CAACpC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,EAAkCW,IAAvD;AAEA,YAAI0B,4BAA4B,GAC9BF,cAAc,CAACpC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,EAAkCqC,4BADpC;AAEA,YAAIC,sBAAsB,GACxBH,cAAc,CAACpC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,EAAkCsC,sBADpC;AAEApE,QAAAA,OAAO,CAACC,GAAR,CAAYkE,4BAAZ;AACA,YAAIE,qBAAqB,GACvBJ,cAAc,CAACpC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,EAAkCuC,qBADpC;AAEArE,QAAAA,OAAO,CAACC,GAAR,CAAYiE,cAAZ;AACAlE,QAAAA,OAAO,CAACC,GAAR,CAAYqD,QAAZ;AACAtD,QAAAA,OAAO,CAACC,GAAR,CAAYkD,uBAAZ;AACAnD,QAAAA,OAAO,CAACC,GAAR,CAAYmD,qBAAZ,EAhBqC,CAkBrC;;AACA,YAAIkB,kBAAkB,GACpBL,cAAc,CAACpC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,EAAkCyC,kBADpC;;AAEA,YACEjB,QAAQ,IAAI,EADd,CAEE;AACA;AACA;AAJF,UAKE;AACA,gBAAIA,QAAQ,IAAI,gBAAhB,EAAkC;AAChC;AACA,mBAAK,IAAIkB,CAAT,IAAcN,cAAd,EAA8B;AAC5B,oBAAIA,cAAc,CAACM,CAAD,CAAd,CAAkBjC,IAAlB,IAA0Be,QAA9B,EAAwC;AACtCH,kBAAAA,uBAAuB,GAAGe,cAAc,CAACM,CAAD,CAAd,CAAkBC,WAA5C;AACD;AACF;AACF,aAPD,MAOO;AACL;AACAtB,cAAAA,uBAAuB,GAAGmB,kBAA1B;AACD;;AACDnD,YAAAA,UAAU,GAAG;AACXqC,cAAAA,UAAU,EAAEN,SADD;AAEXO,cAAAA,UAAU,EAAE,EAFD;AAGXC,cAAAA,aAAa,EAAE,CACb;AACEC,gBAAAA,KAAK,EAAE,SADT;AAEEC,gBAAAA,KAAK,EAAE1D,OAFT;AAGE2D,gBAAAA,UAAU,EAAE;AAHd,eADa,EAMb;AACEF,gBAAAA,KAAK,EAAE,IADT;AAEEC,gBAAAA,KAAK,EAAET,uBAFT;AAGEU,gBAAAA,UAAU,EAAE;AAHd,eANa,CAHJ;AAeXC,cAAAA,gBAAgB,EAAE,EAfP;AAgBXC,cAAAA,QAAQ,EAAE,CAhBC;AAiBXC,cAAAA,KAAK,EAAEI,sBAjBI;AAkBX7C,cAAAA,iBAAiB,EAAE;AAlBR,aAAb;AAoBD,WArCD,MAqCO;AACL;AACA,cAAI6B,qBAAqB,IAAI,EAA7B,EAAiC;AAC/BjC,YAAAA,UAAU,GAAG;AACXqC,cAAAA,UAAU,EAAEN,SADD;AAEXO,cAAAA,UAAU,EAAE,EAFD;AAGXC,cAAAA,aAAa,EAAE,CACb;AACEC,gBAAAA,KAAK,EAAE,SADT;AAEEC,gBAAAA,KAAK,EAAE1D,OAFT;AAGE2D,gBAAAA,UAAU,EAAE;AAHd,eADa,EAMb;AACEF,gBAAAA,KAAK,EAAE,IADT;AAEEC,gBAAAA,KAAK,EAAER,qBAFT;AAGES,gBAAAA,UAAU,EAAE;AAHd,eANa,CAHJ;AAeXC,cAAAA,gBAAgB,EAAE,EAfP;AAgBXC,cAAAA,QAAQ,EAAE,EAhBC;AAiBXC,cAAAA,KAAK,EAAE,EAjBI;AAkBXzC,cAAAA,iBAAiB,EAAE;AAlBR,aAAb;AAoBD,WAvBI,CAyBL;;;AACA,cAAI4B,uBAAuB,IAAI,EAA/B,EAAmC;AACjChC,YAAAA,UAAU,GAAG;AACXqC,cAAAA,UAAU,EAAEN,SADD;AAEXO,cAAAA,UAAU,EAAE,EAFD;AAGXC,cAAAA,aAAa,EAAE,CACb;AACEC,gBAAAA,KAAK,EAAE,SADT;AAEEC,gBAAAA,KAAK,EAAE1D,OAFT;AAGE2D,gBAAAA,UAAU,EAAE;AAHd,eADa,EAMb;AACEF,gBAAAA,KAAK,EAAE,IADT;AAEEC,gBAAAA,KAAK,EAAET,uBAFT;AAGEU,gBAAAA,UAAU,EAAE;AAHd,eANa,CAHJ;AAeXC,cAAAA,gBAAgB,EAAE,EAfP;AAgBXC,cAAAA,QAAQ,EAAE,EAhBC;AAiBXC,cAAAA,KAAK,EAAE,EAjBI;AAkBXzC,cAAAA,iBAAiB,EAAE;AAlBR,aAAb;AAoBD;AACF;;AACDvB,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAeoC,IAAI,CAACC,SAAL,CAAenB,UAAf,CAA3B;AACA,YAAIK,UAAU,GAAG,MAAMnC,aAAa,CAAC8B,UAAD,CAApC;;AACA,YAAIK,UAAU,CAACC,SAAX,KAAyB,OAA7B,EAAsC;AACpCC,UAAAA,KAAK,CAAC,SAASF,UAAU,CAACG,OAArB,CAAL;AACD,SAFD,MAEO;AACL,cAAIC,cAAc,GAAGJ,UAAU,CAACK,SAAX,CAAqBC,KAA1C;AACA,cAAIT,gBAAgB,GAAGG,UAAU,CAACK,SAAX,CAAqBR,gBAA5C;AACArB,UAAAA,OAAO,CAACC,GAAR,CAAYkB,UAAZ;AACAnB,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYuB,UAAZ;AACAxB,UAAAA,OAAO,CAACC,GAAR,CAAY6C,eAAZ;;AACA,cAAIA,eAAe,IAAI,MAAvB,EAA+B;AAC7B,gBAAI4B,WAAW,GAAGxB,SAAS,GAAG,MAA9B;AACAP,YAAAA,gBAAgB,CAAC+B,WAAD,CAAhB,gBAAgCvF,KAAK,CAACwF,aAAN,CAC9BnF,SAD8B,EAE9B;AACEoF,cAAAA,aAAa,EAAE,WADjB;AAEEC,cAAAA,SAAS,EAAE;AACTtC,gBAAAA,IAAI,EAAE,sCADG;AAETuC,gBAAAA,IAAI,EAAE;AAFG,eAFb;AAMEZ,cAAAA,cAAc,EAAEA,cANlB;AAOEa,cAAAA,YAAY,EAAE,KAAKhF,YAPrB;AAQEiF,cAAAA,aAAa,EAAE,KAAKC,kBARtB;AASEC,cAAAA,UAAU,EAAEtD,cATd;AAUEuD,cAAAA,mBAAmB,EAAE7B,QAVvB;AAWEJ,cAAAA,SAAS,EAAEA,SAXb;AAYEwB,cAAAA,WAAW,EAAEA,WAZf;AAaEU,cAAAA,UAAU,EAAE,IAbd;AAcEC,cAAAA,UAAU,EAAE,IAdd;AAeEC,cAAAA,eAAe,EAAEpC,SAfnB;AAgBEqC,cAAAA,eAAe,EAAE,gBAhBnB;AAiBElB,cAAAA,qBAAqB,EAAEA,qBAjBzB;AAkBEF,cAAAA,4BAA4B,EAAEA;AAlBhC,aAF8B,EAsB9B,EAtB8B,CAAhC;AAwBD,WA1BD,MA0BO;AACL,gBAAIO,WAAW,GAAGxB,SAAS,GAAG,MAA9B;AACAP,YAAAA,gBAAgB,CAAC+B,WAAD,CAAhB,gBAAgCvF,KAAK,CAACwF,aAAN,CAC9BlF,SAD8B,EAE9B;AACEmF,cAAAA,aAAa,EAAE,WADjB;AAEEC,cAAAA,SAAS,EAAE;AACTtC,gBAAAA,IAAI,EAAE,sCADG;AAETuC,gBAAAA,IAAI,EAAE;AAFG,eAFb;AAMEZ,cAAAA,cAAc,EAAEA,cANlB;AAOEa,cAAAA,YAAY,EAAE,KAAKhF,YAPrB;AAQEiF,cAAAA,aAAa,EAAE,KAAKC,kBARtB;AASEC,cAAAA,UAAU,EAAEtD,cATd;AAUEuD,cAAAA,mBAAmB,EAAE7B,QAVvB;AAWEJ,cAAAA,SAAS,EAAEA,SAXb;AAYEwB,cAAAA,WAAW,EAAExB,SAAS,GAAG,MAZ3B;AAaEkC,cAAAA,UAAU,EAAE,IAbd;AAcEC,cAAAA,UAAU,EAAE,IAdd;AAeEC,cAAAA,eAAe,EAAEpC,SAfnB;AAgBEqC,cAAAA,eAAe,EAAE,gBAhBnB;AAiBEC,cAAAA,cAAc,EAAE,EAjBlB;AAkBErB,cAAAA,4BAA4B,EAAEA;AAlBhC,aAF8B,EAsB9B,EAtB8B,CAAhC;AAwBD;;AACD,eAAKpC,QAAL,CAAc;AACZY,YAAAA,gBAAgB,EAAEA,gBADN;AAEZtB,YAAAA,gBAAgB,EAAEA,gBAFN;AAGZF,YAAAA,UAAU,EAAEA;AAHA,WAAd;AAKD;AACF,OAjLD,MAiLO;AACLO,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACD;AACF;AACF,GAnUuB,CAqUxB;;;AACA+D,EAAAA,6BAA6B,CAACC,IAAD,EAAOC,oBAAP,EAA6B;AACxD3F,IAAAA,OAAO,CAACC,GAAR,CAAYyF,IAAZ;AACA,QAAId,aAAa,GAAGc,IAAI,CAAC5F,KAAL,CAAW8E,aAA/B;AACA,QAAIgB,cAAc,GAAGF,IAAI,CAAC5F,KAA1B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYyF,IAAI,CAAC5F,KAAjB;AACA,QAAI+F,aAAa,GAAG,EAApB;;AACA,QAAIjB,aAAa,IAAI,WAArB,EAAkC;AAChCiB,MAAAA,aAAa,CAACC,IAAd,eACE,QAAC,SAAD,OAAeF,cAAf;AAAA,WAAmCD;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF;AAGA,aAAOE,aAAP;AACD;;AACD,QAAIjB,aAAa,IAAI,WAArB,EAAkC;AAChCiB,MAAAA,aAAa,CAACC,IAAd,eACE,QAAC,SAAD,OAAeF,cAAf;AAAA,WAAmCD;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF;AAGA,aAAOE,aAAP;AACD;AACF,GAxVuB,CA0VxB;;;AA+CAE,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEpD,MAAAA,gBAAF;AAAoBX,MAAAA;AAApB,QAAuC,KAAKZ,KAAhD;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAY+B,cAAZ;AACAhC,IAAAA,OAAO,CAACC,GAAR,CAAY0C,gBAAZ;AACA,QAAIqD,aAAa,GAAG,EAApB;AACAhG,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;;AACA,SAAK,IAAI0E,CAAT,IAAc7B,gBAAd,EAAgC;AAC9B,UAAIsD,UAAU,GAAG,KAAKR,6BAAL,CAAmC9C,gBAAgB,CAAC6B,CAAD,CAAnD,EAAwD;AACvExC,QAAAA,cAAc,EAAEA,cADuD;AAEvEQ,QAAAA,gBAAgB,EAAE,KAAKpB,KAAL,CAAWoB;AAF0C,OAAxD,CAAjB;AAIAwD,MAAAA,aAAa,CAACF,IAAd,CAAmBG,UAAnB;AACD;;AAED,wBACE;AAAK,MAAA,EAAE,EAAE,KAAKnG,KAAL,CAAWoG,MAApB;AAA4B,MAAA,KAAK,EAAE,EAAE,GAAG,KAAKpG,KAAL,CAAWqG;AAAhB,OAAnC;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA5ZuB;;AA+Z1B,eAAepG,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\n//import { sortArray, fieldTypeHtmltoDBmapping } from \"../../js/index\";\n//import Htmlform from \"./htmlformnew\";\n//import Tabpanel from \"./tabpanel\";\nimport Listtable from \"./listtable\";\nimport Tablecomp from \"./tablecomp\";\n//import { GetLocalIcon, GetGoogleIcon } from \"./icons\";\nimport { getLocalData, serverButtonHandler } from \"../js/index\";\n\n/*\n  <Recorddata\n                    {...this.props}\n                    compprops={{\n                      orgname: \"gouthama\",\n                      userProfileId: \"gouthama-admin\",\n                      userId: \"\",\n                      parenttableName: \"\",\n                      tableName: \"student\",\n                      parentRecId: \"\",\n                    }}\n                    styleprops={{\n                      width: \"100%\",\n                      height: \"30vh\",\n                      backgroundColor: \"\",\n                      overflow: \"auto\",\n                    }}\n                  />\n\n*/\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainPanelHtmlObj: [],\n      recorddata: {},\n      dataParams: {},\n      LastEvaluatedKey: \"\",\n      // when more button is clicked\n      morerecorddata: [],\n      // on updaterecorddata datasync event\n      updaterecorddata: [],\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datadisplaytype,\n      viewname,\n    } = this.props.compprops;\n    if (viewname == null) {\n      viewname = \"recentlyviewed\";\n    }\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: \"\",\n      viewName: viewname,\n      datadisplaytype: datadisplaytype,\n    });\n    alert(userprofileid);\n    alert(tablename);\n    alert(datadisplaytype);\n  }\n\n  clickHandler = async (props) => {\n    console.log(props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      recordnamelinkactionid,\n      recordnewbuttonactionid,\n    } = this.props.compprops;\n    let { itemType, itemId, itemName, actionid } = props;\n    let localdata = getLocalData(this.props);\n    if (itemType == \"tabletdnamelink\") {\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: actionid,\n          recordid: itemName,\n        },\n      });\n    }\n    if (itemType == \"layoutbutton\") {\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: actionid,\n          recordid: \"\",\n        },\n      });\n    }\n    if (itemType == \"layoutaction\") {\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: actionid,\n          recordid: \"\",\n        },\n      });\n    }\n    if (itemType == \"tabledropdown\") {\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: actionid,\n          viewname: itemName,\n        },\n      });\n    }\n    if (itemType == \"morerecordsbutton\") {\n      this.morerecordsOnclick();\n    }\n  };\n\n  inputKeyupHandler = () => {};\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      datadisplaytype,\n    } = props;\n    let { mainPanelHtmlObj } = this.state;\n    alert(viewName);\n    let metadataParams = {};\n    let dataParams = {};\n\n    // tableview metadata\n    metadataParams = {\n      objectName: \"tableview\",\n      objectData: {},\n      keyConditions: [\n        {\n          field: \"orgname\",\n          value: orgname,\n          expression: \"=\",\n        },\n        {\n          field: \"tableviewid\",\n          value: userProfileId + \"-\" + tableName + \"-\" + datadisplaytype,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n    console.log(\"metadataParams\" + JSON.stringify(metadataParams));\n    let metadataresult = await getRecorddata(metadataParams);\n    if (metadataresult.isSuccess === \"false\") {\n      alert(\"metadata\" + metadataresult.message);\n    } else {\n      if (metadataresult.dataprops.Items[0]) {\n        console.log(metadataresult.dataprops.Items[0]);\n\n        // column data for table\n        let columnMetadata = metadataresult.dataprops.Items[0].data;\n\n        let viewnamedropdownchangeaction =\n          metadataresult.dataprops.Items[0].viewnamedropdownchangeaction;\n        let serverretriverowslimit =\n          metadataresult.dataprops.Items[0].serverretriverowslimit;\n        console.log(viewnamedropdownchangeaction);\n        let listrecordcompsperrow =\n          metadataresult.dataprops.Items[0].listrecordcompsperrow;\n        console.log(columnMetadata);\n        console.log(viewName);\n        console.log(datasortparambeginswith);\n        console.log(datasortparamequalsto);\n\n        // tableview defult sortparam  get all data if no tableview name given\n        let defaultIdsortparam =\n          metadataresult.dataprops.Items[0].defaultidsortparam;\n        if (\n          viewName != \"\"\n          //&&\n          //     datasortparambeginswith == \"\" &&\n          //    datasortparamequalsto == \"\"\n        ) {\n          if (viewName != \"recentlyviewed\") {\n            // table view not recentlyviewed\n            for (let i in columnMetadata) {\n              if (columnMetadata[i].name == viewName) {\n                datasortparambeginswith = columnMetadata[i].idsortparam;\n              }\n            }\n          } else {\n            // tableview recentlyviewd\n            datasortparambeginswith = defaultIdsortparam;\n          }\n          dataParams = {\n            objectName: tableName,\n            objectData: {},\n            keyConditions: [\n              {\n                field: \"orgname\",\n                value: orgname,\n                expression: \"=\",\n              },\n              {\n                field: \"id\",\n                value: datasortparambeginswith,\n                expression: \"beginswith\",\n              },\n            ],\n            filterConditions: [],\n            pageSize: 1,\n            limit: serverretriverowslimit,\n            exclusiveStartKey: \"\",\n          };\n        } else {\n          // no tableview name given get data based on equalsto or begin with\n          if (datasortparamequalsto != \"\") {\n            dataParams = {\n              objectName: tableName,\n              objectData: {},\n              keyConditions: [\n                {\n                  field: \"orgname\",\n                  value: orgname,\n                  expression: \"=\",\n                },\n                {\n                  field: \"id\",\n                  value: datasortparamequalsto,\n                  expression: \"=\",\n                },\n              ],\n              filterConditions: [],\n              pageSize: \"\",\n              limit: \"\",\n              exclusiveStartKey: \"\",\n            };\n          }\n\n          // get records begin with data\n          if (datasortparambeginswith != \"\") {\n            dataParams = {\n              objectName: tableName,\n              objectData: {},\n              keyConditions: [\n                {\n                  field: \"orgname\",\n                  value: orgname,\n                  expression: \"=\",\n                },\n                {\n                  field: \"id\",\n                  value: datasortparambeginswith,\n                  expression: \"beginswith\",\n                },\n              ],\n              filterConditions: [],\n              pageSize: \"\",\n              limit: \"\",\n              exclusiveStartKey: \"\",\n            };\n          }\n        }\n        console.log(\"dataParams\" + JSON.stringify(dataParams));\n        let dataresult = await getRecorddata(dataParams);\n        if (dataresult.isSuccess === \"false\") {\n          alert(\"data\" + dataresult.message);\n        } else {\n          let recordDataList = dataresult.dataprops.Items;\n          let LastEvaluatedKey = dataresult.dataprops.LastEvaluatedKey;\n          console.log(dataParams);\n          console.log(\"========\");\n          console.log(dataresult);\n          console.log(datadisplaytype);\n          if (datadisplaytype == \"list\") {\n            let tablehtmlid = tableName + \"view\";\n            mainPanelHtmlObj[tablehtmlid] = React.createElement(\n              Listtable,\n              {\n                componentname: \"Listtable\",\n                dataProps: {\n                  name: \"meganavpanel-list-content-recordname\",\n                  type: \"meganavpanel-list-content-recordname\",\n                },\n                columnMetadata: columnMetadata,\n                tableOnclick: this.clickHandler,\n                tableOnChange: this.inputChangeHandler,\n                recordData: recordDataList,\n                activeTableviewName: viewName,\n                tableName: tableName,\n                tablehtmlid: tablehtmlid,\n                rowhtmlid1: \"id\",\n                rowhtmlid2: \"id\",\n                clientstatename: tableName,\n                clientstatetype: \"recordlistdata\",\n                listrecordcompsperrow: listrecordcompsperrow,\n                viewnamedropdownchangeaction: viewnamedropdownchangeaction,\n              },\n              \"\"\n            );\n          } else {\n            let tablehtmlid = tableName + \"view\";\n            mainPanelHtmlObj[tablehtmlid] = React.createElement(\n              Tablecomp,\n              {\n                componentname: \"Tablecomp\",\n                dataProps: {\n                  name: \"meganavpanel-list-content-recordname\",\n                  type: \"meganavpanel-list-content-recordname\",\n                },\n                columnMetadata: columnMetadata,\n                tableOnclick: this.clickHandler,\n                tableOnChange: this.inputChangeHandler,\n                recordData: recordDataList,\n                activeTableviewName: viewName,\n                tableName: tableName,\n                tablehtmlid: tableName + \"view\",\n                rowhtmlid1: \"id\",\n                rowhtmlid2: \"id\",\n                clientstatename: tableName,\n                clientstatetype: \"recordlistdata\",\n                morerecordData: [],\n                viewnamedropdownchangeaction: viewnamedropdownchangeaction,\n              },\n              \"\"\n            );\n          }\n          this.setState({\n            mainPanelHtmlObj: mainPanelHtmlObj,\n            LastEvaluatedKey: LastEvaluatedKey,\n            dataParams: dataParams,\n          });\n        }\n      } else {\n        alert(\"please enter validate url\");\n      }\n    }\n  }\n\n  // get static component\n  getStaticReactcompfromDynamic(comp, propsfromlocalparent) {\n    console.log(comp);\n    let componentname = comp.props.componentname;\n    let componentprops = comp.props;\n    console.log(comp.props);\n    let componenthtml = [];\n    if (componentname == \"Tablecomp\") {\n      componenthtml.push(\n        <Tablecomp {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n    if (componentname == \"Listtable\") {\n      componenthtml.push(\n        <Listtable {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n  }\n\n  // when more button on table or list comp is clicked\n  morerecordsOnclick = async () => {\n    let dataParams = this.state.dataParams;\n    let LastEvaluatedKey = this.state.LastEvaluatedKey;\n    if (LastEvaluatedKey != \"\" && LastEvaluatedKey != undefined) {\n      dataParams.exclusiveStartKey = LastEvaluatedKey;\n\n      let dataresult = await getRecorddata(dataParams);\n      if (dataresult.isSuccess === \"false\") {\n        alert(\"data\" + dataresult.message);\n      } else {\n        let recordDataList = dataresult.dataprops.Items;\n        LastEvaluatedKey = dataresult.dataprops.LastEvaluatedKey;\n        console.log(LastEvaluatedKey);\n        console.log(recordDataList);\n        this.setState({\n          LastEvaluatedKey: LastEvaluatedKey,\n          morerecorddata: recordDataList,\n        });\n      }\n    }\n  };\n\n  // when datasyncevent is came from parent comps\n  componentDidUpdate = async (prevProps) => {\n    let { componenthtmlid } = this.props;\n    console.log(this.props);\n    let datasyncEventprops = this.props.datasyncEventprops;\n\n    if (\n      prevProps &&\n      JSON.stringify(this.props.datasyncEventprops) !=\n        JSON.stringify(prevProps.datasyncEventprops)\n    ) {\n      if (\n        datasyncEventprops.componenthtmlid == \"all\" ||\n        datasyncEventprops.componenthtmlid == componenthtmlid\n      ) {\n        if (datasyncEventprops.name == \"updaterecorddata\") {\n          this.setState({ updaterecorddata: datasyncEventprops.data });\n        }\n      }\n    }\n  };\n\n  serverEventHandler = () => {};\n\n  render() {\n    let { mainPanelHtmlObj, morerecorddata } = this.state;\n    console.log(morerecorddata);\n    console.log(mainPanelHtmlObj);\n    let mainpanelHtml = [];\n    console.log(this.props);\n    for (let i in mainPanelHtmlObj) {\n      let Staticcomp = this.getStaticReactcompfromDynamic(mainPanelHtmlObj[i], {\n        morerecorddata: morerecorddata,\n        updaterecorddata: this.state.updaterecorddata,\n      });\n      mainpanelHtml.push(Staticcomp);\n    }\n\n    return (\n      <div id={this.props.htmlid} style={{ ...this.props.styleprops }}>\n        {mainpanelHtml}\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}