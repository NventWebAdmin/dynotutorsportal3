{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/uigen2.js\";\nimport React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport Recorddatalist from \"./recorddatalistortable2\";\nimport Recorddatanew from \"./recorddatanew\";\nimport Recorddataeditview from \"./recorddataeditview\";\nimport Recorddatarelatedlist from \"./recorddatarelatedlist\";\nimport Tabpanel from \"./tabpanel\";\nimport Closeicontabpanel from \"./closeicontabpanel\";\nimport Callcentercomp from \"./callcenter\";\nimport Spinner from \"./spinner\";\nimport Chat from \"./chat2\";\nimport Mail from \"./mail\";\nimport Note from \"./note\";\nimport Calender from \"./calender\";\nimport Recent from \"./recent\";\nimport { sortArray, fieldTypeHtmltoDBmapping, getLocalData, serverButtonHandler } from \"../js/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.loadServerComponents = async props => {\n      let mainpanelStateObj = {};\n      let {\n        oldmainpanelStateObj,\n        updatedutilityname,\n        clickprops,\n        recorddata\n      } = props;\n      let {\n        codesourceobject,\n        utilityname\n      } = this.props;\n      console.log(props);\n\n      if (updatedutilityname != \"\") {\n        utilityname = updatedutilityname;\n      }\n\n      console.log(codesourceobject);\n      let localdata = getLocalData(this.props);\n      console.log(localdata); // get server components from url based on app, sidetab, action names\n\n      let result = {};\n\n      if (codesourceobject == \"pageperprofile\") {\n        result = await getRecorddata({\n          objectName: codesourceobject,\n          objectData: {},\n          keyConditions: [{\n            field: \"orgname\",\n            value: localdata.orgname,\n            expression: \"=\"\n          }, {\n            field: \"id\",\n            value: \"PP\",\n            expression: \"beginswith\"\n          }],\n          filterConditions: [{\n            field: \"appname\",\n            value: localdata.appname,\n            expression: \"=\"\n          }, {\n            field: \"maintab\",\n            value: localdata.maintab,\n            expression: \"=\"\n          }, {\n            field: \"dropdown\",\n            value: localdata.dropdown,\n            expression: \"=\"\n          }, {\n            field: \"rightdropdown\",\n            value: localdata.rightdropdown,\n            expression: \"=\"\n          }]\n        });\n      } else if (codesourceobject == \"utilityperprofile\") {\n        result = await getRecorddata({\n          objectName: codesourceobject,\n          objectData: {},\n          keyConditions: [{\n            field: \"orgname\",\n            value: localdata.orgname,\n            expression: \"=\"\n          }, {\n            field: \"id\",\n            value: \"UP\",\n            expression: \"beginswith\"\n          }],\n          filterConditions: [{\n            field: \"utilityname\",\n            value: utilityname,\n            expression: \"=\"\n          }]\n        });\n      }\n\n      console.log(result);\n\n      if (result.isSuccess === \"false\") {\n        alert(\"url not found\");\n      } else {\n        console.log(result.dataprops);\n\n        if (result.dataprops && result.dataprops.Items) {\n          // list of server components\n          let servercomponents = result.dataprops.Items[0].dataprops.components;\n          let servercomponentsArray = [];\n\n          for (let i in servercomponents) {\n            servercomponentsArray.push(servercomponents[i]);\n          }\n\n          let servercomponentsArraySorted = sortArray(servercomponentsArray, \"order\", \"integer\");\n\n          for (let servercomponentI in servercomponentsArraySorted) {\n            let componentHtml;\n            let finalcomponentprops = {};\n            let finalstyleprops = {};\n            let servercomponent = servercomponentsArraySorted[servercomponentI];\n\n            for (let prop in servercomponent) {\n              // compoentn props\n              if (prop == \"compprops\") {\n                let comppropstemp = servercomponent[prop];\n                console.log(comppropstemp);\n\n                for (let comppropstempI in comppropstemp) {\n                  console.log(comppropstempI);\n                  let compproptemp = comppropstemp[comppropstempI];\n                  console.log(compproptemp); // assign from localdata to component prop\n\n                  if (compproptemp.type == \"localdata\") {\n                    finalcomponentprops[comppropstempI] = localdata[compproptemp.name];\n                    console.log(finalcomponentprops);\n                  }\n\n                  if (compproptemp.type == \"clickprops\") {\n                    finalcomponentprops[comppropstempI] = clickprops[compproptemp.name];\n                    console.log(finalcomponentprops);\n                  }\n\n                  if (compproptemp.type == \"recorddata\") {\n                    alert(JSON.stringify(recorddata));\n                    alert(compproptemp.name);\n                    finalcomponentprops[comppropstempI] = recorddata[compproptemp.name];\n                    console.log(finalcomponentprops);\n                  } // assign static text to component prop\n\n\n                  if (compproptemp.type == \"text\") {\n                    finalcomponentprops[comppropstempI] = compproptemp.value;\n                  }\n\n                  if (compproptemp.type == \"object\") {\n                    finalcomponentprops[comppropstempI] = compproptemp.value;\n                  }\n                }\n              } //  style props\n\n\n              if (prop == \"styleprops\") {\n                let stylepropstemp = servercomponent[prop];\n                console.log(stylepropstemp);\n\n                for (let stylepropstempI in stylepropstemp) {\n                  let styleproptemp = stylepropstemp[stylepropstempI];\n                  console.log(styleproptemp);\n\n                  if (styleproptemp.type == \"localdata\") {\n                    finalstyleprops[styleproptemp.name] = localdata[styleproptemp.name];\n                  }\n\n                  if (styleproptemp.type == \"text\") {\n                    finalstyleprops[styleproptemp.name] = styleproptemp.value;\n                  }\n                }\n              }\n            }\n\n            console.log(finalcomponentprops); // dynamicall create component\n\n            componentHtml = /*#__PURE__*/React.createElement(this.getComponentfromText(servercomponent.componentname), { ...this.props,\n              componentname: servercomponent.componentname,\n              htmlid: servercomponent.htmlid,\n              serverButtonHandler: this.serverButtonHandler,\n              compprops: finalcomponentprops,\n              styleprops: finalstyleprops\n            }, \"\"); // if  old comp data needed from previous button click\n\n            if (oldmainpanelStateObj[servercomponent.htmlid]) {\n              // if there is local component data\n              mainpanelStateObj[servercomponent.htmlid] = oldmainpanelStateObj[servercomponent.htmlid];\n            } else {\n              mainpanelStateObj[servercomponent.htmlid] = componentHtml;\n            }\n          }\n\n          this.setState({\n            mainpanelStateObj: oldmainpanelStateObj\n          }, () => {\n            this.setState({\n              mainpanelStateObj: mainpanelStateObj\n            });\n          });\n        }\n      }\n    };\n\n    this.serverButtonHandler = async props => {\n      let {\n        mainpanelStateObj\n      } = this.state;\n      let oldmainpanelStateObj = {};\n      let {\n        clickprops,\n        localdata,\n        recorddata\n      } = props;\n      console.log(clickprops); // layout action / button metadata from server\n\n      let metadataParams = {\n        objectName: \"layoutactions\",\n        objectData: {},\n        keyConditions: [{\n          field: \"orgname\",\n          value: localdata.orgname,\n          expression: \"=\"\n        }, {\n          field: \"id\",\n          value: clickprops.actionid,\n          expression: \"=\"\n        }],\n        filterConditions: [],\n        pageSize: \"\",\n        limit: \"\",\n        exclusiveStartKey: \"\"\n      };\n      console.log(\"metadataParams\" + JSON.stringify(metadataParams));\n      let metadataresult = await getRecorddata(metadataParams);\n\n      if (metadataresult.isSuccess === \"false\") {\n        alert(\"metadata\" + metadataresult.message);\n      } else {\n        if (metadataresult.dataprops.Items[0]) {\n          console.log(metadataresult);\n          let action = metadataresult.dataprops.Items[0].action;\n          alert(action.type); // if datasync event\n\n          if (action.type == \"datasyncevent\") {\n            this.setState({\n              datasyncEventprops: action.eventprops\n            });\n          } // if rediret / refresh\n\n\n          if (action.type == \"redirect\" || action.type == \"redirectnewtab\" || action.type == \"refresh\") {\n            if (action.nexturl.type == \"new\") {\n              let nexturl = action.nexturl;\n              let replacetext = nexturl.replacetext;\n\n              for (let replaceparamI in nexturl.replaceparams) {\n                let replaceparam = nexturl.replaceparams[replaceparamI];\n\n                if (replaceparam.type == \"localdata\") {\n                  replacetext = replacetext.replace(replaceparamI, localdata[replaceparam.name]);\n                }\n\n                if (replaceparam.type == \"clickprops\") {\n                  replacetext = replacetext.replace(replaceparamI, clickprops[replaceparam.name]);\n                }\n\n                if (replaceparam.type == \"recorddata\") {\n                  replacetext = replacetext.replace(replaceparamI, recorddata[replaceparam.name]);\n                }\n              }\n\n              console.log(replacetext); // if redrect\n\n              if (action.type == \"redirect\") {\n                window.location.assign(replacetext);\n              }\n\n              if (action.type == \"redirectnewtab\") {\n                window.open(replacetext, \"_blank\");\n              } // if refresh\n\n\n              if (action.type == \"refresh\") {\n                let donotrefreshcomponentshtmlid = action.donotrefreshcomponentshtmlid;\n\n                for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                  console.log(mainpanelStateObj[donotrefreshcomponentshtmlidI]);\n\n                  if (mainpanelStateObj[donotrefreshcomponentshtmlidI]) {\n                    oldmainpanelStateObj[donotrefreshcomponentshtmlidI] = mainpanelStateObj[donotrefreshcomponentshtmlidI];\n                  }\n                }\n\n                this.props.routerprops.history.push(replacetext);\n                this.loadServerComponents({\n                  oldmainpanelStateObj: oldmainpanelStateObj,\n                  updatedutilityname: \"\",\n                  clickprops: clickprops,\n                  recorddata: recorddata\n                });\n              }\n            } // if redirect old or refresh old\n\n\n            if (action.nexturl.type == \"old\") {\n              window.history.back();\n            }\n          }\n\n          if (action.type == \"utitlitychange\") {\n            alert();\n\n            if (action.nexturl.type == \"new\") {\n              let nexturl = action.nexturl;\n              let replacetext = nexturl.replacetext;\n\n              for (let replaceparamI in nexturl.replaceparams) {\n                let replaceparam = nexturl.replaceparams[replaceparamI];\n\n                if (replaceparam.type == \"localdata\") {\n                  replacetext = replacetext.replace(replaceparamI, localdata[replaceparam.name]);\n                }\n\n                if (replaceparam.type == \"clickprops\") {\n                  replacetext = replacetext.replace(replaceparamI, clickprops[replaceparam.name]);\n                }\n\n                if (replaceparam.type == \"recorddata\") {\n                  replacetext = replacetext.replace(replaceparamI, recorddata[replaceparam.name]);\n                }\n              }\n\n              console.log(replacetext); // if refresh\n\n              if (action.type == \"utitlitychange\") {\n                alert();\n                let donotrefreshcomponentshtmlid = action.donotrefreshcomponentshtmlid;\n\n                for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                  console.log(mainpanelStateObj[donotrefreshcomponentshtmlidI]);\n\n                  if (mainpanelStateObj[donotrefreshcomponentshtmlidI]) {\n                    oldmainpanelStateObj[donotrefreshcomponentshtmlidI] = mainpanelStateObj[donotrefreshcomponentshtmlidI];\n                  }\n                } // this.props.routerprops.history.push(replacetext);\n\n\n                this.loadServerComponents({\n                  oldmainpanelStateObj: oldmainpanelStateObj,\n                  updatedutilityname: replacetext,\n                  clickprops: clickprops,\n                  recorddata: recorddata\n                });\n              }\n            } // if redirect old or refresh old\n\n\n            if (action.nexturl.type == \"old\") {\n              window.history.back();\n            }\n          }\n\n          if (action.type == \"dataupdateandredirect\" || action.type == \"dataupdateandrefresh\" || action.type == \"dataupdateandutilitychange\") {\n            alert(); //dataupdate\n\n            for (let objectvar in action.dataupdate) {\n              let object = action.dataupdate[objectvar];\n              let objectTableName = object.tablename;\n              let objectfields = object.fields;\n\n              for (let objectfield in objectfields) {\n                let objectfieldvaluereplacetext = objectfields[objectfield].replacetext;\n                console.log(objectfieldvaluereplacetext);\n\n                for (let replaceparam in objectfields[objectfield].replaceparams) {\n                  let replaceparamvalue = objectfields[objectfield].replaceparams[replaceparam];\n                  console.log(replaceparamvalue);\n\n                  if (replaceparamvalue.type == \"recorddata\") {\n                    objectfieldvaluereplacetext = objectfieldvaluereplacetext.replace(replaceparam, recorddata[replaceparamvalue.name]);\n                  }\n\n                  if (replaceparamvalue.type == \"localdata\") {\n                    objectfieldvaluereplacetext = objectfieldvaluereplacetext.replace(replaceparam, localdata[replaceparamvalue.name]);\n                  }\n\n                  if (replaceparamvalue.type == \"clickprops\") {\n                    objectfieldvaluereplacetext = objectfieldvaluereplacetext.replace(replaceparam, clickprops[replaceparamvalue.name]);\n                  }\n                }\n\n                console.log(objectfieldvaluereplacetext);\n                recorddata[objectfield] = objectfieldvaluereplacetext;\n              }\n\n              alert(recorddata);\n              let result = await createRecord({\n                objectName: objectTableName,\n                objectData: recorddata\n              });\n\n              if (result.isSuccess === \"false\") {\n                alert(result.message);\n              } else {\n                ////////// redirection\n                let nexturl = action.nexturl;\n\n                if (nexturl) {\n                  let replacetext = nexturl.replacetext;\n\n                  for (let replaceparamI in nexturl.replaceparams) {\n                    let replaceparam = nexturl.replaceparams[replaceparamI];\n\n                    if (replaceparam.type == \"localdata\") {\n                      replacetext = replacetext.replace(replaceparamI, localdata[replaceparam.name]);\n                    }\n\n                    if (replaceparam.type == \"recorddata\") {\n                      replacetext = replacetext.replace(replaceparamI, recorddata[replaceparam.name]);\n                    }\n\n                    if (replaceparam.type == \"clickprops\") {\n                      replacetext = replacetext.replace(replaceparamI, clickprops[replaceparam.name]);\n                    }\n                  }\n\n                  console.log(replacetext);\n\n                  if (action.nexturl.type == \"new\") {\n                    // if databaseupdate and redirect new\n                    if (action.type == \"dataupdateandredirect\") {\n                      window.location.assign(replacetext);\n                    } // if databaseupdate and refresh new\n\n\n                    if (action.type == \"dataupdateandrefresh\") {\n                      let donotrefreshcomponentshtmlid = action.donotrefreshcomponentshtmlid;\n\n                      for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                        oldmainpanelStateObj[donotrefreshcomponentshtmlidI] = donotrefreshcomponentshtmlid[donotrefreshcomponentshtmlidI];\n                      }\n\n                      this.props.routerprops.history.push(replacetext);\n                      this.loadServerComponents({\n                        oldmainpanelStateObj: oldmainpanelStateObj,\n                        updatedutilityname: \"\",\n                        clickprops: clickprops,\n                        recorddata: recorddata\n                      });\n                    }\n\n                    if (action.type == \"dataupdateandutilitychange\") {\n                      let donotrefreshcomponentshtmlid = action.donotrefreshcomponentshtmlid;\n\n                      for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                        console.log(mainpanelStateObj[donotrefreshcomponentshtmlidI]);\n\n                        if (mainpanelStateObj[donotrefreshcomponentshtmlidI]) {\n                          oldmainpanelStateObj[donotrefreshcomponentshtmlidI] = mainpanelStateObj[donotrefreshcomponentshtmlidI];\n                        }\n                      } // this.props.routerprops.history.push(replacetext);\n\n\n                      this.loadServerComponents({\n                        oldmainpanelStateObj: oldmainpanelStateObj,\n                        updatedutilityname: replacetext,\n                        clickprops: clickprops,\n                        recorddata: recorddata\n                      });\n                    }\n                  } // if databaseupdate and redirect/refresh old\n\n\n                  if (action.nexturl.type == \"old\") {\n                    window.history.back();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this.startDatasyncEvent = props => {\n      console.log(props); // update tabpanel tabs\n      // this.setState({\n      //   datasyncEventprops: {\n      //     name: \"addtab\",\n      //     data: { label: \"newlabel\", name: \"newname\" },\n      //     componenthtmlid: \"all\",\n      //   },\n      // });\n    };\n\n    this.state = {\n      mainpanelStateObj: {},\n      datasyncEventprops: {},\n      showspinner: \"false\"\n    };\n  } // load server ui components on load\n\n\n  async componentDidMount() {\n    this.loadServerComponents({\n      oldmainpanelStateObj: {},\n      updatedutilityname: \"\",\n      clickprops: {}\n    });\n  } // load server ui components on load\n\n\n  // dynamic component creation\n  getComponentfromText(componentname) {\n    console.log(componentname);\n\n    if (componentname == \"recorddatalist\") {\n      return Recorddatalist;\n    }\n\n    if (componentname == \"recorddatanew\") {\n      return Recorddatanew;\n    }\n\n    if (componentname == \"recorddataeditview\") {\n      return Recorddataeditview;\n    }\n\n    if (componentname == \"recorddatarelatedlist\") {\n      return Recorddatarelatedlist;\n    }\n\n    if (componentname == \"tabpanel\") {\n      return Tabpanel;\n    }\n\n    if (componentname == \"closeicontabpanel\") {\n      return Closeicontabpanel;\n    }\n\n    if (componentname == \"chat\") {\n      return Chat;\n    }\n\n    if (componentname == \"mail\") {\n      return Mail;\n    }\n\n    if (componentname == \"recent\") {\n      return Recent;\n    }\n\n    if (componentname == \"note\") {\n      return Note;\n    }\n\n    if (componentname == \"calender\") {\n      return Calender;\n    }\n\n    if (componentname == \"callcenter\") {\n      return Callcentercomp;\n    }\n  } // static component creation from dynamic comp input\n\n\n  getStaticReactcompfromDynamic(comp, propsfromlocalparent) {\n    console.log(comp);\n    let componentname = comp.props.componentname;\n    let componentprops = comp.props;\n    let componenthtml = [];\n    console.log(componentname);\n    console.log(propsfromlocalparent);\n\n    if (componentname == \"recorddatalist\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Recorddatalist, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"recorddatanew\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Recorddatanew, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"recorddataeditview\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Recorddataeditview, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"recorddatarelatedlist\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Recorddatarelatedlist, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"tabpanel\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Tabpanel, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"closeicontabpanel\") {\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Closeicontabpanel, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"chat\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Chat, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"mail\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Mail, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"recent\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Recent, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"note\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Note, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"calender\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Calender, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n\n    if (componentname == \"callcenter\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push( /*#__PURE__*/_jsxDEV(Callcentercomp, { ...componentprops,\n        ...propsfromlocalparent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 9\n      }, this));\n      return componenthtml;\n    }\n  } // datasync event update between comps\n\n\n  render() {\n    let {\n      mainpanelStateObj,\n      showspinner\n    } = this.state;\n    let mainpanelHtml = [];\n\n    for (let i in mainpanelStateObj) {\n      console.log(mainpanelStateObj[i]);\n      console.log(this.state.datasyncEventprops);\n      let Staticcomp = this.getStaticReactcompfromDynamic(mainpanelStateObj[i], {\n        datasyncEventprops: this.state.datasyncEventprops,\n        localParentProps: this.props.localParentProps\n      });\n      mainpanelHtml.push(Staticcomp);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: mainpanelHtml\n    }, void 0, false);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/uigen2.js"],"names":["React","Component","getRecorddata","createRecord","bulkcreateRecord","Recorddatalist","Recorddatanew","Recorddataeditview","Recorddatarelatedlist","Tabpanel","Closeicontabpanel","Callcentercomp","Spinner","Chat","Mail","Note","Calender","Recent","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","F","constructor","props","loadServerComponents","mainpanelStateObj","oldmainpanelStateObj","updatedutilityname","clickprops","recorddata","codesourceobject","utilityname","console","log","localdata","result","objectName","objectData","keyConditions","field","value","orgname","expression","filterConditions","appname","maintab","dropdown","rightdropdown","isSuccess","alert","dataprops","Items","servercomponents","components","servercomponentsArray","i","push","servercomponentsArraySorted","servercomponentI","componentHtml","finalcomponentprops","finalstyleprops","servercomponent","prop","comppropstemp","comppropstempI","compproptemp","type","name","JSON","stringify","stylepropstemp","stylepropstempI","styleproptemp","createElement","getComponentfromText","componentname","htmlid","compprops","styleprops","setState","state","metadataParams","actionid","pageSize","limit","exclusiveStartKey","metadataresult","message","action","datasyncEventprops","eventprops","nexturl","replacetext","replaceparamI","replaceparams","replaceparam","replace","window","location","assign","open","donotrefreshcomponentshtmlid","donotrefreshcomponentshtmlidI","routerprops","history","back","objectvar","dataupdate","object","objectTableName","tablename","objectfields","fields","objectfield","objectfieldvaluereplacetext","replaceparamvalue","startDatasyncEvent","showspinner","componentDidMount","getStaticReactcompfromDynamic","comp","propsfromlocalparent","componentprops","componenthtml","render","mainpanelHtml","Staticcomp","localParentProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\n\nimport Recorddatalist from \"./recorddatalistortable2\";\nimport Recorddatanew from \"./recorddatanew\";\nimport Recorddataeditview from \"./recorddataeditview\";\nimport Recorddatarelatedlist from \"./recorddatarelatedlist\";\nimport Tabpanel from \"./tabpanel\";\nimport Closeicontabpanel from \"./closeicontabpanel\";\nimport Callcentercomp from \"./callcenter\";\nimport Spinner from \"./spinner\";\nimport Chat from \"./chat2\";\nimport Mail from \"./mail\";\nimport Note from \"./note\";\nimport Calender from \"./calender\";\nimport Recent from \"./recent\";\nimport {\n  sortArray,\n  fieldTypeHtmltoDBmapping,\n  getLocalData,\n  serverButtonHandler,\n} from \"../js/index\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainpanelStateObj: {},\n      datasyncEventprops: {},\n      showspinner: \"false\",\n    };\n  }\n\n  // load server ui components on load\n  async componentDidMount() {\n    this.loadServerComponents({\n      oldmainpanelStateObj: {},\n      updatedutilityname: \"\",\n      clickprops: {},\n    });\n  }\n\n  // load server ui components on load\n  loadServerComponents = async (props) => {\n    let mainpanelStateObj = {};\n    let {\n      oldmainpanelStateObj,\n      updatedutilityname,\n      clickprops,\n      recorddata,\n    } = props;\n    let { codesourceobject, utilityname } = this.props;\n    console.log(props);\n    if (updatedutilityname != \"\") {\n      utilityname = updatedutilityname;\n    }\n    console.log(codesourceobject);\n    let localdata = getLocalData(this.props);\n    console.log(localdata);\n    // get server components from url based on app, sidetab, action names\n    let result = {};\n    if (codesourceobject == \"pageperprofile\") {\n      result = await getRecorddata({\n        objectName: codesourceobject,\n        objectData: {},\n        keyConditions: [\n          { field: \"orgname\", value: localdata.orgname, expression: \"=\" },\n          { field: \"id\", value: \"PP\", expression: \"beginswith\" },\n        ],\n        filterConditions: [\n          { field: \"appname\", value: localdata.appname, expression: \"=\" },\n          {\n            field: \"maintab\",\n            value: localdata.maintab,\n            expression: \"=\",\n          },\n          {\n            field: \"dropdown\",\n            value: localdata.dropdown,\n            expression: \"=\",\n          },\n          {\n            field: \"rightdropdown\",\n            value: localdata.rightdropdown,\n            expression: \"=\",\n          },\n        ],\n      });\n    } else if (codesourceobject == \"utilityperprofile\") {\n      result = await getRecorddata({\n        objectName: codesourceobject,\n        objectData: {},\n        keyConditions: [\n          { field: \"orgname\", value: localdata.orgname, expression: \"=\" },\n          { field: \"id\", value: \"UP\", expression: \"beginswith\" },\n        ],\n        filterConditions: [\n          { field: \"utilityname\", value: utilityname, expression: \"=\" },\n        ],\n      });\n    }\n    console.log(result);\n    if (result.isSuccess === \"false\") {\n      alert(\"url not found\");\n    } else {\n      console.log(result.dataprops);\n      if (result.dataprops && result.dataprops.Items) {\n        // list of server components\n        let servercomponents = result.dataprops.Items[0].dataprops.components;\n        let servercomponentsArray = [];\n        for (let i in servercomponents) {\n          servercomponentsArray.push(servercomponents[i]);\n        }\n        let servercomponentsArraySorted = sortArray(\n          servercomponentsArray,\n          \"order\",\n          \"integer\"\n        );\n\n        for (let servercomponentI in servercomponentsArraySorted) {\n          let componentHtml;\n          let finalcomponentprops = {};\n          let finalstyleprops = {};\n          let servercomponent = servercomponentsArraySorted[servercomponentI];\n\n          for (let prop in servercomponent) {\n            // compoentn props\n            if (prop == \"compprops\") {\n              let comppropstemp = servercomponent[prop];\n\n              console.log(comppropstemp);\n              for (let comppropstempI in comppropstemp) {\n                console.log(comppropstempI);\n                let compproptemp = comppropstemp[comppropstempI];\n                console.log(compproptemp);\n                // assign from localdata to component prop\n                if (compproptemp.type == \"localdata\") {\n                  finalcomponentprops[comppropstempI] =\n                    localdata[compproptemp.name];\n                  console.log(finalcomponentprops);\n                }\n\n                if (compproptemp.type == \"clickprops\") {\n                  finalcomponentprops[comppropstempI] =\n                    clickprops[compproptemp.name];\n                  console.log(finalcomponentprops);\n                }\n\n                if (compproptemp.type == \"recorddata\") {\n                  alert(JSON.stringify(recorddata));\n                  alert(compproptemp.name);\n                  finalcomponentprops[comppropstempI] =\n                    recorddata[compproptemp.name];\n                  console.log(finalcomponentprops);\n                }\n\n                // assign static text to component prop\n                if (compproptemp.type == \"text\") {\n                  finalcomponentprops[comppropstempI] = compproptemp.value;\n                }\n\n                if (compproptemp.type == \"object\") {\n                  finalcomponentprops[comppropstempI] = compproptemp.value;\n                }\n              }\n            }\n\n            //  style props\n            if (prop == \"styleprops\") {\n              let stylepropstemp = servercomponent[prop];\n              console.log(stylepropstemp);\n              for (let stylepropstempI in stylepropstemp) {\n                let styleproptemp = stylepropstemp[stylepropstempI];\n                console.log(styleproptemp);\n                if (styleproptemp.type == \"localdata\") {\n                  finalstyleprops[styleproptemp.name] =\n                    localdata[styleproptemp.name];\n                }\n                if (styleproptemp.type == \"text\") {\n                  finalstyleprops[styleproptemp.name] = styleproptemp.value;\n                }\n              }\n            }\n          }\n          console.log(finalcomponentprops);\n\n          // dynamicall create component\n          componentHtml = React.createElement(\n            this.getComponentfromText(servercomponent.componentname),\n            {\n              ...this.props,\n              componentname: servercomponent.componentname,\n              htmlid: servercomponent.htmlid,\n              serverButtonHandler: this.serverButtonHandler,\n              compprops: finalcomponentprops,\n              styleprops: finalstyleprops,\n            },\n            \"\"\n          );\n\n          // if  old comp data needed from previous button click\n          if (oldmainpanelStateObj[servercomponent.htmlid]) {\n            // if there is local component data\n            mainpanelStateObj[servercomponent.htmlid] =\n              oldmainpanelStateObj[servercomponent.htmlid];\n          } else {\n            mainpanelStateObj[servercomponent.htmlid] = componentHtml;\n          }\n        }\n\n        this.setState(\n          {\n            mainpanelStateObj: oldmainpanelStateObj,\n          },\n          () => {\n            this.setState({\n              mainpanelStateObj: mainpanelStateObj,\n            });\n          }\n        );\n      }\n    }\n  };\n\n  // all server buttons handler on UI\n  serverButtonHandler = async (props) => {\n    let { mainpanelStateObj } = this.state;\n    let oldmainpanelStateObj = {};\n    let { clickprops, localdata, recorddata } = props;\n    console.log(clickprops);\n\n    // layout action / button metadata from server\n    let metadataParams = {\n      objectName: \"layoutactions\",\n      objectData: {},\n      keyConditions: [\n        {\n          field: \"orgname\",\n          value: localdata.orgname,\n          expression: \"=\",\n        },\n        {\n          field: \"id\",\n          value: clickprops.actionid,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n\n    console.log(\"metadataParams\" + JSON.stringify(metadataParams));\n    let metadataresult = await getRecorddata(metadataParams);\n    if (metadataresult.isSuccess === \"false\") {\n      alert(\"metadata\" + metadataresult.message);\n    } else {\n      if (metadataresult.dataprops.Items[0]) {\n        console.log(metadataresult);\n        let action = metadataresult.dataprops.Items[0].action;\n        alert(action.type);\n        // if datasync event\n        if (action.type == \"datasyncevent\") {\n          this.setState({ datasyncEventprops: action.eventprops });\n        }\n\n        // if rediret / refresh\n        if (\n          action.type == \"redirect\" ||\n          action.type == \"redirectnewtab\" ||\n          action.type == \"refresh\"\n        ) {\n          if (action.nexturl.type == \"new\") {\n            let nexturl = action.nexturl;\n            let replacetext = nexturl.replacetext;\n            for (let replaceparamI in nexturl.replaceparams) {\n              let replaceparam = nexturl.replaceparams[replaceparamI];\n              if (replaceparam.type == \"localdata\") {\n                replacetext = replacetext.replace(\n                  replaceparamI,\n                  localdata[replaceparam.name]\n                );\n              }\n              if (replaceparam.type == \"clickprops\") {\n                replacetext = replacetext.replace(\n                  replaceparamI,\n                  clickprops[replaceparam.name]\n                );\n              }\n              if (replaceparam.type == \"recorddata\") {\n                replacetext = replacetext.replace(\n                  replaceparamI,\n                  recorddata[replaceparam.name]\n                );\n              }\n            }\n            console.log(replacetext);\n            // if redrect\n            if (action.type == \"redirect\") {\n              window.location.assign(replacetext);\n            }\n            if (action.type == \"redirectnewtab\") {\n              window.open(replacetext, \"_blank\");\n            }\n\n            // if refresh\n            if (action.type == \"refresh\") {\n              let donotrefreshcomponentshtmlid =\n                action.donotrefreshcomponentshtmlid;\n              for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                console.log(mainpanelStateObj[donotrefreshcomponentshtmlidI]);\n                if (mainpanelStateObj[donotrefreshcomponentshtmlidI]) {\n                  oldmainpanelStateObj[donotrefreshcomponentshtmlidI] =\n                    mainpanelStateObj[donotrefreshcomponentshtmlidI];\n                }\n              }\n\n              this.props.routerprops.history.push(replacetext);\n              this.loadServerComponents({\n                oldmainpanelStateObj: oldmainpanelStateObj,\n                updatedutilityname: \"\",\n                clickprops: clickprops,\n                recorddata: recorddata,\n              });\n            }\n          }\n          // if redirect old or refresh old\n          if (action.nexturl.type == \"old\") {\n            window.history.back();\n          }\n        }\n        if (action.type == \"utitlitychange\") {\n          alert();\n          if (action.nexturl.type == \"new\") {\n            let nexturl = action.nexturl;\n            let replacetext = nexturl.replacetext;\n            for (let replaceparamI in nexturl.replaceparams) {\n              let replaceparam = nexturl.replaceparams[replaceparamI];\n              if (replaceparam.type == \"localdata\") {\n                replacetext = replacetext.replace(\n                  replaceparamI,\n                  localdata[replaceparam.name]\n                );\n              }\n              if (replaceparam.type == \"clickprops\") {\n                replacetext = replacetext.replace(\n                  replaceparamI,\n                  clickprops[replaceparam.name]\n                );\n              }\n              if (replaceparam.type == \"recorddata\") {\n                replacetext = replacetext.replace(\n                  replaceparamI,\n                  recorddata[replaceparam.name]\n                );\n              }\n            }\n            console.log(replacetext);\n\n            // if refresh\n            if (action.type == \"utitlitychange\") {\n              alert();\n              let donotrefreshcomponentshtmlid =\n                action.donotrefreshcomponentshtmlid;\n              for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                console.log(mainpanelStateObj[donotrefreshcomponentshtmlidI]);\n                if (mainpanelStateObj[donotrefreshcomponentshtmlidI]) {\n                  oldmainpanelStateObj[donotrefreshcomponentshtmlidI] =\n                    mainpanelStateObj[donotrefreshcomponentshtmlidI];\n                }\n              }\n\n              // this.props.routerprops.history.push(replacetext);\n              this.loadServerComponents({\n                oldmainpanelStateObj: oldmainpanelStateObj,\n                updatedutilityname: replacetext,\n                clickprops: clickprops,\n                recorddata: recorddata,\n              });\n            }\n          }\n          // if redirect old or refresh old\n          if (action.nexturl.type == \"old\") {\n            window.history.back();\n          }\n        }\n        if (\n          action.type == \"dataupdateandredirect\" ||\n          action.type == \"dataupdateandrefresh\" ||\n          action.type == \"dataupdateandutilitychange\"\n        ) {\n          alert();\n          //dataupdate\n          for (let objectvar in action.dataupdate) {\n            let object = action.dataupdate[objectvar];\n            let objectTableName = object.tablename;\n            let objectfields = object.fields;\n            for (let objectfield in objectfields) {\n              let objectfieldvaluereplacetext =\n                objectfields[objectfield].replacetext;\n              console.log(objectfieldvaluereplacetext);\n              for (let replaceparam in objectfields[objectfield]\n                .replaceparams) {\n                let replaceparamvalue =\n                  objectfields[objectfield].replaceparams[replaceparam];\n                console.log(replaceparamvalue);\n                if (replaceparamvalue.type == \"recorddata\") {\n                  objectfieldvaluereplacetext = objectfieldvaluereplacetext.replace(\n                    replaceparam,\n                    recorddata[replaceparamvalue.name]\n                  );\n                }\n                if (replaceparamvalue.type == \"localdata\") {\n                  objectfieldvaluereplacetext = objectfieldvaluereplacetext.replace(\n                    replaceparam,\n                    localdata[replaceparamvalue.name]\n                  );\n                }\n                if (replaceparamvalue.type == \"clickprops\") {\n                  objectfieldvaluereplacetext = objectfieldvaluereplacetext.replace(\n                    replaceparam,\n                    clickprops[replaceparamvalue.name]\n                  );\n                }\n              }\n              console.log(objectfieldvaluereplacetext);\n              recorddata[objectfield] = objectfieldvaluereplacetext;\n            }\n            alert(recorddata);\n            let result = await createRecord({\n              objectName: objectTableName,\n              objectData: recorddata,\n            });\n            if (result.isSuccess === \"false\") {\n              alert(result.message);\n            } else {\n              ////////// redirection\n              let nexturl = action.nexturl;\n              if (nexturl) {\n                let replacetext = nexturl.replacetext;\n                for (let replaceparamI in nexturl.replaceparams) {\n                  let replaceparam = nexturl.replaceparams[replaceparamI];\n                  if (replaceparam.type == \"localdata\") {\n                    replacetext = replacetext.replace(\n                      replaceparamI,\n                      localdata[replaceparam.name]\n                    );\n                  }\n                  if (replaceparam.type == \"recorddata\") {\n                    replacetext = replacetext.replace(\n                      replaceparamI,\n                      recorddata[replaceparam.name]\n                    );\n                  }\n                  if (replaceparam.type == \"clickprops\") {\n                    replacetext = replacetext.replace(\n                      replaceparamI,\n                      clickprops[replaceparam.name]\n                    );\n                  }\n                }\n                console.log(replacetext);\n\n                if (action.nexturl.type == \"new\") {\n                  // if databaseupdate and redirect new\n                  if (action.type == \"dataupdateandredirect\") {\n                    window.location.assign(replacetext);\n                  }\n                  // if databaseupdate and refresh new\n                  if (action.type == \"dataupdateandrefresh\") {\n                    let donotrefreshcomponentshtmlid =\n                      action.donotrefreshcomponentshtmlid;\n                    for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                      oldmainpanelStateObj[donotrefreshcomponentshtmlidI] =\n                        donotrefreshcomponentshtmlid[\n                          donotrefreshcomponentshtmlidI\n                        ];\n                    }\n\n                    this.props.routerprops.history.push(replacetext);\n                    this.loadServerComponents({\n                      oldmainpanelStateObj: oldmainpanelStateObj,\n                      updatedutilityname: \"\",\n                      clickprops: clickprops,\n                      recorddata: recorddata,\n                    });\n                  }\n                  if (action.type == \"dataupdateandutilitychange\") {\n                    let donotrefreshcomponentshtmlid =\n                      action.donotrefreshcomponentshtmlid;\n                    for (let donotrefreshcomponentshtmlidI in donotrefreshcomponentshtmlid) {\n                      console.log(\n                        mainpanelStateObj[donotrefreshcomponentshtmlidI]\n                      );\n                      if (mainpanelStateObj[donotrefreshcomponentshtmlidI]) {\n                        oldmainpanelStateObj[donotrefreshcomponentshtmlidI] =\n                          mainpanelStateObj[donotrefreshcomponentshtmlidI];\n                      }\n                    }\n\n                    // this.props.routerprops.history.push(replacetext);\n                    this.loadServerComponents({\n                      oldmainpanelStateObj: oldmainpanelStateObj,\n                      updatedutilityname: replacetext,\n                      clickprops: clickprops,\n                      recorddata: recorddata,\n                    });\n                  }\n                }\n                // if databaseupdate and redirect/refresh old\n                if (action.nexturl.type == \"old\") {\n                  window.history.back();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // dynamic component creation\n  getComponentfromText(componentname) {\n    console.log(componentname);\n    if (componentname == \"recorddatalist\") {\n      return Recorddatalist;\n    }\n    if (componentname == \"recorddatanew\") {\n      return Recorddatanew;\n    }\n    if (componentname == \"recorddataeditview\") {\n      return Recorddataeditview;\n    }\n    if (componentname == \"recorddatarelatedlist\") {\n      return Recorddatarelatedlist;\n    }\n    if (componentname == \"tabpanel\") {\n      return Tabpanel;\n    }\n\n    if (componentname == \"closeicontabpanel\") {\n      return Closeicontabpanel;\n    }\n\n    if (componentname == \"chat\") {\n      return Chat;\n    }\n\n    if (componentname == \"mail\") {\n      return Mail;\n    }\n\n    if (componentname == \"recent\") {\n      return Recent;\n    }\n\n    if (componentname == \"note\") {\n      return Note;\n    }\n\n    if (componentname == \"calender\") {\n      return Calender;\n    }\n\n    if (componentname == \"callcenter\") {\n      return Callcentercomp;\n    }\n  }\n\n  // static component creation from dynamic comp input\n  getStaticReactcompfromDynamic(comp, propsfromlocalparent) {\n    console.log(comp);\n    let componentname = comp.props.componentname;\n    let componentprops = comp.props;\n    let componenthtml = [];\n    console.log(componentname);\n    console.log(propsfromlocalparent);\n    if (componentname == \"recorddatalist\") {\n      componenthtml.push(\n        <Recorddatalist {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n    if (componentname == \"recorddatanew\") {\n      componenthtml.push(\n        <Recorddatanew {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n    if (componentname == \"recorddataeditview\") {\n      componenthtml.push(\n        <Recorddataeditview {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n    if (componentname == \"recorddatarelatedlist\") {\n      componenthtml.push(\n        <Recorddatarelatedlist {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n    if (componentname == \"tabpanel\") {\n      componenthtml.push(\n        <Tabpanel {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n\n    if (componentname == \"closeicontabpanel\") {\n      componenthtml.push(\n        <Closeicontabpanel {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n\n    if (componentname == \"chat\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push(\n        <Chat {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n\n    if (componentname == \"mail\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push(\n        <Mail {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n\n    if (componentname == \"recent\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push(\n        <Recent {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n\n    if (componentname == \"note\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push(\n        <Note {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n\n    if (componentname == \"calender\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push(\n        <Calender {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n\n    if (componentname == \"callcenter\") {\n      console.log(propsfromlocalparent);\n      componenthtml.push(\n        <Callcentercomp {...componentprops} {...propsfromlocalparent} />\n      );\n      return componenthtml;\n    }\n  }\n\n  // datasync event update between comps\n  startDatasyncEvent = (props) => {\n    console.log(props);\n\n    // update tabpanel tabs\n    // this.setState({\n    //   datasyncEventprops: {\n    //     name: \"addtab\",\n    //     data: { label: \"newlabel\", name: \"newname\" },\n    //     componenthtmlid: \"all\",\n    //   },\n    // });\n  };\n\n  render() {\n    let { mainpanelStateObj, showspinner } = this.state;\n    let mainpanelHtml = [];\n\n    for (let i in mainpanelStateObj) {\n      console.log(mainpanelStateObj[i]);\n      console.log(this.state.datasyncEventprops);\n      let Staticcomp = this.getStaticReactcompfromDynamic(\n        mainpanelStateObj[i],\n        {\n          datasyncEventprops: this.state.datasyncEventprops,\n          localParentProps: this.props.localParentProps,\n        }\n      );\n      mainpanelHtml.push(Staticcomp);\n    }\n\n    return <>{mainpanelHtml}</>;\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}