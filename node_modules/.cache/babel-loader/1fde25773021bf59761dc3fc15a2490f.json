{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/closeicontabpanel.js\";\nimport React, { Component } from \"react\";\nimport { sortArray, fieldTypeHtmltoDBmapping, getLocalData, serverButtonHandler } from \"../js/index\";\nimport { GetGoogleIcon, GetFontAwesomeIcon, GetBoostrapIcon, GetLocalIcon } from \"./icons\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\"; // events\n// update tabpanel tabs\n//  this.setState({\n//   datasyncEventprops: {\n//     name: \"addtab\",\n//     data: { label: \"newlabel\", name: \"newname\" },\n//     componenthtmlid: \"all\",\n//   },\n// });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class F extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidUpdate = async prevProps => {\n      let {\n        orgname,\n        userprofileid,\n        userid,\n        recordid,\n        tablename,\n        actionname,\n        tabactionid,\n        lastcloseiconactionid,\n        listnviewhomeactionid\n      } = this.props.compprops;\n      let {\n        componenthtmlid\n      } = this.props;\n      console.log(this.props);\n      let datasyncEventprops = this.props.datasyncEventprops;\n\n      if (prevProps && JSON.stringify(this.props.datasyncEventprops) != JSON.stringify(prevProps.datasyncEventprops)) {\n        if (datasyncEventprops.componenthtmlid == \"all\" || datasyncEventprops.componenthtmlid == componenthtmlid) {\n          if (datasyncEventprops.name == \"addtab\") {\n            let addedtabdetail = datasyncEventprops.data;\n            let tabsObj = JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename));\n            let addedtaborder = Object.keys(tabsObj).length + 1;\n            tabsObj[addedtabdetail.name.toLowerCase()] = {\n              order: addedtaborder,\n              label: addedtabdetail.label,\n              name: addedtabdetail.name.toLowerCase(),\n              action: {\n                type: \"layoutaction\",\n                id: tabactionid\n              }\n            };\n            localStorage.setItem(\"listnviewpanel-\" + tablename, JSON.stringify(tabsObj));\n            let activetab = \"\";\n\n            if (recordid == null) {\n              activetab = \"listhome\";\n            } else {\n              activetab = recordid;\n            }\n\n            this.setComponentData(tabsObj, activetab);\n          }\n        }\n      }\n    };\n\n    this.setComponentData = (tabs, activetab) => {\n      console.log(tabs);\n      let tabsHtml = [];\n      let dataprops = tabs;\n      let activeTabName = activetab; // sort tabs by order\n\n      let datapropsarray = [];\n      let datapropsarraysorted = [];\n\n      for (let i in dataprops) {\n        datapropsarray.push(dataprops[i]);\n      }\n\n      datapropsarraysorted = sortArray(datapropsarray, \"order\", \"integer\"); // order 0 activetab\n\n      if (activeTabName == \"\" || activeTabName == undefined) {\n        activeTabName = datapropsarraysorted[0].name;\n      } // iterate over tabs\n\n\n      for (let i = 0; i < datapropsarraysorted.length; i++) {\n        console.log(datapropsarraysorted[i]);\n        console.log(activeTabName);\n        tabsHtml.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: datapropsarraysorted[i].name == \"listhome\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: datapropsarraysorted[i].name == activeTabName ? \"sp activeblack\" : \"sp\",\n            \"data-name\": datapropsarraysorted[i].name,\n            \"data-label\": datapropsarraysorted[i].label,\n            \"data-type\": datapropsarraysorted[i].type,\n            \"data-actionid\": datapropsarraysorted[i].action ? datapropsarraysorted[i].action.id : \"\",\n            onClick: this.onTabOpen,\n            children: \"home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: datapropsarraysorted[i].name == activeTabName ? \"sp activeblack\" : \"sp\",\n              \"data-name\": datapropsarraysorted[i].name,\n              \"data-label\": datapropsarraysorted[i].label,\n              \"data-type\": datapropsarraysorted[i].type,\n              \"data-actionid\": datapropsarraysorted[i].action ? datapropsarraysorted[i].action.id : \"\",\n              onClick: this.onTabOpen,\n              children: datapropsarraysorted[i].label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(GetLocalIcon, {\n              className: datapropsarraysorted[i].name == activeTabName ? \"sp activeblack\" : \"sp\",\n              name: \"close\",\n              \"data-name\": datapropsarraysorted[i].name,\n              \"data-label\": datapropsarraysorted[i].label,\n              \"data-type\": datapropsarraysorted[i].type,\n              \"data-actionid\": datapropsarraysorted[i].action ? datapropsarraysorted[i].action.id : \"\",\n              onClick: this.onTabClose\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)\n        }, void 0, false));\n      }\n\n      this.setState({\n        mainpanelHtml: tabsHtml\n      });\n    };\n\n    this.onTabOpen = e => {\n      let localdata = getLocalData(this.props);\n      let clickprops = {\n        actionid: e.target.dataset.actionid,\n        recordid: e.target.dataset.name\n      };\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: clickprops,\n        recorddata: \"\"\n      });\n    };\n\n    this.onTabClose = e => {\n      console.log(e.target.dataset);\n      let {\n        orgname,\n        userprofileid,\n        userid,\n        recordid,\n        tablename,\n        actionname,\n        tabactionid,\n        lastcloseiconactionid,\n        listnviewhomeactionid\n      } = this.props.compprops;\n      let {\n        label,\n        name\n      } = e.target.dataset;\n      let newtabactionid = \"\";\n      let tabs = JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename));\n      let newtabsObj = {}; // remove key\n\n      for (let tabname in tabs) {\n        if (tabname != name) {\n          newtabsObj[tabname] = tabs[tabname];\n        }\n      } // change order\n\n\n      let localstoragetabs = [];\n\n      for (let newtabI in newtabsObj) {\n        localstoragetabs.push(newtabsObj[newtabI]);\n      }\n\n      let localstoragetabssorted = sortArray(localstoragetabs, \"order\", \"integer\");\n      console.log(localstoragetabssorted); // reupdate order\n\n      let newLocalStoragearrayObj = {};\n      let newOrder = 0;\n      let newactivetabname = \"\";\n\n      for (let i in localstoragetabssorted) {\n        localstoragetabssorted[i].order = newOrder;\n        newOrder = newOrder + 1;\n        newLocalStoragearrayObj[localstoragetabssorted[i].name] = localstoragetabssorted[i]; // new active tab will be last in order after removal\n\n        newactivetabname = localstoragetabssorted[i].name;\n        newtabactionid = localstoragetabssorted[i].action.id;\n      }\n\n      console.log(newactivetabname);\n      localStorage.setItem(\"listnviewpanel-\" + tablename, JSON.stringify(newtabsObj)); // redirect new url if activetab is closed\n\n      if (e.target.dataset.name.toLowerCase() == recordid.toLowerCase()) {\n        let localdata = getLocalData(this.props);\n        let clickprops;\n\n        if (newactivetabname == \"listhome\") {\n          clickprops = {\n            actionid: listnviewhomeactionid,\n            recordid: \"\"\n          };\n        } else {\n          clickprops = {\n            actionid: newtabactionid,\n            recordid: newactivetabname\n          };\n        }\n\n        this.props.serverButtonHandler({\n          localdata: localdata,\n          clickprops: clickprops,\n          recorddata: \"\"\n        });\n      } else {\n        // if inactive tab closed\n        if (recordid == null) {\n          this.setComponentData(JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename)), \"listhome\");\n        } else {\n          this.setComponentData(JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename)), recordid);\n        }\n      }\n    };\n\n    this.state = {\n      mainpanelHtml: []\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props.compprops);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      recordid,\n      tablename,\n      actionname,\n      tabactionid,\n      lastcloseiconactionid,\n      listnviewhomeactionid\n    } = this.props.compprops;\n    let tabs = {};\n    let activetab = \"\";\n    let localStorageDataString = localStorage.getItem(\"listnviewpanel-\" + tablename);\n    let localStorageData = JSON.parse(localStorageDataString); // if list  page url\n\n    if (recordid == null) {\n      activetab = \"listhome\"; // if local storage data exists\n\n      if (localStorageData) {\n        let isRecExists = false;\n\n        for (let rec in localStorageData) {\n          if (localStorageData[rec].name == activetab) {\n            isRecExists = true;\n          }\n        } // if list not exists in localdata\n\n\n        if (isRecExists == false) {\n          for (let rec in localStorageData) {\n            let olddata = localStorageData[rec];\n            localStorageData[rec].order = parseInt(olddata.order) + 1;\n          }\n\n          localStorageData[activetab.toLowerCase()] = {\n            order: 0,\n            label: \"listhome\",\n            name: \"listhome\",\n            action: {\n              type: \"layoutaction\",\n              id: listnviewhomeactionid\n            }\n          };\n        }\n      } else {\n        localStorageData = {};\n        localStorageData[activetab.toLowerCase()] = {\n          order: \"0\",\n          label: \"listhome\",\n          name: \"listhome\",\n          action: {\n            type: \"layoutaction\",\n            id: listnviewhomeactionid\n          }\n        };\n      }\n\n      localStorage.setItem(\"listnviewpanel-\" + tablename, JSON.stringify(localStorageData)); // get all tabs and active tab from local storage, and update component ui\n\n      tabs = JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename));\n      this.setComponentData(tabs, activetab);\n    } else {\n      alert(\"TEs\"); // if record  page\n\n      let dataParams = {};\n      dataParams = {\n        objectName: tablename,\n        objectData: {},\n        keyConditions: [{\n          field: \"orgname\",\n          value: orgname,\n          expression: \"=\"\n        }, {\n          field: \"id\",\n          value: recordid,\n          expression: \"=\"\n        }],\n        filterConditions: [],\n        pageSize: \"\",\n        limit: \"\",\n        exclusiveStartKey: \"\"\n      };\n      console.log(dataParams); // get recorddata to get record id label to display on tab panel\n\n      let dataresult = await getRecorddata(dataParams);\n\n      if (dataresult.isSuccess === \"false\") {\n        alert(\"data\" + dataresult.message);\n      } else {\n        let recordDataList = dataresult.dataprops.Items;\n        console.log(recordDataList[0]);\n        activetab = recordDataList[0].id;\n        let isRecExists = false;\n        let totalNoofRec = 0; // if  local storage exists\n\n        if (localStorageData) {\n          for (let rec in localStorageData) {\n            // new tab order\n            totalNoofRec = totalNoofRec + 1; // if record id tab already exist in localstorage tabs\n\n            if (localStorageData[rec].name == activetab) {\n              isRecExists = true;\n            }\n          }\n\n          if (isRecExists == false) {\n            localStorageData[activetab.toLowerCase()] = {\n              order: totalNoofRec,\n              label: recordDataList[0].name,\n              name: recordDataList[0].id.toLowerCase(),\n              action: {\n                type: \"layoutaction\",\n                id: tabactionid\n              }\n            };\n          }\n        } else {\n          // if tabs local storage not exists\n          localStorageData = {};\n          localStorageData[\"listhome\"] = {\n            order: 0,\n            label: \"listhome\",\n            name: \"listhome\",\n            action: {\n              type: \"layoutaction\",\n              id: listnviewhomeactionid\n            }\n          };\n          localStorageData[activetab.toLowerCase()] = {\n            order: 1,\n            label: recordDataList[0].name,\n            name: recordDataList[0].id.toLowerCase(),\n            action: {\n              type: \"layoutaction\",\n              id: tabactionid\n            }\n          };\n        }\n\n        localStorage.setItem(\"listnviewpanel-\" + tablename, JSON.stringify(localStorageData));\n        tabs = JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename));\n        this.setComponentData(tabs, activetab);\n        console.log(activetab);\n      }\n    }\n  } // when datasyncevent is came from parent comps\n\n\n  render() {\n    console.log(this.props.style);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: this.props.htmlid,\n        style: {\n          color: \"black\",\n          width: \"100%\",\n          backgroundColor: this.props.bgcolor === \"\" ? \"#F2F2F2\" : this.props.bgcolor\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"org-fr org-fjc-s org-bdb\",\n          children: this.state.mainpanelHtml\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/closeicontabpanel.js"],"names":["React","Component","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","GetGoogleIcon","GetFontAwesomeIcon","GetBoostrapIcon","GetLocalIcon","getRecorddata","createRecord","bulkcreateRecord","F","constructor","props","componentDidUpdate","prevProps","orgname","userprofileid","userid","recordid","tablename","actionname","tabactionid","lastcloseiconactionid","listnviewhomeactionid","compprops","componenthtmlid","console","log","datasyncEventprops","JSON","stringify","name","addedtabdetail","data","tabsObj","parse","localStorage","getItem","addedtaborder","Object","keys","length","toLowerCase","order","label","action","type","id","setItem","activetab","setComponentData","tabs","tabsHtml","dataprops","activeTabName","datapropsarray","datapropsarraysorted","i","push","undefined","onTabOpen","onTabClose","setState","mainpanelHtml","e","localdata","clickprops","actionid","target","dataset","recorddata","newtabactionid","newtabsObj","tabname","localstoragetabs","newtabI","localstoragetabssorted","newLocalStoragearrayObj","newOrder","newactivetabname","state","componentDidMount","localStorageDataString","localStorageData","isRecExists","rec","olddata","parseInt","alert","dataParams","objectName","objectData","keyConditions","field","value","expression","filterConditions","pageSize","limit","exclusiveStartKey","dataresult","isSuccess","message","recordDataList","Items","totalNoofRec","render","style","htmlid","color","width","backgroundColor","bgcolor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  sortArray,\n  fieldTypeHtmltoDBmapping,\n  getLocalData,\n  serverButtonHandler,\n} from \"../js/index\";\nimport {\n  GetGoogleIcon,\n  GetFontAwesomeIcon,\n  GetBoostrapIcon,\n  GetLocalIcon,\n} from \"./icons\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\n\n// events\n// update tabpanel tabs\n//  this.setState({\n//   datasyncEventprops: {\n//     name: \"addtab\",\n//     data: { label: \"newlabel\", name: \"newname\" },\n//     componenthtmlid: \"all\",\n//   },\n// });\n\nexport default class F extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { mainpanelHtml: [] };\n  }\n\n  async componentDidMount() {\n    console.log(this.props.compprops);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      recordid,\n      tablename,\n      actionname,\n      tabactionid,\n      lastcloseiconactionid,\n      listnviewhomeactionid,\n    } = this.props.compprops;\n    let tabs = {};\n    let activetab = \"\";\n\n    let localStorageDataString = localStorage.getItem(\n      \"listnviewpanel-\" + tablename\n    );\n    let localStorageData = JSON.parse(localStorageDataString);\n\n    // if list  page url\n    if (recordid == null) {\n      activetab = \"listhome\";\n      // if local storage data exists\n      if (localStorageData) {\n        let isRecExists = false;\n\n        for (let rec in localStorageData) {\n          if (localStorageData[rec].name == activetab) {\n            isRecExists = true;\n          }\n        }\n\n        // if list not exists in localdata\n        if (isRecExists == false) {\n          for (let rec in localStorageData) {\n            let olddata = localStorageData[rec];\n            localStorageData[rec].order = parseInt(olddata.order) + 1;\n          }\n\n          localStorageData[activetab.toLowerCase()] = {\n            order: 0,\n            label: \"listhome\",\n            name: \"listhome\",\n            action: { type: \"layoutaction\", id: listnviewhomeactionid },\n          };\n        }\n      } else {\n        localStorageData = {};\n        localStorageData[activetab.toLowerCase()] = {\n          order: \"0\",\n          label: \"listhome\",\n          name: \"listhome\",\n          action: { type: \"layoutaction\", id: listnviewhomeactionid },\n        };\n      }\n\n      localStorage.setItem(\n        \"listnviewpanel-\" + tablename,\n        JSON.stringify(localStorageData)\n      );\n\n      // get all tabs and active tab from local storage, and update component ui\n      tabs = JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename));\n      this.setComponentData(tabs, activetab);\n    } else {\n      alert(\"TEs\");\n      // if record  page\n      let dataParams = {};\n      dataParams = {\n        objectName: tablename,\n        objectData: {},\n        keyConditions: [\n          { field: \"orgname\", value: orgname, expression: \"=\" },\n          {\n            field: \"id\",\n            value: recordid,\n            expression: \"=\",\n          },\n        ],\n        filterConditions: [],\n        pageSize: \"\",\n        limit: \"\",\n        exclusiveStartKey: \"\",\n      };\n      console.log(dataParams);\n\n      // get recorddata to get record id label to display on tab panel\n      let dataresult = await getRecorddata(dataParams);\n      if (dataresult.isSuccess === \"false\") {\n        alert(\"data\" + dataresult.message);\n      } else {\n        let recordDataList = dataresult.dataprops.Items;\n        console.log(recordDataList[0]);\n        activetab = recordDataList[0].id;\n\n        let isRecExists = false;\n        let totalNoofRec = 0;\n\n        // if  local storage exists\n        if (localStorageData) {\n          for (let rec in localStorageData) {\n            // new tab order\n            totalNoofRec = totalNoofRec + 1;\n\n            // if record id tab already exist in localstorage tabs\n            if (localStorageData[rec].name == activetab) {\n              isRecExists = true;\n            }\n          }\n          if (isRecExists == false) {\n            localStorageData[activetab.toLowerCase()] = {\n              order: totalNoofRec,\n              label: recordDataList[0].name,\n              name: recordDataList[0].id.toLowerCase(),\n              action: { type: \"layoutaction\", id: tabactionid },\n            };\n          }\n        } else {\n          // if tabs local storage not exists\n          localStorageData = {};\n          localStorageData[\"listhome\"] = {\n            order: 0,\n            label: \"listhome\",\n            name: \"listhome\",\n            action: { type: \"layoutaction\", id: listnviewhomeactionid },\n          };\n          localStorageData[activetab.toLowerCase()] = {\n            order: 1,\n            label: recordDataList[0].name,\n            name: recordDataList[0].id.toLowerCase(),\n            action: { type: \"layoutaction\", id: tabactionid },\n          };\n        }\n\n        localStorage.setItem(\n          \"listnviewpanel-\" + tablename,\n          JSON.stringify(localStorageData)\n        );\n\n        tabs = JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename));\n        this.setComponentData(tabs, activetab);\n        console.log(activetab);\n      }\n    }\n  }\n\n  // when datasyncevent is came from parent comps\n  componentDidUpdate = async (prevProps) => {\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      recordid,\n      tablename,\n      actionname,\n      tabactionid,\n      lastcloseiconactionid,\n      listnviewhomeactionid,\n    } = this.props.compprops;\n    let { componenthtmlid } = this.props;\n    console.log(this.props);\n    let datasyncEventprops = this.props.datasyncEventprops;\n\n    if (\n      prevProps &&\n      JSON.stringify(this.props.datasyncEventprops) !=\n        JSON.stringify(prevProps.datasyncEventprops)\n    ) {\n      if (\n        datasyncEventprops.componenthtmlid == \"all\" ||\n        datasyncEventprops.componenthtmlid == componenthtmlid\n      ) {\n        if (datasyncEventprops.name == \"addtab\") {\n          let addedtabdetail = datasyncEventprops.data;\n          let tabsObj = JSON.parse(\n            localStorage.getItem(\"listnviewpanel-\" + tablename)\n          );\n          let addedtaborder = Object.keys(tabsObj).length + 1;\n          tabsObj[addedtabdetail.name.toLowerCase()] = {\n            order: addedtaborder,\n            label: addedtabdetail.label,\n            name: addedtabdetail.name.toLowerCase(),\n            action: { type: \"layoutaction\", id: tabactionid },\n          };\n          localStorage.setItem(\n            \"listnviewpanel-\" + tablename,\n            JSON.stringify(tabsObj)\n          );\n\n          let activetab = \"\";\n          if (recordid == null) {\n            activetab = \"listhome\";\n          } else {\n            activetab = recordid;\n          }\n          this.setComponentData(tabsObj, activetab);\n        }\n      }\n    }\n  };\n\n  setComponentData = (tabs, activetab) => {\n    console.log(tabs);\n    let tabsHtml = [];\n\n    let dataprops = tabs;\n    let activeTabName = activetab;\n    // sort tabs by order\n    let datapropsarray = [];\n    let datapropsarraysorted = [];\n    for (let i in dataprops) {\n      datapropsarray.push(dataprops[i]);\n    }\n    datapropsarraysorted = sortArray(datapropsarray, \"order\", \"integer\");\n\n    // order 0 activetab\n    if (activeTabName == \"\" || activeTabName == undefined) {\n      activeTabName = datapropsarraysorted[0].name;\n    }\n\n    // iterate over tabs\n    for (let i = 0; i < datapropsarraysorted.length; i++) {\n      console.log(datapropsarraysorted[i]);\n      console.log(activeTabName);\n\n      tabsHtml.push(\n        <>\n          {/* if list tab */}\n          {datapropsarraysorted[i].name == \"listhome\" ? (\n            <div\n              className={\n                datapropsarraysorted[i].name == activeTabName\n                  ? \"sp activeblack\"\n                  : \"sp\"\n              }\n              data-name={datapropsarraysorted[i].name}\n              data-label={datapropsarraysorted[i].label}\n              data-type={datapropsarraysorted[i].type}\n              data-actionid={\n                datapropsarraysorted[i].action\n                  ? datapropsarraysorted[i].action.id\n                  : \"\"\n              }\n              onClick={this.onTabOpen}\n            >\n              home\n            </div>\n          ) : (\n            <>\n              {/* if record tab */}\n              <div\n                className={\n                  datapropsarraysorted[i].name == activeTabName\n                    ? \"sp activeblack\"\n                    : \"sp\"\n                }\n                data-name={datapropsarraysorted[i].name}\n                data-label={datapropsarraysorted[i].label}\n                data-type={datapropsarraysorted[i].type}\n                data-actionid={\n                  datapropsarraysorted[i].action\n                    ? datapropsarraysorted[i].action.id\n                    : \"\"\n                }\n                onClick={this.onTabOpen}\n              >\n                {datapropsarraysorted[i].label}\n              </div>\n              <GetLocalIcon\n                className={\n                  datapropsarraysorted[i].name == activeTabName\n                    ? \"sp activeblack\"\n                    : \"sp\"\n                }\n                name=\"close\"\n                data-name={datapropsarraysorted[i].name}\n                data-label={datapropsarraysorted[i].label}\n                data-type={datapropsarraysorted[i].type}\n                data-actionid={\n                  datapropsarraysorted[i].action\n                    ? datapropsarraysorted[i].action.id\n                    : \"\"\n                }\n                onClick={this.onTabClose}\n              />\n            </>\n          )}\n        </>\n      );\n    }\n    this.setState({ mainpanelHtml: tabsHtml });\n  };\n\n  onTabOpen = (e) => {\n    let localdata = getLocalData(this.props);\n    let clickprops = {\n      actionid: e.target.dataset.actionid,\n      recordid: e.target.dataset.name,\n    };\n    this.props.serverButtonHandler({\n      localdata: localdata,\n      clickprops: clickprops,\n      recorddata: \"\",\n    });\n  };\n\n  onTabClose = (e) => {\n    console.log(e.target.dataset);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      recordid,\n      tablename,\n      actionname,\n      tabactionid,\n      lastcloseiconactionid,\n      listnviewhomeactionid,\n    } = this.props.compprops;\n\n    let { label, name } = e.target.dataset;\n    let newtabactionid = \"\";\n\n    let tabs = JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename));\n    let newtabsObj = {};\n    // remove key\n    for (let tabname in tabs) {\n      if (tabname != name) {\n        newtabsObj[tabname] = tabs[tabname];\n      }\n    }\n    // change order\n    let localstoragetabs = [];\n    for (let newtabI in newtabsObj) {\n      localstoragetabs.push(newtabsObj[newtabI]);\n    }\n    let localstoragetabssorted = sortArray(\n      localstoragetabs,\n      \"order\",\n      \"integer\"\n    );\n    console.log(localstoragetabssorted);\n    // reupdate order\n    let newLocalStoragearrayObj = {};\n    let newOrder = 0;\n    let newactivetabname = \"\";\n    for (let i in localstoragetabssorted) {\n      localstoragetabssorted[i].order = newOrder;\n      newOrder = newOrder + 1;\n      newLocalStoragearrayObj[localstoragetabssorted[i].name] =\n        localstoragetabssorted[i];\n      // new active tab will be last in order after removal\n      newactivetabname = localstoragetabssorted[i].name;\n      newtabactionid = localstoragetabssorted[i].action.id;\n    }\n    console.log(newactivetabname);\n\n    localStorage.setItem(\n      \"listnviewpanel-\" + tablename,\n      JSON.stringify(newtabsObj)\n    );\n\n    // redirect new url if activetab is closed\n    if (e.target.dataset.name.toLowerCase() == recordid.toLowerCase()) {\n      let localdata = getLocalData(this.props);\n      let clickprops;\n      if (newactivetabname == \"listhome\") {\n        clickprops = {\n          actionid: listnviewhomeactionid,\n          recordid: \"\",\n        };\n      } else {\n        clickprops = {\n          actionid: newtabactionid,\n          recordid: newactivetabname,\n        };\n      }\n\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: clickprops,\n        recorddata: \"\",\n      });\n    } else {\n      // if inactive tab closed\n      if (recordid == null) {\n        this.setComponentData(\n          JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename)),\n          \"listhome\"\n        );\n      } else {\n        this.setComponentData(\n          JSON.parse(localStorage.getItem(\"listnviewpanel-\" + tablename)),\n          recordid\n        );\n      }\n    }\n  };\n\n  render() {\n    console.log(this.props.style);\n\n    return (\n      <>\n        <div\n          id={this.props.htmlid}\n          style={{\n            color: \"black\",\n            width: \"100%\",\n            backgroundColor:\n              this.props.bgcolor === \"\" ? \"#F2F2F2\" : this.props.bgcolor,\n          }}\n        >\n          <div className=\"org-fr org-fjc-s org-bdb\">\n            {this.state.mainpanelHtml}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}