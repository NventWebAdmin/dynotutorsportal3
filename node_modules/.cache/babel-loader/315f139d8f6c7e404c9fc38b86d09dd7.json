{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddataeditview.js\";\nimport React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping, getLocalData, serverButtonHandler } from \"../js/index\";\nimport Htmlform from \"./htmlformnew\";\nimport Tabpanel from \"./tabpanel\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n/*\n  <Recorddataeditview\n          {...this.props}\n          compprops={{\n            orgname: \"gouthama\",\n            userprofileid: \"gouthama-admin\",\n            userid: \"\",\n            parenttablename: \"\",\n            tablename: \"student2\",\n            parentrecid: \"\",\n            recordid: \"AC-fdf-fdfdfdd\",\n            actionname: \"edit\",\n          }}\n          styleprops={{\n            width: \"100%\",\n            height: \"30vh\",\n            backgroundColor: \"\",\n            overflow: \"auto\",\n          }}\n        />\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.tabclkHanlder = props => {\n      let {\n        tabLabel,\n        tabName,\n        tabType\n      } = props;\n      console.log(props);\n      let inputrecorddatatabcontentArray = document.getElementsByClassName(\"inputrecorddatatabcontent\");\n\n      for (let i = 0; i < inputrecorddatatabcontentArray.length; i++) {\n        console.log(inputrecorddatatabcontentArray[i]);\n\n        if (tabName == inputrecorddatatabcontentArray[i].dataset.tabname) {\n          inputrecorddatatabcontentArray[i].style.display = \"flex\";\n        } else {\n          inputrecorddatatabcontentArray[i].style.display = \"none\";\n        }\n      }\n    };\n\n    this.subsectionclkHanlder = (tabName, sectionName, subsectionName) => {\n      let isValid = true;\n      let htmlformsubsectioncontentArray = document.getElementsByClassName(\"htmlformsubsectioncontent\");\n\n      for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n        console.log(htmlformsubsectioncontentArray[i]);\n\n        if (tabName == htmlformsubsectioncontentArray[i].dataset.tabname && sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname) {\n          if (htmlformsubsectioncontentArray[i].style.display == \"flex\") {\n            //reset subsection errors\n            let errorelements = htmlformsubsectioncontentArray[i].getElementsByClassName(\"htmlforminputitemerror\");\n\n            for (let j = 0; j < errorelements.length; j++) {\n              errorelements[j].style.display = \"none\";\n            } //validate childs\n\n\n            for (let childrenI in htmlformsubsectioncontentArray[i].getElementsByTagName(\"*\")) {\n              let children = htmlformsubsectioncontentArray[i].getElementsByTagName(\"*\")[childrenI];\n              console.log(children);\n\n              if (this.inputElementValidate(children) == false) {\n                isValid = false;\n              }\n            }\n          }\n        }\n      }\n\n      if (isValid == true) {\n        for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n          console.log(htmlformsubsectioncontentArray[i]);\n\n          if (tabName == htmlformsubsectioncontentArray[i].dataset.tabname && sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname) {\n            if (subsectionName == htmlformsubsectioncontentArray[i].dataset.subsectionname) {\n              htmlformsubsectioncontentArray[i].style.display = \"flex\";\n            } else {\n              htmlformsubsectioncontentArray[i].style.display = \"none\";\n            }\n          }\n        }\n      }\n    };\n\n    this.inputElementValidate = htmllement => {\n      let isValid = true;\n\n      if (htmllement && htmllement.required) {\n        if (htmllement.value.trim() == \"\" || htmllement.value == undefined) {\n          htmllement.style.borderBottomColor = \"red\";\n          htmllement.style.borderBottomWidth = \"2px\";\n          var newDiv = document.createElement(\"div\");\n          var newContent = document.createTextNode(\"This is required\");\n          newDiv.setAttribute(\"class\", \"htmlforminputitemerror\");\n          newDiv.appendChild(newContent);\n          htmllement.insertAdjacentElement(\"afterend\", newDiv);\n          isValid = false;\n        } else {\n          htmllement.style.borderBottomColor = htmllement.style.borderRightColor;\n          htmllement.style.borderBottomWidth = htmllement.style.borderRightWidth;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.inputChangeHandler = props => {\n      let {\n        inputName,\n        inputValue\n      } = props;\n      let recorddata = this.state.recorddata;\n      recorddata[inputName] = inputValue;\n      this.setState({\n        recorddata: recorddata\n      });\n      console.log(this.state);\n    };\n\n    this.clickHandler = props => {\n      console.log(props);\n      let localdata = getLocalData(this.props);\n      console.log(this.state.recorddata);\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: props,\n        recorddata: this.state.recorddata\n      });\n    };\n\n    this.inputKeyupHandler = () => {};\n\n    this.state = {\n      mainPanelHtml: [],\n      recorddata: {}\n    };\n  }\n\n  async componentDidMount() {\n    let uigenArray = document.getElementsByClassName(\"uigenspinner\");\n\n    for (let i = 0; i < uigenArray.length; i++) {\n      uigenArray[i].style.display = \"block\";\n    }\n\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      recordid,\n      tablename,\n      actionname\n    } = this.props.compprops;\n    let routerpropsparams = this.props.routerprops.match.params;\n    console.log(this.props.compprops);\n\n    if (recordid) {\n      this.getRecordNewMetadataAndDatafromServer({\n        orgname: orgname,\n        userProfileId: userprofileid,\n        userId: userid,\n        tableName: tablename,\n        datasortparambeginswith: \"\",\n        datasortparamequalsto: \"\",\n        action: actionname,\n        viewName: \"\",\n        recordId: recordid\n      });\n    }\n\n    for (let i = 0; i < uigenArray.length; i++) {\n      uigenArray[i].style.display = \"none\";\n    }\n  }\n\n  async getRecordNewMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      recordId\n    } = props;\n    let recorddata = {};\n    let dataParams = {};\n    let objectmetadataParams = {};\n    let layoutmetadataParams = {};\n    dataParams = {\n      objectName: tableName,\n      objectData: {},\n      keyConditions: [{\n        field: \"orgname\",\n        value: orgname,\n        expression: \"=\"\n      }, {\n        field: \"id\",\n        value: recordId,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    }; // get object metadata for field types to show on ui\n\n    objectmetadataParams = {\n      objectName: \"tableinfo\",\n      objectData: {},\n      keyConditions: [{\n        field: \"orgname\",\n        value: orgname,\n        expression: \"=\"\n      }, {\n        field: \"id\",\n        value: tableName,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    }; // get layout metadata for order of the fields\n\n    layoutmetadataParams = {\n      objectName: \"layoutperuserprofile\",\n      objectData: {},\n      keyConditions: [{\n        field: \"userprofileid\",\n        value: userProfileId,\n        expression: \"=\"\n      }, {\n        field: \"tableid\",\n        value: tableName + \"-\" + action,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    };\n    console.log(dataParams);\n    console.log(layoutmetadataParams);\n    let dataresult = await getRecorddata(dataParams);\n\n    if (dataresult.isSuccess === \"false\") {\n      alert(\"data\" + dataresult.message);\n    } else {\n      let recordDataList = dataresult.dataprops.Items;\n      recorddata = recordDataList[0];\n      console.log(recordDataList[0]); // get object metadata\n\n      let objectmetadataresult = await getRecorddata(objectmetadataParams);\n\n      if (objectmetadataresult.isSuccess === \"false\") {\n        alert(\"layoutmetadata\" + objectmetadataresult.message);\n      } else {\n        // console.log(objectmetadataresult.dataprops.Items);\n        if (objectmetadataresult.dataprops.Items[0]) {\n          let objectMetadata = objectmetadataresult.dataprops.Items[0].data; // get layout metadata\n\n          let layoutmetadataresult = await getRecorddata(layoutmetadataParams);\n\n          if (layoutmetadataresult.isSuccess === \"false\") {\n            alert(\"layoutmetadata\" + layoutmetadataresult.message);\n          } else {\n            let layoutMetadata = layoutmetadataresult.dataprops.Items[0].dataprops;\n            console.log(layoutMetadata);\n            let layoutMetadataHtml = [];\n            let htmlFormDataprops = [];\n            let tabArrayObject = layoutMetadata.tabs;\n            console.log(tabArrayObject);\n            let tabarray = [];\n\n            for (let i in tabArrayObject) {\n              tabarray.push(tabArrayObject[i]);\n            }\n\n            let sortedTabs = sortArray(tabarray, \"order\", \"integer\");\n            console.log(sortedTabs);\n            let tabHtml = [];\n            let tabObjectArray = [];\n            let tabdataprops = [];\n            let activeTabName;\n\n            for (let tabI in sortedTabs) {\n              if (sortedTabs[tabI].defaultactive == \"true\") {\n                activeTabName = sortedTabs[tabI].name;\n              }\n\n              tabObjectArray.push({\n                label: sortedTabs[tabI].label,\n                name: sortedTabs[tabI].name\n              });\n            }\n\n            if (tabObjectArray.length > 1) {\n              tabHtml.push( /*#__PURE__*/_jsxDEV(Tabpanel, {\n                bgcolor: \"\",\n                onTabOpen: this.tabclkHanlder,\n                compprops: {\n                  activetab: activeTabName,\n                  tabs: tabObjectArray\n                },\n                styleprops: {}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 17\n              }, this));\n            }\n\n            for (let tabI in sortedTabs) {\n              let sectionarray = [];\n\n              for (let i in sortedTabs[tabI].sections) {\n                sectionarray.push(sortedTabs[tabI].sections[i]);\n              }\n\n              let sortedSections = sortArray(sectionarray, \"order\", \"integer\");\n              console.log(sortedSections);\n              let sectionHtml = [];\n\n              for (let sectionI in sortedSections) {\n                let subsectionarray = [];\n\n                for (let i in sortedSections[sectionI].subsections) {\n                  subsectionarray.push(sortedSections[sectionI].subsections[i]);\n                }\n\n                let sortedsubSections = sortArray(subsectionarray, \"order\", \"integer\");\n                console.log(sortedsubSections);\n                let subsectionHtml = [];\n\n                for (let subsectionI in sortedsubSections) {\n                  let fieldsarray = [];\n\n                  for (let i in sortedsubSections[subsectionI].fields) {\n                    fieldsarray.push(sortedsubSections[subsectionI].fields[i]);\n                  }\n\n                  let sortedFields = sortArray(fieldsarray, \"order\", \"integer\");\n                  console.log(sortedFields);\n                  let fieldsArrayHtml = [];\n                  htmlFormDataprops = [];\n\n                  for (let fieldI in sortedFields) {\n                    let fieldobject = sortedFields[fieldI]; ////////////////\n\n                    if (fieldobject.isglobalfield == \"true\") {\n                      if (fieldobject.type == \"select\") {\n                        let optionsObj = fieldobject.typeparams.options;\n                        let optionsArray = [];\n                        let optionsArraySorted = [];\n\n                        for (let fieldoption in optionsObj) {\n                          optionsArray.push(optionsObj[fieldoption]);\n                        }\n\n                        optionsArraySorted = sortArray(optionsArray, \"order\", \"integer\");\n                        htmlFormDataprops.push({\n                          label: fieldobject.label,\n                          name: fieldobject.name,\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType: fieldobject.type,\n                            inputOrOutput: fieldobject.inputoroutput\n                          }),\n                          options: optionsArraySorted,\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n                          height: fieldobject.height ? fieldobject.height : \"50%\",\n                          placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n                          defaultvalue: recordDataList[0][fieldobject.name],\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype\n                        });\n                      } else if (fieldobject.type == \"buttonpanel\") {\n                        let buttonsObj = fieldobject.globalfieldtypeparams.buttons;\n                        let buttonsArray = [];\n                        let buttonsArraySorted = [];\n\n                        for (let button in buttonsObj) {\n                          buttonsArray.push(buttonsObj[button]);\n                        }\n\n                        buttonsArraySorted = sortArray(buttonsArray, \"order\", \"integer\");\n                        let sectionfooterbuttonpanel = {\n                          label: \"footerbuttonpanel\",\n                          name: \"footerbuttonpanel\",\n                          value: \"footerbuttonpanel\",\n                          buttonarrayprops: buttonsArraySorted,\n                          type: \"buttonpanel\",\n                          width: \"100%\",\n                          placeholder: \"\",\n                          required: \"true\"\n                        };\n                        htmlFormDataprops.push(sectionfooterbuttonpanel);\n                      } else {\n                        htmlFormDataprops.push({\n                          label: fieldobject.label,\n                          name: fieldobject.name,\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType: fieldobject.type,\n                            inputOrOutput: fieldobject.inputoroutput\n                          }),\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n                          height: fieldobject.height ? fieldobject.height : \"50%\",\n                          placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n                          defaultvalue: recordDataList[0][fieldobject.name],\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype\n                        });\n                      }\n                    } else {\n                      console.log(fieldobject.name);\n\n                      if (objectMetadata.fields[fieldobject.name].type == \"select\") {\n                        let optionsObj = objectMetadata.fields[fieldobject.name].typeparams.options;\n                        let optionsArray = [];\n                        let optionsArraySorted = [];\n\n                        for (let fieldoption in optionsObj) {\n                          optionsArray.push(optionsObj[fieldoption]);\n                        }\n\n                        optionsArraySorted = sortArray(optionsArray, \"order\", \"integer\");\n                        htmlFormDataprops.push({\n                          label: objectMetadata.fields[fieldobject.name].label,\n                          name: fieldobject.name,\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType: objectMetadata.fields[fieldobject.name].type,\n                            inputOrOutput: fieldobject.inputoroutput\n                          }),\n                          options: optionsArraySorted,\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n                          height: fieldobject.height ? fieldobject.height : \"50%\",\n                          placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n                          // defaultvalue: fieldobject.defaultvalue,\n                          defaultvalue: recordDataList[0][fieldobject.name],\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype\n                        });\n                      } else if (fieldobject.type == \"buttonpanel\") {\n                        let buttonsObj = fieldobject.globalfieldtypeparams.buttons;\n                        let buttonsArray = [];\n                        let buttonsArraySorted = [];\n\n                        for (let button in buttonsObj) {\n                          buttonsArray.push(buttonsObj[button]);\n                        }\n\n                        buttonsArraySorted = sortArray(buttonsArray, \"order\", \"integer\");\n                        let sectionfooterbuttonpanel = {\n                          label: \"footerbuttonpanel\",\n                          name: \"footerbuttonpanel\",\n                          value: \"footerbuttonpanel\",\n                          buttonarrayprops: buttonsArraySorted,\n                          type: \"buttonpanel\",\n                          width: \"100%\",\n                          placeholder: \"\",\n                          required: \"true\"\n                        };\n                        htmlFormDataprops.push(sectionfooterbuttonpanel);\n                      } else {\n                        // if field is not globalfield and not select\n                        console.log(fieldobject);\n                        console.log(recordDataList[0]);\n                        htmlFormDataprops.push({\n                          label: objectMetadata.fields[fieldobject.name].label,\n                          name: fieldobject.name,\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType: objectMetadata.fields[fieldobject.name].type,\n                            inputOrOutput: fieldobject.inputoroutput\n                          }),\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n                          height: fieldobject.height ? fieldobject.height : \"50%\",\n                          placeholder: fieldobject.placeholder ? fieldobject.placeholder : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n                          defaultvalue: recordDataList[0][fieldobject.name],\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype\n                        });\n                      }\n                    } ///////////////\n\n\n                    console.log(htmlFormDataprops);\n                  }\n\n                  fieldsArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\",\n                    children: /*#__PURE__*/_jsxDEV(Htmlform, {\n                      inputChanged: this.inputChangeHandler,\n                      clkHandler: this.clickHandler,\n                      inputKeyUp: this.inputKeyupHandler,\n                      dataprops: htmlFormDataprops,\n                      bgcolor: \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 561,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 560,\n                    columnNumber: 21\n                  }, this));\n\n                  if (sortedsubSections[subsectionI].defaultactive == \"true\") {\n                    subsectionHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        width: \"100%\"\n                      },\n                      children: [sortedsubSections[subsectionI].hideheader == \"true\" ? \"\" : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"org-fr org-fai-c htmlformsubsectiondropdown\",\n                        style: {\n                          backgroundColor: \"#717171\",\n                          opacity: \"0.5\"\n                        },\n                        onClick: () => this.subsectionclkHanlder(sortedTabs[tabI].name, sortedSections[sectionI].name, sortedsubSections[subsectionI].name),\n                        children: [/*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n                          name: \"expand_less\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 591,\n                          columnNumber: 29\n                        }, this), sortedsubSections[subsectionI].label]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 577,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"htmlformsubsectioncontent org-fr org-fjc-s\",\n                        \"data-tabname\": sortedTabs[tabI].name,\n                        \"data-sectionname\": sortedSections[sectionI].name,\n                        \"data-subsectionname\": sortedsubSections[subsectionI].name,\n                        style: {\n                          display: \"flex\"\n                        },\n                        children: fieldsArrayHtml\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 595,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 573,\n                      columnNumber: 23\n                    }, this));\n                  } else {\n                    subsectionHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        width: \"100%\"\n                      },\n                      children: [sortedsubSections[subsectionI].hideheader == \"true\" ? \"\" : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"org-fr org-fai-c htmlformsubsectiondropdown\",\n                        style: {\n                          backgroundColor: \"#717171\",\n                          opacity: \"0.5\"\n                        },\n                        onClick: () => this.subsectionclkHanlder(sortedTabs[tabI].name, sortedSections[sectionI].name, sortedsubSections[subsectionI].name),\n                        children: [/*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n                          name: \"expand_more\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 628,\n                          columnNumber: 29\n                        }, this), sortedsubSections[subsectionI].label]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 614,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"htmlformsubsectioncontent org-fr org-fjc-s\",\n                        \"data-tabname\": sortedTabs[tabI].name,\n                        \"data-sectionname\": sortedSections[sectionI].name,\n                        \"data-subsectionname\": sortedsubSections[subsectionI].name,\n                        style: {\n                          display: \"none\"\n                        },\n                        children: fieldsArrayHtml\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 632,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 610,\n                      columnNumber: 23\n                    }, this));\n                  }\n                }\n\n                sectionHtml.push(subsectionHtml);\n              }\n\n              if (sortedTabs[tabI].defaultactive == \"true\") {\n                tabHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: \"flex\",\n                    flexWrap: \"wrap\",\n                    width: \"100%\"\n                  },\n                  \"data-tabname\": sortedTabs[tabI].name,\n                  className: \"inputrecorddatatabcontent\",\n                  children: sectionHtml\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 19\n                }, this));\n              } else {\n                tabHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: \"none\",\n                    flexWrap: \"wrap\",\n                    width: \"100%\"\n                  },\n                  \"data-tabname\": sortedTabs[tabI].name,\n                  className: \"inputrecorddatatabcontent\",\n                  children: sectionHtml\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 19\n                }, this));\n              } //  tabHtml.push(sectionHtml);\n\n            }\n\n            layoutMetadataHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\",\n                children: tabHtml\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 677,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 15\n            }, this));\n            console.log(htmlFormDataprops);\n            let mainPanelHtml = [];\n            mainPanelHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundColor: \"#F2F2F2\"\n              },\n              children: layoutMetadataHtml\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 15\n            }, this));\n            this.setState({\n              mainPanelHtml: []\n            }, () => {\n              this.setState({\n                mainPanelHtml: mainPanelHtml,\n                recorddata: recorddata\n              });\n            });\n          }\n        } else {\n          alert(\"please enter validate url\");\n        }\n      }\n    }\n\n    console.log(this.state); ////////////\n  }\n\n  render() {\n    let testtabArrayObject = {\n      student: {\n        defaultactive: \"true\",\n        label: \"student\",\n        name: \"student\",\n        order: \"0\"\n      },\n      subject: {\n        defaultactive: \"false\",\n        label: \"class\",\n        name: \"class\",\n        order: \"0\"\n      }\n    };\n    let testtabarray = [];\n\n    for (let i in testtabArrayObject) {\n      testtabarray.push(testtabArrayObject[i]);\n    }\n\n    let testsortedTabs = sortArray(testtabarray, \"order\", \"integer\");\n    console.log(testsortedTabs);\n    let testtabHtml = [];\n    let testtabObjectArray = [];\n    let testtabdataprops = [];\n    let testactiveTabName;\n\n    for (let tabI in testsortedTabs) {\n      if (testsortedTabs[tabI].defaultactive == \"true\") {\n        testactiveTabName = testsortedTabs[tabI].name;\n      }\n\n      testtabObjectArray.push({\n        label: testsortedTabs[tabI].label,\n        name: testsortedTabs[tabI].name\n      });\n    }\n\n    testtabHtml.push( /*#__PURE__*/_jsxDEV(Tabpanel, {\n      bgcolor: \"\",\n      onTabOpen: this.tabclkHanlder,\n      activeTabName: testactiveTabName,\n      dataprops: testtabObjectArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.htmlid,\n      children: this.state.mainPanelHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddataeditview.js"],"names":["React","Component","getRecorddata","createRecord","bulkcreateRecord","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","Htmlform","Tabpanel","GetLocalIcon","GetGoogleIcon","F","constructor","props","tabclkHanlder","tabLabel","tabName","tabType","console","log","inputrecorddatatabcontentArray","document","getElementsByClassName","i","length","dataset","tabname","style","display","subsectionclkHanlder","sectionName","subsectionName","isValid","htmlformsubsectioncontentArray","sectionname","errorelements","j","childrenI","getElementsByTagName","children","inputElementValidate","subsectionname","htmllement","required","value","trim","undefined","borderBottomColor","borderBottomWidth","newDiv","createElement","newContent","createTextNode","setAttribute","appendChild","insertAdjacentElement","borderRightColor","borderRightWidth","inputChangeHandler","inputName","inputValue","recorddata","state","setState","clickHandler","localdata","clickprops","inputKeyupHandler","mainPanelHtml","componentDidMount","uigenArray","orgname","userprofileid","userid","recordid","tablename","actionname","compprops","routerpropsparams","routerprops","match","params","getRecordNewMetadataAndDatafromServer","userProfileId","userId","tableName","datasortparambeginswith","datasortparamequalsto","action","viewName","recordId","dataParams","objectmetadataParams","layoutmetadataParams","objectName","objectData","keyConditions","field","expression","filterConditions","pageSize","limit","exclusiveStartKey","dataresult","isSuccess","alert","message","recordDataList","dataprops","Items","objectmetadataresult","objectMetadata","data","layoutmetadataresult","layoutMetadata","layoutMetadataHtml","htmlFormDataprops","tabArrayObject","tabs","tabarray","push","sortedTabs","tabHtml","tabObjectArray","tabdataprops","activeTabName","tabI","defaultactive","name","label","activetab","sectionarray","sections","sortedSections","sectionHtml","sectionI","subsectionarray","subsections","sortedsubSections","subsectionHtml","subsectionI","fieldsarray","fields","sortedFields","fieldsArrayHtml","fieldI","fieldobject","isglobalfield","type","optionsObj","typeparams","options","optionsArray","optionsArraySorted","fieldoption","fieldType","inputOrOutput","inputoroutput","width","height","placeholder","readonly","defaultvalue","clientstatename","clientstatetype","buttonsObj","globalfieldtypeparams","buttons","buttonsArray","buttonsArraySorted","button","sectionfooterbuttonpanel","buttonarrayprops","hideheader","backgroundColor","opacity","flexWrap","render","testtabArrayObject","student","order","subject","testtabarray","testsortedTabs","testtabHtml","testtabObjectArray","testtabdataprops","testactiveTabName","htmlid"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport {\n  sortArray,\n  fieldTypeHtmltoDBmapping,\n  getLocalData,\n  serverButtonHandler,\n} from \"../js/index\";\nimport Htmlform from \"./htmlformnew\";\nimport Tabpanel from \"./tabpanel\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n/*\n  <Recorddataeditview\n          {...this.props}\n          compprops={{\n            orgname: \"gouthama\",\n            userprofileid: \"gouthama-admin\",\n            userid: \"\",\n            parenttablename: \"\",\n            tablename: \"student2\",\n            parentrecid: \"\",\n            recordid: \"AC-fdf-fdfdfdd\",\n            actionname: \"edit\",\n          }}\n          styleprops={{\n            width: \"100%\",\n            height: \"30vh\",\n            backgroundColor: \"\",\n            overflow: \"auto\",\n          }}\n        />\n\n*/\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { mainPanelHtml: [], recorddata: {} };\n  }\n\n  async componentDidMount() {\n    let uigenArray = document.getElementsByClassName(\"uigenspinner\");\n\n    for (let i = 0; i < uigenArray.length; i++) {\n      uigenArray[i].style.display = \"block\";\n    }\n\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      recordid,\n      tablename,\n      actionname,\n    } = this.props.compprops;\n    let routerpropsparams = this.props.routerprops.match.params;\n    console.log(this.props.compprops);\n    if (recordid) {\n      this.getRecordNewMetadataAndDatafromServer({\n        orgname: orgname,\n        userProfileId: userprofileid,\n        userId: userid,\n        tableName: tablename,\n        datasortparambeginswith: \"\",\n        datasortparamequalsto: \"\",\n        action: actionname,\n        viewName: \"\",\n        recordId: recordid,\n      });\n    }\n\n    for (let i = 0; i < uigenArray.length; i++) {\n      uigenArray[i].style.display = \"none\";\n    }\n  }\n\n  tabclkHanlder = (props) => {\n    let { tabLabel, tabName, tabType } = props;\n    console.log(props);\n    let inputrecorddatatabcontentArray = document.getElementsByClassName(\n      \"inputrecorddatatabcontent\"\n    );\n\n    for (let i = 0; i < inputrecorddatatabcontentArray.length; i++) {\n      console.log(inputrecorddatatabcontentArray[i]);\n      if (tabName == inputrecorddatatabcontentArray[i].dataset.tabname) {\n        inputrecorddatatabcontentArray[i].style.display = \"flex\";\n      } else {\n        inputrecorddatatabcontentArray[i].style.display = \"none\";\n      }\n    }\n  };\n  subsectionclkHanlder = (tabName, sectionName, subsectionName) => {\n    let isValid = true;\n\n    let htmlformsubsectioncontentArray = document.getElementsByClassName(\n      \"htmlformsubsectioncontent\"\n    );\n\n    for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n      console.log(htmlformsubsectioncontentArray[i]);\n      if (\n        tabName == htmlformsubsectioncontentArray[i].dataset.tabname &&\n        sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname\n      ) {\n        if (htmlformsubsectioncontentArray[i].style.display == \"flex\") {\n          //reset subsection errors\n          let errorelements = htmlformsubsectioncontentArray[\n            i\n          ].getElementsByClassName(\"htmlforminputitemerror\");\n          for (let j = 0; j < errorelements.length; j++) {\n            errorelements[j].style.display = \"none\";\n          }\n\n          //validate childs\n          for (let childrenI in htmlformsubsectioncontentArray[\n            i\n          ].getElementsByTagName(\"*\")) {\n            let children = htmlformsubsectioncontentArray[\n              i\n            ].getElementsByTagName(\"*\")[childrenI];\n            console.log(children);\n            if (this.inputElementValidate(children) == false) {\n              isValid = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (isValid == true) {\n      for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n        console.log(htmlformsubsectioncontentArray[i]);\n        if (\n          tabName == htmlformsubsectioncontentArray[i].dataset.tabname &&\n          sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname\n        ) {\n          if (\n            subsectionName ==\n            htmlformsubsectioncontentArray[i].dataset.subsectionname\n          ) {\n            htmlformsubsectioncontentArray[i].style.display = \"flex\";\n          } else {\n            htmlformsubsectioncontentArray[i].style.display = \"none\";\n          }\n        }\n      }\n    }\n  };\n\n  inputElementValidate = (htmllement) => {\n    let isValid = true;\n    if (htmllement && htmllement.required) {\n      if (htmllement.value.trim() == \"\" || htmllement.value == undefined) {\n        htmllement.style.borderBottomColor = \"red\";\n        htmllement.style.borderBottomWidth = \"2px\";\n        var newDiv = document.createElement(\"div\");\n        var newContent = document.createTextNode(\"This is required\");\n        newDiv.setAttribute(\"class\", \"htmlforminputitemerror\");\n        newDiv.appendChild(newContent);\n\n        htmllement.insertAdjacentElement(\"afterend\", newDiv);\n        isValid = false;\n      } else {\n        htmllement.style.borderBottomColor = htmllement.style.borderRightColor;\n        htmllement.style.borderBottomWidth = htmllement.style.borderRightWidth;\n      }\n    }\n    return isValid;\n  };\n\n  inputChangeHandler = (props) => {\n    let { inputName, inputValue } = props;\n    let recorddata = this.state.recorddata;\n    recorddata[inputName] = inputValue;\n    this.setState({ recorddata: recorddata });\n    console.log(this.state);\n  };\n\n  clickHandler = (props) => {\n    console.log(props);\n    let localdata = getLocalData(this.props);\n    console.log(this.state.recorddata);\n    this.props.serverButtonHandler({\n      localdata: localdata,\n      clickprops: props,\n      recorddata: this.state.recorddata,\n    });\n  };\n\n  inputKeyupHandler = () => {};\n\n  async getRecordNewMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      recordId,\n    } = props;\n\n    let recorddata = {};\n    let dataParams = {};\n    let objectmetadataParams = {};\n    let layoutmetadataParams = {};\n\n    dataParams = {\n      objectName: tableName,\n      objectData: {},\n      keyConditions: [\n        { field: \"orgname\", value: orgname, expression: \"=\" },\n        {\n          field: \"id\",\n          value: recordId,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n\n    // get object metadata for field types to show on ui\n    objectmetadataParams = {\n      objectName: \"tableinfo\",\n      objectData: {},\n      keyConditions: [\n        { field: \"orgname\", value: orgname, expression: \"=\" },\n        {\n          field: \"id\",\n          value: tableName,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n\n    // get layout metadata for order of the fields\n    layoutmetadataParams = {\n      objectName: \"layoutperuserprofile\",\n      objectData: {},\n      keyConditions: [\n        { field: \"userprofileid\", value: userProfileId, expression: \"=\" },\n        {\n          field: \"tableid\",\n          value: tableName + \"-\" + action,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n    console.log(dataParams);\n    console.log(layoutmetadataParams);\n    let dataresult = await getRecorddata(dataParams);\n    if (dataresult.isSuccess === \"false\") {\n      alert(\"data\" + dataresult.message);\n    } else {\n      let recordDataList = dataresult.dataprops.Items;\n      recorddata = recordDataList[0];\n      console.log(recordDataList[0]);\n      // get object metadata\n      let objectmetadataresult = await getRecorddata(objectmetadataParams);\n      if (objectmetadataresult.isSuccess === \"false\") {\n        alert(\"layoutmetadata\" + objectmetadataresult.message);\n      } else {\n        // console.log(objectmetadataresult.dataprops.Items);\n        if (objectmetadataresult.dataprops.Items[0]) {\n          let objectMetadata = objectmetadataresult.dataprops.Items[0].data;\n\n          // get layout metadata\n          let layoutmetadataresult = await getRecorddata(layoutmetadataParams);\n          if (layoutmetadataresult.isSuccess === \"false\") {\n            alert(\"layoutmetadata\" + layoutmetadataresult.message);\n          } else {\n            let layoutMetadata =\n              layoutmetadataresult.dataprops.Items[0].dataprops;\n            console.log(layoutMetadata);\n\n            let layoutMetadataHtml = [];\n\n            let htmlFormDataprops = [];\n\n            let tabArrayObject = layoutMetadata.tabs;\n\n            console.log(tabArrayObject);\n            let tabarray = [];\n            for (let i in tabArrayObject) {\n              tabarray.push(tabArrayObject[i]);\n            }\n            let sortedTabs = sortArray(tabarray, \"order\", \"integer\");\n            console.log(sortedTabs);\n            let tabHtml = [];\n            let tabObjectArray = [];\n            let tabdataprops = [];\n            let activeTabName;\n            for (let tabI in sortedTabs) {\n              if (sortedTabs[tabI].defaultactive == \"true\") {\n                activeTabName = sortedTabs[tabI].name;\n              }\n              tabObjectArray.push({\n                label: sortedTabs[tabI].label,\n                name: sortedTabs[tabI].name,\n              });\n            }\n\n            if (tabObjectArray.length > 1) {\n              tabHtml.push(\n                <Tabpanel\n                  bgcolor=\"\"\n                  onTabOpen={this.tabclkHanlder}\n                  compprops={{ activetab: activeTabName, tabs: tabObjectArray }}\n                  styleprops={{}}\n                />\n              );\n            }\n\n            for (let tabI in sortedTabs) {\n              let sectionarray = [];\n              for (let i in sortedTabs[tabI].sections) {\n                sectionarray.push(sortedTabs[tabI].sections[i]);\n              }\n              let sortedSections = sortArray(sectionarray, \"order\", \"integer\");\n              console.log(sortedSections);\n              let sectionHtml = [];\n              for (let sectionI in sortedSections) {\n                let subsectionarray = [];\n                for (let i in sortedSections[sectionI].subsections) {\n                  subsectionarray.push(sortedSections[sectionI].subsections[i]);\n                }\n\n                let sortedsubSections = sortArray(\n                  subsectionarray,\n                  \"order\",\n                  \"integer\"\n                );\n                console.log(sortedsubSections);\n                let subsectionHtml = [];\n                for (let subsectionI in sortedsubSections) {\n                  let fieldsarray = [];\n                  for (let i in sortedsubSections[subsectionI].fields) {\n                    fieldsarray.push(sortedsubSections[subsectionI].fields[i]);\n                  }\n\n                  let sortedFields = sortArray(fieldsarray, \"order\", \"integer\");\n                  console.log(sortedFields);\n\n                  let fieldsArrayHtml = [];\n                  htmlFormDataprops = [];\n                  for (let fieldI in sortedFields) {\n                    let fieldobject = sortedFields[fieldI];\n\n                    ////////////////\n                    if (fieldobject.isglobalfield == \"true\") {\n                      if (fieldobject.type == \"select\") {\n                        let optionsObj = fieldobject.typeparams.options;\n                        let optionsArray = [];\n                        let optionsArraySorted = [];\n                        for (let fieldoption in optionsObj) {\n                          optionsArray.push(optionsObj[fieldoption]);\n                        }\n                        optionsArraySorted = sortArray(\n                          optionsArray,\n                          \"order\",\n                          \"integer\"\n                        );\n\n                        htmlFormDataprops.push({\n                          label: fieldobject.label,\n                          name: fieldobject.name,\n\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType: fieldobject.type,\n                            inputOrOutput: fieldobject.inputoroutput,\n                          }),\n\n                          options: optionsArraySorted,\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                          height: fieldobject.height\n                            ? fieldobject.height\n                            : \"50%\",\n\n                          placeholder: fieldobject.placeholder\n                            ? fieldobject.placeholder\n                            : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n                          defaultvalue: recordDataList[0][fieldobject.name],\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype,\n                        });\n                      } else if (fieldobject.type == \"buttonpanel\") {\n                        let buttonsObj =\n                          fieldobject.globalfieldtypeparams.buttons;\n                        let buttonsArray = [];\n                        let buttonsArraySorted = [];\n                        for (let button in buttonsObj) {\n                          buttonsArray.push(buttonsObj[button]);\n                        }\n                        buttonsArraySorted = sortArray(\n                          buttonsArray,\n                          \"order\",\n                          \"integer\"\n                        );\n\n                        let sectionfooterbuttonpanel = {\n                          label: \"footerbuttonpanel\",\n                          name: \"footerbuttonpanel\",\n                          value: \"footerbuttonpanel\",\n                          buttonarrayprops: buttonsArraySorted,\n                          type: \"buttonpanel\",\n                          width: \"100%\",\n                          placeholder: \"\",\n                          required: \"true\",\n                        };\n                        htmlFormDataprops.push(sectionfooterbuttonpanel);\n                      } else {\n                        htmlFormDataprops.push({\n                          label: fieldobject.label,\n                          name: fieldobject.name,\n\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType: fieldobject.type,\n                            inputOrOutput: fieldobject.inputoroutput,\n                          }),\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                          height: fieldobject.height\n                            ? fieldobject.height\n                            : \"50%\",\n\n                          placeholder: fieldobject.placeholder\n                            ? fieldobject.placeholder\n                            : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n                          defaultvalue: recordDataList[0][fieldobject.name],\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype,\n                        });\n                      }\n                    } else {\n                      console.log(fieldobject.name);\n                      if (\n                        objectMetadata.fields[fieldobject.name].type == \"select\"\n                      ) {\n                        let optionsObj =\n                          objectMetadata.fields[fieldobject.name].typeparams\n                            .options;\n                        let optionsArray = [];\n                        let optionsArraySorted = [];\n                        for (let fieldoption in optionsObj) {\n                          optionsArray.push(optionsObj[fieldoption]);\n                        }\n                        optionsArraySorted = sortArray(\n                          optionsArray,\n                          \"order\",\n                          \"integer\"\n                        );\n\n                        htmlFormDataprops.push({\n                          label: objectMetadata.fields[fieldobject.name].label,\n                          name: fieldobject.name,\n\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType:\n                              objectMetadata.fields[fieldobject.name].type,\n                            inputOrOutput: fieldobject.inputoroutput,\n                          }),\n                          options: optionsArraySorted,\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                          height: fieldobject.height\n                            ? fieldobject.height\n                            : \"50%\",\n                          placeholder: fieldobject.placeholder\n                            ? fieldobject.placeholder\n                            : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n                          // defaultvalue: fieldobject.defaultvalue,\n                          defaultvalue: recordDataList[0][fieldobject.name],\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype,\n                        });\n                      } else if (fieldobject.type == \"buttonpanel\") {\n                        let buttonsObj =\n                          fieldobject.globalfieldtypeparams.buttons;\n                        let buttonsArray = [];\n                        let buttonsArraySorted = [];\n                        for (let button in buttonsObj) {\n                          buttonsArray.push(buttonsObj[button]);\n                        }\n                        buttonsArraySorted = sortArray(\n                          buttonsArray,\n                          \"order\",\n                          \"integer\"\n                        );\n\n                        let sectionfooterbuttonpanel = {\n                          label: \"footerbuttonpanel\",\n                          name: \"footerbuttonpanel\",\n                          value: \"footerbuttonpanel\",\n                          buttonarrayprops: buttonsArraySorted,\n                          type: \"buttonpanel\",\n                          width: \"100%\",\n                          placeholder: \"\",\n                          required: \"true\",\n                        };\n                        htmlFormDataprops.push(sectionfooterbuttonpanel);\n                      } else {\n                        // if field is not globalfield and not select\n                        console.log(fieldobject);\n                        console.log(recordDataList[0]);\n                        htmlFormDataprops.push({\n                          label: objectMetadata.fields[fieldobject.name].label,\n                          name: fieldobject.name,\n\n                          type: fieldTypeHtmltoDBmapping({\n                            fieldType:\n                              objectMetadata.fields[fieldobject.name].type,\n                            inputOrOutput: fieldobject.inputoroutput,\n                          }),\n\n                          width: fieldobject.width ? fieldobject.width : \"50%\",\n\n                          height: fieldobject.height\n                            ? fieldobject.height\n                            : \"50%\",\n\n                          placeholder: fieldobject.placeholder\n                            ? fieldobject.placeholder\n                            : \"\",\n                          required: fieldobject.required,\n                          readonly: action == \"view\" ? \"true\" : \"false\",\n\n                          defaultvalue: recordDataList[0][fieldobject.name],\n\n                          clientstatename: fieldobject.clientstatename,\n                          clientstatetype: fieldobject.clientstatetype,\n                        });\n                      }\n                    }\n                    ///////////////\n                    console.log(htmlFormDataprops);\n                  }\n\n                  fieldsArrayHtml.push(\n                    <div className=\"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\">\n                      <Htmlform\n                        inputChanged={this.inputChangeHandler}\n                        clkHandler={this.clickHandler}\n                        inputKeyUp={this.inputKeyupHandler}\n                        dataprops={htmlFormDataprops}\n                        bgcolor=\"\"\n                      />\n                    </div>\n                  );\n\n                  if (sortedsubSections[subsectionI].defaultactive == \"true\") {\n                    subsectionHtml.push(\n                      <div style={{ width: \"100%\" }}>\n                        {sortedsubSections[subsectionI].hideheader == \"true\" ? (\n                          \"\"\n                        ) : (\n                          <div\n                            className=\"org-fr org-fai-c htmlformsubsectiondropdown\"\n                            style={{\n                              backgroundColor: \"#717171\",\n                              opacity: \"0.5\",\n                            }}\n                            onClick={() =>\n                              this.subsectionclkHanlder(\n                                sortedTabs[tabI].name,\n                                sortedSections[sectionI].name,\n                                sortedsubSections[subsectionI].name\n                              )\n                            }\n                          >\n                            <GetGoogleIcon name=\"expand_less\" />\n                            {sortedsubSections[subsectionI].label}\n                          </div>\n                        )}\n                        <div\n                          className=\"htmlformsubsectioncontent org-fr org-fjc-s\"\n                          data-tabname={sortedTabs[tabI].name}\n                          data-sectionname={sortedSections[sectionI].name}\n                          data-subsectionname={\n                            sortedsubSections[subsectionI].name\n                          }\n                          style={{ display: \"flex\" }}\n                        >\n                          {fieldsArrayHtml}\n                        </div>\n                      </div>\n                    );\n                  } else {\n                    subsectionHtml.push(\n                      <div style={{ width: \"100%\" }}>\n                        {sortedsubSections[subsectionI].hideheader == \"true\" ? (\n                          \"\"\n                        ) : (\n                          <div\n                            className=\"org-fr org-fai-c htmlformsubsectiondropdown\"\n                            style={{\n                              backgroundColor: \"#717171\",\n                              opacity: \"0.5\",\n                            }}\n                            onClick={() =>\n                              this.subsectionclkHanlder(\n                                sortedTabs[tabI].name,\n                                sortedSections[sectionI].name,\n                                sortedsubSections[subsectionI].name\n                              )\n                            }\n                          >\n                            <GetGoogleIcon name=\"expand_more\" />\n                            {sortedsubSections[subsectionI].label}\n                          </div>\n                        )}\n                        <div\n                          className=\"htmlformsubsectioncontent org-fr org-fjc-s\"\n                          data-tabname={sortedTabs[tabI].name}\n                          data-sectionname={sortedSections[sectionI].name}\n                          data-subsectionname={\n                            sortedsubSections[subsectionI].name\n                          }\n                          style={{ display: \"none\" }}\n                        >\n                          {fieldsArrayHtml}\n                        </div>\n                      </div>\n                    );\n                  }\n                }\n                sectionHtml.push(subsectionHtml);\n              }\n\n              if (sortedTabs[tabI].defaultactive == \"true\") {\n                tabHtml.push(\n                  <div\n                    style={{ display: \"flex\", flexWrap: \"wrap\", width: \"100%\" }}\n                    data-tabname={sortedTabs[tabI].name}\n                    className=\"inputrecorddatatabcontent\"\n                  >\n                    {sectionHtml}\n                  </div>\n                );\n              } else {\n                tabHtml.push(\n                  <div\n                    style={{ display: \"none\", flexWrap: \"wrap\", width: \"100%\" }}\n                    data-tabname={sortedTabs[tabI].name}\n                    className=\"inputrecorddatatabcontent\"\n                  >\n                    {sectionHtml}\n                  </div>\n                );\n              }\n\n              //  tabHtml.push(sectionHtml);\n            }\n\n            layoutMetadataHtml.push(\n              <div>\n                <div className=\"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb\">\n                  {tabHtml}\n                </div>\n              </div>\n            );\n\n            console.log(htmlFormDataprops);\n\n            let mainPanelHtml = [];\n            mainPanelHtml.push(\n              <div\n                style={{\n                  backgroundColor: \"#F2F2F2\",\n                }}\n              >\n                {layoutMetadataHtml}\n              </div>\n            );\n\n            this.setState({ mainPanelHtml: [] }, () => {\n              this.setState({\n                mainPanelHtml: mainPanelHtml,\n                recorddata: recorddata,\n              });\n            });\n          }\n        } else {\n          alert(\"please enter validate url\");\n        }\n      }\n    }\n    console.log(this.state);\n\n    ////////////\n  }\n\n  render() {\n    let testtabArrayObject = {\n      student: {\n        defaultactive: \"true\",\n        label: \"student\",\n        name: \"student\",\n        order: \"0\",\n      },\n      subject: {\n        defaultactive: \"false\",\n        label: \"class\",\n        name: \"class\",\n        order: \"0\",\n      },\n    };\n    let testtabarray = [];\n    for (let i in testtabArrayObject) {\n      testtabarray.push(testtabArrayObject[i]);\n    }\n    let testsortedTabs = sortArray(testtabarray, \"order\", \"integer\");\n    console.log(testsortedTabs);\n    let testtabHtml = [];\n    let testtabObjectArray = [];\n    let testtabdataprops = [];\n    let testactiveTabName;\n    for (let tabI in testsortedTabs) {\n      if (testsortedTabs[tabI].defaultactive == \"true\") {\n        testactiveTabName = testsortedTabs[tabI].name;\n      }\n      testtabObjectArray.push({\n        label: testsortedTabs[tabI].label,\n        name: testsortedTabs[tabI].name,\n      });\n    }\n\n    testtabHtml.push(\n      <Tabpanel\n        bgcolor=\"\"\n        onTabOpen={this.tabclkHanlder}\n        activeTabName={testactiveTabName}\n        dataprops={testtabObjectArray}\n      />\n    );\n    return (\n      <div id={this.props.htmlid}>\n        {this.state.mainPanelHtml}\n        {/* <div>=={testtabHtml}==</div> */}\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}