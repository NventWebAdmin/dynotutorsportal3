{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/callcenter.js\";\nimport React from \"react\"; //import socket from \"./Socketio\";\n\nimport socketIOClient from \"socket.io-client\";\nimport * as Twilio from \"twilio-client\";\nimport { configdata } from \"../config\"; //const ENDPOINT = \"http://127.0.0.1:4001\";\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet ENDPOINT, socket;\n\nif (configdata().twiliocallcenterserverurl != \"\") {\n  ENDPOINT = configdata().twiliocallcenterserverurl;\n  socket = socketIOClient(ENDPOINT);\n}\n\nlet device = undefined; //JSON.parse(localStorage.getItem(\"token\"));\n//localStorage.setItem(\"token\", JSON.stringify(\"Smith\"));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      console.log(e.target.name);\n      let x = e.target.name;\n\n      if (x == \"tophoneno\") {\n        this.setState({\n          tophoneno: e.target.value\n        });\n      }\n\n      if (x == \"code\") {\n        this.setState({\n          code: e.target.value\n        });\n      }\n\n      if (x == \"usernumber\") {\n        this.setState({\n          usernumber: e.target.value\n        });\n      }\n\n      if (x == \"username\") {\n        this.setState({\n          username: e.target.value\n        });\n      }\n\n      console.log(this.state);\n    };\n\n    this.answerCall = x => {\n      console.log(x);\n      socket.emit(\"answercall\", {\n        callSid: x,\n        client: this.state.username\n      });\n    };\n\n    this.rejectCall = x => {\n      socket.emit(\"rejectcall\", {\n        callSid: x\n      });\n    };\n\n    this.disconnectCall = x => {\n      console.log(x);\n      socket.emit(\"disconnectcall\", {\n        callSid: x,\n        client: this.state.username\n      });\n    };\n\n    this.dialCall = () => {\n      socket.emit(\"dialcall\", {\n        phoneno: this.state.tophoneno,\n        client: this.state.username\n      });\n    };\n\n    this.disconnectOwnCall = x => {\n      console.log(this.state.dialcallsid);\n      console.log(this.state.username);\n      socket.emit(\"disconnectownCall\", {\n        callSid: this.state.dialcallsid,\n        client: this.state.username\n      });\n    };\n\n    this.connectTwilioClienttoServer = twilioClientToken => {\n      console.log(twilioClientToken);\n      device = new Twilio.Device(twilioClientToken, {\n        debug: true\n      });\n      device.on(\"error\", err => {\n        console.log(err);\n      });\n      device.on(\"incoming\", connection => {\n        console.log(\"incoming frm twilio\");\n        console.log(connection.parameters.CallSid);\n        this.setState({\n          callSid: connection.parameters.CallSid\n        });\n        connection.accept();\n      });\n    };\n\n    this.state = {\n      tophoneno: \"\",\n      code: \"\",\n      fromphoneno: \"\",\n      callstatus: \"\",\n      callSid: \"\",\n      username: \"\",\n      usernumber: \"\",\n      callconnectionArray: [],\n      dialstatus: \"\",\n      dialcallsid: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let compprops = this.props.compprops; // console.log(compprops.userobjectname);\n    // console.log(compprops.userid);s\n\n    let username;\n\n    if (compprops) {\n      username = compprops.userid;\n    }\n\n    this.setState({\n      username: username\n    });\n    socket.emit(\"registerfortwiliotoken\", {\n      username: username\n    });\n    socket.on(\"logintoken\", data => {\n      console.log(\"logintoken\" + data);\n    });\n    socket.on(\"twilioclienttoken\", data => {\n      console.log(\"twilioclienttoken\");\n      console.log(data); // console.log(\"isverfiied\" + data.isverified);\n\n      this.connectTwilioClienttoServer(data.token);\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"socket disconnected\");\n    });\n    socket.on(\"call-new\", req => {\n      let data = req.data;\n      console.log(\"call connected\");\n      console.log(data);\n      console.log(data.From);\n      console.log(data.To);\n      console.log(data.Direction);\n      console.log(data.Called);\n      console.log(data.CallSid);\n      console.log(data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n      let isexistingcall = false;\n\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == data.From) {\n          callconnectionArray[i].callstatus = \"ringing\";\n          callconnectionArray[i].callSid = data.CallSid;\n          isexistingcall = true;\n        }\n      }\n\n      if (isexistingcall == false) {\n        let callconnection = {};\n        callconnection.fromphoneno = data.From;\n        callconnection.callstatus = \"ringing\";\n        callconnection.callSid = data.CallSid;\n        callconnectionArray.push(callconnection);\n      }\n\n      this.setState({\n        callconnectionArray: callconnectionArray\n      });\n    });\n    socket.on(\"call-inque\", req => {\n      console.log(\" call is in queue\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"inqueue\";\n        }\n      }\n\n      this.setState({\n        callconnectionArray: callconnectionArray\n      });\n    });\n    socket.on(\"call-answer\", req => {\n      console.log(\" call is in answer\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].callSid == req.data.callsid) {\n          callconnectionArray[i].callstatus = \"answering\";\n          callconnectionArray[i].answeringuser = req.data.client;\n        }\n      }\n\n      this.setState({\n        callconnectionArray: callconnectionArray\n      });\n    });\n    socket.on(\"call-disc\", req => {\n      console.log(\" call disc from twilio server\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      console.log(req.data.Duration);\n      let callconnectionArray = this.state.callconnectionArray;\n\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"disconnected\";\n        }\n      }\n\n      this.setState({\n        callconnectionArray: callconnectionArray\n      });\n    });\n    socket.on(\"dialowncall\", req => {\n      console.log(\" dialowncall\");\n      console.log(req.data.CallSid);\n      console.log(req.data.client);\n      let callconnectionArray = this.state.username;\n\n      if (this.state.username == req.data.client) {\n        this.setState({\n          dialstatus: \"dialing\",\n          dialcallsid: req.data.CallSid\n        });\n      }\n    });\n  }\n\n  render() {\n    console.log(\"callcenterprops\" + JSON.stringify(this.props));\n    let {\n      callconnectionArray\n    } = this.state;\n    let callconnectionArrayHtml = [];\n\n    for (let i in callconnectionArray) {\n      console.log(callconnectionArray[i]);\n      callconnectionArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [callconnectionArray[i].callstatus == \"ringing\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [callconnectionArray[i].fromphoneno, \" is calling\"]\n        }, void 0, true) : \"\", callconnectionArray[i].callstatus == \"inqueue\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [callconnectionArray[i].fromphoneno, \" is inqueue\"]\n        }, void 0, true) : \"\", callconnectionArray[i].callstatus == \"disconnected\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [callconnectionArray[i].fromphoneno, \" is disconnected\"]\n        }, void 0, true) : \"\", callconnectionArray[i].callstatus == \"answering\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [callconnectionArray[i].fromphoneno, \" is answering by\", \" \", callconnectionArray[i].answeringuser]\n        }, void 0, true) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.answerCall(callconnectionArray[i].callSid),\n            children: \"Answer call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.disconnectCall(callconnectionArray[i].callSid),\n            children: \"Disconnect call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.suggestCall(callconnectionArray[i].callSid),\n            children: \"Suggest call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.rejectCall(callconnectionArray[i].callSid),\n            children: \"Reject call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Dialing Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"tophoneno\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.dialCall,\n          children: \"Dial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.disconnectOwnCall,\n          children: \"Disconnect call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), this.state.dialstatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), callconnectionArrayHtml]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/callcenter.js"],"names":["React","socketIOClient","Twilio","configdata","ENDPOINT","socket","twiliocallcenterserverurl","device","undefined","App","Component","constructor","props","handleChange","e","console","log","target","name","x","setState","tophoneno","value","code","usernumber","username","state","answerCall","emit","callSid","client","rejectCall","disconnectCall","dialCall","phoneno","disconnectOwnCall","dialcallsid","connectTwilioClienttoServer","twilioClientToken","Device","debug","on","err","connection","parameters","CallSid","accept","fromphoneno","callstatus","callconnectionArray","dialstatus","componentDidMount","compprops","userid","data","token","req","From","To","Direction","Called","CallStatus","isexistingcall","i","callconnection","push","callsid","answeringuser","Duration","render","JSON","stringify","callconnectionArrayHtml","suggestCall"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,WAA3B,C,CACA;;;;AACA,IAAIC,QAAJ,EAAcC,MAAd;;AACA,IAAIF,UAAU,GAAGG,yBAAb,IAA0C,EAA9C,EAAkD;AAChDF,EAAAA,QAAQ,GAAGD,UAAU,GAAGG,yBAAxB;AACAD,EAAAA,MAAM,GAAGJ,cAAc,CAACG,QAAD,CAAvB;AACD;;AACD,IAAIG,MAAM,GAAGC,SAAb,C,CACA;AACA;;AAEA,MAAMC,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA+HnBC,YA/HmB,GA+HHC,CAAD,IAAO;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,IAArB;AACA,UAAIC,CAAC,GAAGL,CAAC,CAACG,MAAF,CAASC,IAAjB;;AACA,UAAIC,CAAC,IAAI,WAAT,EAAsB;AACpB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,SAAS,EAAEP,CAAC,CAACG,MAAF,CAASK;AAAtB,SAAd;AACD;;AACD,UAAIH,CAAC,IAAI,MAAT,EAAiB;AACf,aAAKC,QAAL,CAAc;AAAEG,UAAAA,IAAI,EAAET,CAAC,CAACG,MAAF,CAASK;AAAjB,SAAd;AACD;;AACD,UAAIH,CAAC,IAAI,YAAT,EAAuB;AACrB,aAAKC,QAAL,CAAc;AAAEI,UAAAA,UAAU,EAAEV,CAAC,CAACG,MAAF,CAASK;AAAvB,SAAd;AACD;;AACD,UAAIH,CAAC,IAAI,UAAT,EAAqB;AACnB,aAAKC,QAAL,CAAc;AAAEK,UAAAA,QAAQ,EAAEX,CAAC,CAACG,MAAF,CAASK;AAArB,SAAd;AACD;;AAEDP,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKU,KAAjB;AACD,KAhJkB;;AAAA,SAkJnBC,UAlJmB,GAkJLR,CAAD,IAAO;AAClBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACAd,MAAAA,MAAM,CAACuB,IAAP,CAAY,YAAZ,EAA0B;AACxBC,QAAAA,OAAO,EAAEV,CADe;AAExBW,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWD;AAFK,OAA1B;AAID,KAxJkB;;AAAA,SA0JnBM,UA1JmB,GA0JLZ,CAAD,IAAO;AAClBd,MAAAA,MAAM,CAACuB,IAAP,CAAY,YAAZ,EAA0B;AAAEC,QAAAA,OAAO,EAAEV;AAAX,OAA1B;AACD,KA5JkB;;AAAA,SA8JnBa,cA9JmB,GA8JDb,CAAD,IAAO;AACtBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACAd,MAAAA,MAAM,CAACuB,IAAP,CAAY,gBAAZ,EAA8B;AAC5BC,QAAAA,OAAO,EAAEV,CADmB;AAE5BW,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWD;AAFS,OAA9B;AAID,KApKkB;;AAAA,SAsKnBQ,QAtKmB,GAsKR,MAAM;AACf5B,MAAAA,MAAM,CAACuB,IAAP,CAAY,UAAZ,EAAwB;AACtBM,QAAAA,OAAO,EAAE,KAAKR,KAAL,CAAWL,SADE;AAEtBS,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWD;AAFG,OAAxB;AAID,KA3KkB;;AAAA,SA6KnBU,iBA7KmB,GA6KEhB,CAAD,IAAO;AACzBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKU,KAAL,CAAWU,WAAvB;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKU,KAAL,CAAWD,QAAvB;AACApB,MAAAA,MAAM,CAACuB,IAAP,CAAY,mBAAZ,EAAiC;AAC/BC,QAAAA,OAAO,EAAE,KAAKH,KAAL,CAAWU,WADW;AAE/BN,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWD;AAFY,OAAjC;AAID,KApLkB;;AAAA,SAsLnBY,2BAtLmB,GAsLYC,iBAAD,IAAuB;AACnDvB,MAAAA,OAAO,CAACC,GAAR,CAAYsB,iBAAZ;AACA/B,MAAAA,MAAM,GAAG,IAAIL,MAAM,CAACqC,MAAX,CAAkBD,iBAAlB,EAAqC;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAArC,CAAT;AACAjC,MAAAA,MAAM,CAACkC,EAAP,CAAU,OAAV,EAAoBC,GAAD,IAAS;AAC1B3B,QAAAA,OAAO,CAACC,GAAR,CAAY0B,GAAZ;AACD,OAFD;AAGAnC,MAAAA,MAAM,CAACkC,EAAP,CAAU,UAAV,EAAuBE,UAAD,IAAgB;AACpC5B,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY2B,UAAU,CAACC,UAAX,CAAsBC,OAAlC;AACA,aAAKzB,QAAL,CAAc;AAAES,UAAAA,OAAO,EAAEc,UAAU,CAACC,UAAX,CAAsBC;AAAjC,SAAd;AACAF,QAAAA,UAAU,CAACG,MAAX;AACD,OALD;AAMD,KAlMkB;;AAEjB,SAAKpB,KAAL,GAAa;AACXL,MAAAA,SAAS,EAAE,EADA;AAEXE,MAAAA,IAAI,EAAE,EAFK;AAGXwB,MAAAA,WAAW,EAAE,EAHF;AAIXC,MAAAA,UAAU,EAAE,EAJD;AAKXnB,MAAAA,OAAO,EAAE,EALE;AAMXJ,MAAAA,QAAQ,EAAE,EANC;AAOXD,MAAAA,UAAU,EAAE,EAPD;AAQXyB,MAAAA,mBAAmB,EAAE,EARV;AASXC,MAAAA,UAAU,EAAE,EATD;AAUXd,MAAAA,WAAW,EAAE;AAVF,KAAb;AAYD;;AAEDe,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,SAAS,GAAG,KAAKxC,KAAL,CAAWwC,SAA3B,CADkB,CAElB;AACA;;AACA,QAAI3B,QAAJ;;AACA,QAAI2B,SAAJ,EAAe;AACb3B,MAAAA,QAAQ,GAAG2B,SAAS,CAACC,MAArB;AACD;;AACD,SAAKjC,QAAL,CAAc;AAAEK,MAAAA,QAAQ,EAAEA;AAAZ,KAAd;AACApB,IAAAA,MAAM,CAACuB,IAAP,CAAY,wBAAZ,EAAsC;AACpCH,MAAAA,QAAQ,EAAEA;AAD0B,KAAtC;AAIApB,IAAAA,MAAM,CAACoC,EAAP,CAAU,YAAV,EAAyBa,IAAD,IAAU;AAChCvC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAesC,IAA3B;AACD,KAFD;AAIAjD,IAAAA,MAAM,CAACoC,EAAP,CAAU,mBAAV,EAAgCa,IAAD,IAAU;AACvCvC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAZ,EAFuC,CAGvC;;AACA,WAAKjB,2BAAL,CAAiCiB,IAAI,CAACC,KAAtC;AACD,KALD;AAOAlD,IAAAA,MAAM,CAACoC,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5B1B,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,KAFD;AAGAX,IAAAA,MAAM,CAACoC,EAAP,CAAU,UAAV,EAAuBe,GAAD,IAAS;AAC7B,UAAIF,IAAI,GAAGE,GAAG,CAACF,IAAf;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAZ;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAI,CAACG,IAAjB;AACA1C,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAI,CAACI,EAAjB;AACA3C,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAI,CAACK,SAAjB;AACA5C,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAI,CAACM,MAAjB;AACA7C,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAI,CAACT,OAAjB;AACA9B,MAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAI,CAACO,UAAjB;AAEA,UAAIZ,mBAAmB,GAAG,KAAKvB,KAAL,CAAWuB,mBAArC;AACA,UAAIa,cAAc,GAAG,KAArB;;AACA,WAAK,IAAIC,CAAT,IAAcd,mBAAd,EAAmC;AACjC,YAAIA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBhB,WAAvB,IAAsCO,IAAI,CAACG,IAA/C,EAAqD;AACnDR,UAAAA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,GAAoC,SAApC;AACAC,UAAAA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBlC,OAAvB,GAAiCyB,IAAI,CAACT,OAAtC;AACAiB,UAAAA,cAAc,GAAG,IAAjB;AACD;AACF;;AACD,UAAIA,cAAc,IAAI,KAAtB,EAA6B;AAC3B,YAAIE,cAAc,GAAG,EAArB;AACAA,QAAAA,cAAc,CAACjB,WAAf,GAA6BO,IAAI,CAACG,IAAlC;AACAO,QAAAA,cAAc,CAAChB,UAAf,GAA4B,SAA5B;AACAgB,QAAAA,cAAc,CAACnC,OAAf,GAAyByB,IAAI,CAACT,OAA9B;AACAI,QAAAA,mBAAmB,CAACgB,IAApB,CAAyBD,cAAzB;AACD;;AAED,WAAK5C,QAAL,CAAc;AAAE6B,QAAAA,mBAAmB,EAAEA;AAAvB,OAAd;AACD,KA7BD;AA+BA5C,IAAAA,MAAM,CAACoC,EAAP,CAAU,YAAV,EAAyBe,GAAD,IAAS;AAC/BzC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAhB;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAJ,CAASO,UAArB;AACA,UAAIZ,mBAAmB,GAAG,KAAKvB,KAAL,CAAWuB,mBAArC;;AACA,WAAK,IAAIc,CAAT,IAAcd,mBAAd,EAAmC;AACjC,YAAIA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBhB,WAAvB,IAAsCS,GAAG,CAACF,IAAJ,CAASG,IAAnD,EAAyD;AACvDR,UAAAA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,GAAoC,SAApC;AACD;AACF;;AACD,WAAK5B,QAAL,CAAc;AAAE6B,QAAAA,mBAAmB,EAAEA;AAAvB,OAAd;AACD,KAXD;AAaA5C,IAAAA,MAAM,CAACoC,EAAP,CAAU,aAAV,EAA0Be,GAAD,IAAS;AAChCzC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAhB;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAJ,CAASO,UAArB;AACA,UAAIZ,mBAAmB,GAAG,KAAKvB,KAAL,CAAWuB,mBAArC;;AACA,WAAK,IAAIc,CAAT,IAAcd,mBAAd,EAAmC;AACjC,YAAIA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBlC,OAAvB,IAAkC2B,GAAG,CAACF,IAAJ,CAASY,OAA/C,EAAwD;AACtDjB,UAAAA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,GAAoC,WAApC;AACAC,UAAAA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBI,aAAvB,GAAuCX,GAAG,CAACF,IAAJ,CAASxB,MAAhD;AACD;AACF;;AACD,WAAKV,QAAL,CAAc;AAAE6B,QAAAA,mBAAmB,EAAEA;AAAvB,OAAd;AACD,KAZD;AAcA5C,IAAAA,MAAM,CAACoC,EAAP,CAAU,WAAV,EAAwBe,GAAD,IAAS;AAC9BzC,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAhB;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAJ,CAASO,UAArB;AACA9C,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAJ,CAASc,QAArB;AAEA,UAAInB,mBAAmB,GAAG,KAAKvB,KAAL,CAAWuB,mBAArC;;AACA,WAAK,IAAIc,CAAT,IAAcd,mBAAd,EAAmC;AACjC,YAAIA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBhB,WAAvB,IAAsCS,GAAG,CAACF,IAAJ,CAASG,IAAnD,EAAyD;AACvDR,UAAAA,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,GAAoC,cAApC;AACD;AACF;;AACD,WAAK5B,QAAL,CAAc;AAAE6B,QAAAA,mBAAmB,EAAEA;AAAvB,OAAd;AACD,KAbD;AAeA5C,IAAAA,MAAM,CAACoC,EAAP,CAAU,aAAV,EAA0Be,GAAD,IAAS;AAChCzC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAJ,CAAST,OAArB;AACA9B,MAAAA,OAAO,CAACC,GAAR,CAAYwC,GAAG,CAACF,IAAJ,CAASxB,MAArB;AACA,UAAImB,mBAAmB,GAAG,KAAKvB,KAAL,CAAWD,QAArC;;AACA,UAAI,KAAKC,KAAL,CAAWD,QAAX,IAAuB+B,GAAG,CAACF,IAAJ,CAASxB,MAApC,EAA4C;AAC1C,aAAKV,QAAL,CAAc;AAAE8B,UAAAA,UAAU,EAAE,SAAd;AAAyBd,UAAAA,WAAW,EAAEoB,GAAG,CAACF,IAAJ,CAAST;AAA/C,SAAd;AACD;AACF,KARD;AASD;;AAuEDwB,EAAAA,MAAM,GAAG;AACPtD,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBsD,IAAI,CAACC,SAAL,CAAe,KAAK3D,KAApB,CAAhC;AACA,QAAI;AAAEqC,MAAAA;AAAF,QAA0B,KAAKvB,KAAnC;AACA,QAAI8C,uBAAuB,GAAG,EAA9B;;AACA,SAAK,IAAIT,CAAT,IAAcd,mBAAd,EAAmC;AACjClC,MAAAA,OAAO,CAACC,GAAR,CAAYiC,mBAAmB,CAACc,CAAD,CAA/B;AACAS,MAAAA,uBAAuB,CAACP,IAAxB,eACE;AAAA,mBACGhB,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,IAAqC,SAArC,gBACC;AAAA,qBAAGC,mBAAmB,CAACc,CAAD,CAAnB,CAAuBhB,WAA1B;AAAA,wBADD,GAGC,EAJJ,EAMGE,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,IAAqC,SAArC,gBACC;AAAA,qBAAGC,mBAAmB,CAACc,CAAD,CAAnB,CAAuBhB,WAA1B;AAAA,wBADD,GAGC,EATJ,EAWGE,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,IAAqC,cAArC,gBACC;AAAA,qBAAGC,mBAAmB,CAACc,CAAD,CAAnB,CAAuBhB,WAA1B;AAAA,wBADD,GAGC,EAdJ,EAgBGE,mBAAmB,CAACc,CAAD,CAAnB,CAAuBf,UAAvB,IAAqC,WAArC,gBACC;AAAA,qBACGC,mBAAmB,CAACc,CAAD,CAAnB,CAAuBhB,WAD1B,sBACuD,GADvD,EAEGE,mBAAmB,CAACc,CAAD,CAAnB,CAAuBI,aAF1B;AAAA,wBADD,GAMC,EAtBJ,eAwBE;AAAA,kCACE;AACE,YAAA,OAAO,EAAE,MAAM,KAAKxC,UAAL,CAAgBsB,mBAAmB,CAACc,CAAD,CAAnB,CAAuBlC,OAAvC,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAME;AACE,YAAA,OAAO,EAAE,MACP,KAAKG,cAAL,CAAoBiB,mBAAmB,CAACc,CAAD,CAAnB,CAAuBlC,OAA3C,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAaE;AACE,YAAA,OAAO,EAAE,MAAM,KAAK4C,WAAL,CAAiBxB,mBAAmB,CAACc,CAAD,CAAnB,CAAuBlC,OAAxC,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,eAkBE;AACE,YAAA,OAAO,EAAE,MAAM,KAAKE,UAAL,CAAgBkB,mBAAmB,CAACc,CAAD,CAAnB,CAAuBlC,OAAvC,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAmDD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BA2BE;AAAA;AAAA;AAAA;AAAA,cA3BF,eA4BE;AAAA,kDAEE;AAAO,UAAA,IAAI,EAAC,WAAZ;AAAwB,UAAA,QAAQ,EAAE,KAAKhB;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,OAAO,EAAE,KAAKoB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAQ,UAAA,OAAO,EAAE,KAAKE,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAKG,KAAKT,KAAL,CAAWwB,UALd;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF,eAmCE;AAAA;AAAA;AAAA;AAAA,cAnCF,eAqCE;AAAA;AAAA;AAAA;AAAA,cArCF,eAsCE;AAAA;AAAA;AAAA;AAAA,cAtCF,eAuCE;AAAA;AAAA;AAAA;AAAA,cAvCF,eAwCE;AAAA;AAAA;AAAA;AAAA,cAxCF,eAyCE;AAAA;AAAA;AAAA;AAAA,cAzCF,EA0CGsB,uBA1CH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8CD;;AA7S+B;;AAgTlC,eAAe/D,GAAf","sourcesContent":["import React from \"react\";\n//import socket from \"./Socketio\";\nimport socketIOClient from \"socket.io-client\";\nimport * as Twilio from \"twilio-client\";\nimport { configdata } from \"../config\";\n//const ENDPOINT = \"http://127.0.0.1:4001\";\nlet ENDPOINT, socket;\nif (configdata().twiliocallcenterserverurl != \"\") {\n  ENDPOINT = configdata().twiliocallcenterserverurl;\n  socket = socketIOClient(ENDPOINT);\n}\nlet device = undefined;\n//JSON.parse(localStorage.getItem(\"token\"));\n//localStorage.setItem(\"token\", JSON.stringify(\"Smith\"));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tophoneno: \"\",\n      code: \"\",\n      fromphoneno: \"\",\n      callstatus: \"\",\n      callSid: \"\",\n      username: \"\",\n      usernumber: \"\",\n      callconnectionArray: [],\n      dialstatus: \"\",\n      dialcallsid: \"\",\n    };\n  }\n\n  componentDidMount() {\n    let compprops = this.props.compprops;\n    // console.log(compprops.userobjectname);\n    // console.log(compprops.userid);s\n    let username;\n    if (compprops) {\n      username = compprops.userid;\n    }\n    this.setState({ username: username });\n    socket.emit(\"registerfortwiliotoken\", {\n      username: username,\n    });\n\n    socket.on(\"logintoken\", (data) => {\n      console.log(\"logintoken\" + data);\n    });\n\n    socket.on(\"twilioclienttoken\", (data) => {\n      console.log(\"twilioclienttoken\");\n      console.log(data);\n      // console.log(\"isverfiied\" + data.isverified);\n      this.connectTwilioClienttoServer(data.token);\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"socket disconnected\");\n    });\n    socket.on(\"call-new\", (req) => {\n      let data = req.data;\n      console.log(\"call connected\");\n      console.log(data);\n      console.log(data.From);\n      console.log(data.To);\n      console.log(data.Direction);\n      console.log(data.Called);\n      console.log(data.CallSid);\n      console.log(data.CallStatus);\n\n      let callconnectionArray = this.state.callconnectionArray;\n      let isexistingcall = false;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == data.From) {\n          callconnectionArray[i].callstatus = \"ringing\";\n          callconnectionArray[i].callSid = data.CallSid;\n          isexistingcall = true;\n        }\n      }\n      if (isexistingcall == false) {\n        let callconnection = {};\n        callconnection.fromphoneno = data.From;\n        callconnection.callstatus = \"ringing\";\n        callconnection.callSid = data.CallSid;\n        callconnectionArray.push(callconnection);\n      }\n\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-inque\", (req) => {\n      console.log(\" call is in queue\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"inqueue\";\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-answer\", (req) => {\n      console.log(\" call is in answer\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].callSid == req.data.callsid) {\n          callconnectionArray[i].callstatus = \"answering\";\n          callconnectionArray[i].answeringuser = req.data.client;\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"call-disc\", (req) => {\n      console.log(\" call disc from twilio server\");\n      console.log(req.data);\n      console.log(req.data.CallStatus);\n      console.log(req.data.Duration);\n\n      let callconnectionArray = this.state.callconnectionArray;\n      for (let i in callconnectionArray) {\n        if (callconnectionArray[i].fromphoneno == req.data.From) {\n          callconnectionArray[i].callstatus = \"disconnected\";\n        }\n      }\n      this.setState({ callconnectionArray: callconnectionArray });\n    });\n\n    socket.on(\"dialowncall\", (req) => {\n      console.log(\" dialowncall\");\n      console.log(req.data.CallSid);\n      console.log(req.data.client);\n      let callconnectionArray = this.state.username;\n      if (this.state.username == req.data.client) {\n        this.setState({ dialstatus: \"dialing\", dialcallsid: req.data.CallSid });\n      }\n    });\n  }\n\n  handleChange = (e) => {\n    console.log(e.target.name);\n    let x = e.target.name;\n    if (x == \"tophoneno\") {\n      this.setState({ tophoneno: e.target.value });\n    }\n    if (x == \"code\") {\n      this.setState({ code: e.target.value });\n    }\n    if (x == \"usernumber\") {\n      this.setState({ usernumber: e.target.value });\n    }\n    if (x == \"username\") {\n      this.setState({ username: e.target.value });\n    }\n\n    console.log(this.state);\n  };\n\n  answerCall = (x) => {\n    console.log(x);\n    socket.emit(\"answercall\", {\n      callSid: x,\n      client: this.state.username,\n    });\n  };\n\n  rejectCall = (x) => {\n    socket.emit(\"rejectcall\", { callSid: x });\n  };\n\n  disconnectCall = (x) => {\n    console.log(x);\n    socket.emit(\"disconnectcall\", {\n      callSid: x,\n      client: this.state.username,\n    });\n  };\n\n  dialCall = () => {\n    socket.emit(\"dialcall\", {\n      phoneno: this.state.tophoneno,\n      client: this.state.username,\n    });\n  };\n\n  disconnectOwnCall = (x) => {\n    console.log(this.state.dialcallsid);\n    console.log(this.state.username);\n    socket.emit(\"disconnectownCall\", {\n      callSid: this.state.dialcallsid,\n      client: this.state.username,\n    });\n  };\n\n  connectTwilioClienttoServer = (twilioClientToken) => {\n    console.log(twilioClientToken);\n    device = new Twilio.Device(twilioClientToken, { debug: true });\n    device.on(\"error\", (err) => {\n      console.log(err);\n    });\n    device.on(\"incoming\", (connection) => {\n      console.log(\"incoming frm twilio\");\n      console.log(connection.parameters.CallSid);\n      this.setState({ callSid: connection.parameters.CallSid });\n      connection.accept();\n    });\n  };\n\n  render() {\n    console.log(\"callcenterprops\" + JSON.stringify(this.props));\n    let { callconnectionArray } = this.state;\n    let callconnectionArrayHtml = [];\n    for (let i in callconnectionArray) {\n      console.log(callconnectionArray[i]);\n      callconnectionArrayHtml.push(\n        <div>\n          {callconnectionArray[i].callstatus == \"ringing\" ? (\n            <>{callconnectionArray[i].fromphoneno} is calling</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"inqueue\" ? (\n            <>{callconnectionArray[i].fromphoneno} is inqueue</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"disconnected\" ? (\n            <>{callconnectionArray[i].fromphoneno} is disconnected</>\n          ) : (\n            \"\"\n          )}\n          {callconnectionArray[i].callstatus == \"answering\" ? (\n            <>\n              {callconnectionArray[i].fromphoneno} is answering by{\" \"}\n              {callconnectionArray[i].answeringuser}\n            </>\n          ) : (\n            \"\"\n          )}\n          <div>\n            <button\n              onClick={() => this.answerCall(callconnectionArray[i].callSid)}\n            >\n              Answer call\n            </button>\n            <button\n              onClick={() =>\n                this.disconnectCall(callconnectionArray[i].callSid)\n              }\n            >\n              Disconnect call\n            </button>\n            <button\n              onClick={() => this.suggestCall(callconnectionArray[i].callSid)}\n            >\n              Suggest call\n            </button>\n            <button\n              onClick={() => this.rejectCall(callconnectionArray[i].callSid)}\n            >\n              Reject call\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        {/* <div>\n          Myusername <input name=\"username\" onChange={this.handleChange} />\n          Mynumberrs\n          <input\n            type=\"text\"\n            name=\"usernumber\"\n            list=\"exampleList\"\n            onChange={this.handleChange}\n          />\n          <datalist id=\"exampleList\">\n            <option value=\"+15102400591\" />\n            <option value=\"+1‪5107365704‬\" />\n          </datalist>\n          <button\n            onClick={this.login}\n            name=\"usernumber\"\n            onChange={this.handleChange}\n          >\n            Login\n          </button>\n        </div> \n        <br />\n        <div>\n          Verify code <input name=\"code\" onChange={this.handleChange} />{\" \"}\n          <button onClick={this.verify}>verifyyysss</button>\n        </div>*/}\n        <br />\n        <div>\n          Dialing Number\n          <input name=\"tophoneno\" onChange={this.handleChange} />\n          <button onClick={this.dialCall}>Dial</button>\n          <button onClick={this.disconnectOwnCall}>Disconnect call</button>\n          {this.state.dialstatus}\n        </div>\n        <br />\n\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        {callconnectionArrayHtml}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}