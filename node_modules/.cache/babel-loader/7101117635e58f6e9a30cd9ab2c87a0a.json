{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddatarelatedlist.js\";\nimport React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping, getLocalData, serverButtonHandler } from \"../js/index\";\nimport Htmlform from \"./htmlformnew\";\nimport Tabpanel from \"./tabpanel\";\nimport Tablecomp from \"./tablecomp\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n/*\n  <Recorddata\n                    {...this.props}\n                    compprops={{\n                      orgname: \"gouthama\",\n                      userProfileId: \"gouthama-admin\",\n                      userId: \"\",\n                      parenttableName: \"class\",\n                      tableName: \"student\",\n                      parentRecId: \"PREK\",\n                    }}\n                    styleprops={{\n                      width: \"100%\",\n                      height: \"30vh\",\n                      backgroundColor: \"\",\n                      overflow: \"auto\",\n                    }}\n                  />\n\n\n\n  ////datasyncevents\n    update table records\n    this.setState({\n      datasyncEventprops: {\n        name: \"updaterecorddata\",\n        data: [\n          { id: \"CS-First\", teacher: \"tes\" },\n          { id: \"CS-PREK\", teacher: \"tes\" },\n        ],\n        componenthtmlid: \"all\",\n      },\n    });                \n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.tabclkHanlder = props => {\n      let {\n        tabLabel,\n        tabName,\n        tabType\n      } = props;\n      console.log(props);\n      let inputrecorddatatabcontentArray = document.getElementsByClassName(\"inputrecorddatatabcontent\");\n\n      for (let i = 0; i < inputrecorddatatabcontentArray.length; i++) {\n        console.log(inputrecorddatatabcontentArray[i]);\n\n        if (tabName == inputrecorddatatabcontentArray[i].dataset.tabname) {\n          inputrecorddatatabcontentArray[i].style.display = \"flex\";\n        } else {\n          inputrecorddatatabcontentArray[i].style.display = \"none\";\n        }\n      }\n    };\n\n    this.subsectionclkHanlder = (tabName, sectionName, subsectionName) => {\n      let isValid = true;\n      let htmlformsubsectioncontentArray = document.getElementsByClassName(\"htmlformsubsectioncontent\");\n\n      for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n        console.log(htmlformsubsectioncontentArray[i]);\n\n        if (tabName == htmlformsubsectioncontentArray[i].dataset.tabname && sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname) {\n          if (htmlformsubsectioncontentArray[i].style.display == \"flex\") {\n            //reset subsection errors\n            let errorelements = htmlformsubsectioncontentArray[i].getElementsByClassName(\"htmlforminputitemerror\");\n\n            for (let j = 0; j < errorelements.length; j++) {\n              errorelements[j].style.display = \"none\";\n            } //validate childs\n\n\n            for (let childrenI in htmlformsubsectioncontentArray[i].getElementsByTagName(\"*\")) {\n              let children = htmlformsubsectioncontentArray[i].getElementsByTagName(\"*\")[childrenI];\n              console.log(children);\n\n              if (this.inputElementValidate(children) == false) {\n                isValid = false;\n              }\n            }\n          }\n        }\n      }\n\n      if (isValid == true) {\n        for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n          console.log(htmlformsubsectioncontentArray[i]);\n\n          if (tabName == htmlformsubsectioncontentArray[i].dataset.tabname && sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname) {\n            if (subsectionName == htmlformsubsectioncontentArray[i].dataset.subsectionname) {\n              htmlformsubsectioncontentArray[i].style.display = \"flex\";\n            } else {\n              htmlformsubsectioncontentArray[i].style.display = \"none\";\n            }\n          }\n        }\n      }\n    };\n\n    this.inputElementValidate = htmllement => {\n      let isValid = true;\n\n      if (htmllement && htmllement.required) {\n        if (htmllement.value.trim() == \"\" || htmllement.value == undefined) {\n          htmllement.style.borderBottomColor = \"red\";\n          htmllement.style.borderBottomWidth = \"2px\";\n          var newDiv = document.createElement(\"div\");\n          var newContent = document.createTextNode(\"This is required\");\n          newDiv.setAttribute(\"class\", \"htmlforminputitemerror\");\n          newDiv.appendChild(newContent);\n          htmllement.insertAdjacentElement(\"afterend\", newDiv);\n          isValid = false;\n        } else {\n          htmllement.style.borderBottomColor = htmllement.style.borderRightColor;\n          htmllement.style.borderBottomWidth = htmllement.style.borderRightWidth;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.inputChangeHandler = () => {};\n\n    this.clickHandler = async props => {\n      let {\n        orgname,\n        userprofileid,\n        userid,\n        tablename,\n        recordnamelinkactionid,\n        recordnewbuttonactionid\n      } = this.props.compprops;\n      let {\n        itemType,\n        itemId,\n        itemName,\n        actionid\n      } = props;\n      let localdata = getLocalData(this.props);\n      console.log(props);\n\n      if (itemType == \"tabletdnamelink\") {\n        serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: actionid,\n            recordid: itemName\n          }\n        });\n      }\n\n      if (itemType == \"layoutbutton\") {\n        serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: actionid,\n            recordid: \"\"\n          }\n        });\n      }\n\n      if (itemType == \"tabledropdown\") {} //   serverButtonHandler({ localdata: localdata, clickprops: props });\n\n    };\n\n    this.inputKeyupHandler = () => {};\n\n    this.state = {\n      mainPanelHtml: [],\n      recorddata: {}\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      defaulttablename,\n      parenttablename,\n      parentrecid,\n      recordid,\n      datadisplaytype\n    } = this.props.compprops;\n    console.log(this.props);\n\n    if (tablename == \"\" || tablename == undefined) {\n      tablename = defaulttablename;\n    }\n\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      parenttableName: parenttablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      filterfieldvalue: parentrecid,\n      action: \"\",\n      viewName: \"all\",\n      datadisplaytype: datadisplaytype\n    });\n  }\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      parenttableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      filterfieldvalue,\n      action,\n      viewName,\n      datadisplaytype\n    } = props;\n    let metadataParams = {};\n    let dataParams = {};\n    let dataprops = [];\n    let mainPanelHtml = []; // tableview metadata\n\n    metadataParams = {\n      objectName: \"tableview\",\n      objectData: {},\n      keyConditions: [{\n        field: \"orgname\",\n        value: orgname,\n        expression: \"=\"\n      }, {\n        field: \"tableviewid\",\n        value: userProfileId + \"-\" + parenttableName + \"-\" + tableName + \"-\" + datadisplaytype,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    };\n    console.log(metadataParams);\n    let metadataresult = await getRecorddata(metadataParams);\n\n    if (metadataresult.isSuccess === \"false\") {\n      alert(\"metadata\" + metadataresult.message);\n    } else {\n      if (metadataresult.dataprops.Items[0]) {\n        // column data for table\n        let columnMetadata = metadataresult.dataprops.Items[0].data;\n        let viewnamedropdownchangeaction = metadataresult.dataprops.Items[0].viewnamedropdownchangeaction;\n        console.log(columnMetadata); // tableview defult sortparam  get all data if no tableview name given\n\n        let defaultIdsortparam = metadataresult.dataprops.Items[0].defaultidsortparam;\n        let defaultfilterfieldname = metadataresult.dataprops.Items[0].defaultfilterfieldname;\n\n        if (viewName != \"\" && datasortparambeginswith == \"\" && datasortparamequalsto == \"\") {\n          if (viewName != \"recentlyviewed\") {\n            // table view not recentlyviewed\n            for (let i in columnMetadata) {\n              if (columnMetadata[i].name == viewName) {\n                datasortparambeginswith = columnMetadata[i].idsortparam;\n                defaultfilterfieldname = columnMetadata[i].filterfieldname;\n                console.log(columnMetadata[i]);\n              }\n            }\n          } else {\n            // tableview recentlyviewd\n            datasortparambeginswith = defaultIdsortparam;\n          }\n\n          dataParams = {\n            objectName: tableName,\n            objectData: {},\n            keyConditions: [{\n              field: \"orgname\",\n              value: orgname,\n              expression: \"=\"\n            }, {\n              field: \"id\",\n              value: datasortparambeginswith,\n              expression: \"beginswith\"\n            }],\n            filterConditions: [{\n              field: defaultfilterfieldname,\n              value: filterfieldvalue,\n              expression: \"=\"\n            }]\n          };\n          console.log(dataParams);\n        } else {// // no tableview name given get data based on equalsto or begin with\n          // if (datasortparamequalsto != \"\") {\n          //   dataParams = {\n          //     objectName: tableName,\n          //     objectData: {},\n          //     keyConditions: [\n          //       {\n          //         field: \"orgname\",\n          //         value: orgname,\n          //         expression: \"=\",\n          //       },\n          //       {\n          //         field: \"id\",\n          //         value: datasortparamequalsto,\n          //         expression: \"=\",\n          //       },\n          //     ],\n          //     filterConditions: [\n          //       {\n          //         field: defaultfilterfieldname,\n          //         value: filterfieldvalue,\n          //         expression: \"=\",\n          //       },\n          //     ],\n          //   };\n          // }\n          // // get records begin with data\n          // if (datasortparambeginswith != \"\") {\n          //   dataParams = {\n          //     objectName: tableName,\n          //     objectData: {},\n          //     keyConditions: [\n          //       {\n          //         field: \"orgname\",\n          //         value: orgname,\n          //         expression: \"=\",\n          //       },\n          //       {\n          //         field: \"id\",\n          //         value: datasortparambeginswith,\n          //         expression: \"beginswith\",\n          //       },\n          //     ],\n          //     filterConditions: [\n          //       {\n          //         field: defaultfilterfieldname,\n          //         value: filterfieldvalue,\n          //         expression: \"=\",\n          //       },\n          //     ],\n          //   };\n          // }\n        }\n\n        console.log(dataParams);\n        let dataresult = await getRecorddata(dataParams);\n\n        if (dataresult.isSuccess === \"false\") {\n          alert(\"data\" + dataresult.message);\n          console.log(dataParams);\n        } else {\n          let recordDataList = dataresult.dataprops.Items;\n          console.log(recordDataList);\n          mainPanelHtml.push( /*#__PURE__*/_jsxDEV(Tablecomp, {\n            dataProps: {\n              name: \"meganavpanel-list-content-recordname\",\n              type: \"meganavpanel-list-content-recordname\"\n            },\n            columnMetadata: columnMetadata,\n            tableOnclick: this.clickHandler,\n            tableOnChange: this.inputChangeHandler,\n            recordData: recordDataList,\n            activeTableviewName: viewName,\n            tableName: tableName,\n            tablehtmlid: tableName + \"view\",\n            rowhtmlid1: \"id\",\n            rowhtmlid2: \"id\",\n            clientstatename: tableName,\n            clientstatetype: \"recordlistdata\",\n            viewnamedropdownchangeaction: viewnamedropdownchangeaction\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this));\n          this.setState({\n            mainPanelHtml: mainPanelHtml\n          });\n          console.log(dataParams);\n        }\n      } else {\n        alert(\"please enter validatee url\");\n      }\n    } ///////////////////////////\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.htmlid,\n      style: this.props.styleprops,\n      children: this.state.mainPanelHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recorddatarelatedlist.js"],"names":["React","Component","getRecorddata","createRecord","bulkcreateRecord","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","Htmlform","Tabpanel","Tablecomp","GetLocalIcon","GetGoogleIcon","F","constructor","props","tabclkHanlder","tabLabel","tabName","tabType","console","log","inputrecorddatatabcontentArray","document","getElementsByClassName","i","length","dataset","tabname","style","display","subsectionclkHanlder","sectionName","subsectionName","isValid","htmlformsubsectioncontentArray","sectionname","errorelements","j","childrenI","getElementsByTagName","children","inputElementValidate","subsectionname","htmllement","required","value","trim","undefined","borderBottomColor","borderBottomWidth","newDiv","createElement","newContent","createTextNode","setAttribute","appendChild","insertAdjacentElement","borderRightColor","borderRightWidth","inputChangeHandler","clickHandler","orgname","userprofileid","userid","tablename","recordnamelinkactionid","recordnewbuttonactionid","compprops","itemType","itemId","itemName","actionid","localdata","clickprops","recordid","inputKeyupHandler","state","mainPanelHtml","recorddata","componentDidMount","defaulttablename","parenttablename","parentrecid","datadisplaytype","getRecordListMetadataAndDatafromServer","userProfileId","userId","tableName","parenttableName","datasortparambeginswith","datasortparamequalsto","filterfieldvalue","action","viewName","metadataParams","dataParams","dataprops","objectName","objectData","keyConditions","field","expression","filterConditions","pageSize","limit","exclusiveStartKey","metadataresult","isSuccess","alert","message","Items","columnMetadata","data","viewnamedropdownchangeaction","defaultIdsortparam","defaultidsortparam","defaultfilterfieldname","name","idsortparam","filterfieldname","dataresult","recordDataList","push","type","setState","render","htmlid","styleprops"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport {\n  sortArray,\n  fieldTypeHtmltoDBmapping,\n  getLocalData,\n  serverButtonHandler,\n} from \"../js/index\";\n\nimport Htmlform from \"./htmlformnew\";\nimport Tabpanel from \"./tabpanel\";\nimport Tablecomp from \"./tablecomp\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\n\n/*\n  <Recorddata\n                    {...this.props}\n                    compprops={{\n                      orgname: \"gouthama\",\n                      userProfileId: \"gouthama-admin\",\n                      userId: \"\",\n                      parenttableName: \"class\",\n                      tableName: \"student\",\n                      parentRecId: \"PREK\",\n                    }}\n                    styleprops={{\n                      width: \"100%\",\n                      height: \"30vh\",\n                      backgroundColor: \"\",\n                      overflow: \"auto\",\n                    }}\n                  />\n\n\n\n  ////datasyncevents\n    update table records\n    this.setState({\n      datasyncEventprops: {\n        name: \"updaterecorddata\",\n        data: [\n          { id: \"CS-First\", teacher: \"tes\" },\n          { id: \"CS-PREK\", teacher: \"tes\" },\n        ],\n        componenthtmlid: \"all\",\n      },\n    });                \n*/\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { mainPanelHtml: [], recorddata: {} };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      defaulttablename,\n      parenttablename,\n      parentrecid,\n      recordid,\n      datadisplaytype,\n    } = this.props.compprops;\n    console.log(this.props);\n    if (tablename == \"\" || tablename == undefined) {\n      tablename = defaulttablename;\n    }\n\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      parenttableName: parenttablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      filterfieldvalue: parentrecid,\n      action: \"\",\n      viewName: \"all\",\n      datadisplaytype: datadisplaytype,\n    });\n  }\n\n  tabclkHanlder = (props) => {\n    let { tabLabel, tabName, tabType } = props;\n    console.log(props);\n    let inputrecorddatatabcontentArray = document.getElementsByClassName(\n      \"inputrecorddatatabcontent\"\n    );\n\n    for (let i = 0; i < inputrecorddatatabcontentArray.length; i++) {\n      console.log(inputrecorddatatabcontentArray[i]);\n      if (tabName == inputrecorddatatabcontentArray[i].dataset.tabname) {\n        inputrecorddatatabcontentArray[i].style.display = \"flex\";\n      } else {\n        inputrecorddatatabcontentArray[i].style.display = \"none\";\n      }\n    }\n  };\n  subsectionclkHanlder = (tabName, sectionName, subsectionName) => {\n    let isValid = true;\n\n    let htmlformsubsectioncontentArray = document.getElementsByClassName(\n      \"htmlformsubsectioncontent\"\n    );\n\n    for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n      console.log(htmlformsubsectioncontentArray[i]);\n      if (\n        tabName == htmlformsubsectioncontentArray[i].dataset.tabname &&\n        sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname\n      ) {\n        if (htmlformsubsectioncontentArray[i].style.display == \"flex\") {\n          //reset subsection errors\n          let errorelements = htmlformsubsectioncontentArray[\n            i\n          ].getElementsByClassName(\"htmlforminputitemerror\");\n          for (let j = 0; j < errorelements.length; j++) {\n            errorelements[j].style.display = \"none\";\n          }\n\n          //validate childs\n          for (let childrenI in htmlformsubsectioncontentArray[\n            i\n          ].getElementsByTagName(\"*\")) {\n            let children = htmlformsubsectioncontentArray[\n              i\n            ].getElementsByTagName(\"*\")[childrenI];\n            console.log(children);\n            if (this.inputElementValidate(children) == false) {\n              isValid = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (isValid == true) {\n      for (let i = 0; i < htmlformsubsectioncontentArray.length; i++) {\n        console.log(htmlformsubsectioncontentArray[i]);\n        if (\n          tabName == htmlformsubsectioncontentArray[i].dataset.tabname &&\n          sectionName == htmlformsubsectioncontentArray[i].dataset.sectionname\n        ) {\n          if (\n            subsectionName ==\n            htmlformsubsectioncontentArray[i].dataset.subsectionname\n          ) {\n            htmlformsubsectioncontentArray[i].style.display = \"flex\";\n          } else {\n            htmlformsubsectioncontentArray[i].style.display = \"none\";\n          }\n        }\n      }\n    }\n  };\n\n  inputElementValidate = (htmllement) => {\n    let isValid = true;\n    if (htmllement && htmllement.required) {\n      if (htmllement.value.trim() == \"\" || htmllement.value == undefined) {\n        htmllement.style.borderBottomColor = \"red\";\n        htmllement.style.borderBottomWidth = \"2px\";\n        var newDiv = document.createElement(\"div\");\n        var newContent = document.createTextNode(\"This is required\");\n        newDiv.setAttribute(\"class\", \"htmlforminputitemerror\");\n        newDiv.appendChild(newContent);\n\n        htmllement.insertAdjacentElement(\"afterend\", newDiv);\n        isValid = false;\n      } else {\n        htmllement.style.borderBottomColor = htmllement.style.borderRightColor;\n        htmllement.style.borderBottomWidth = htmllement.style.borderRightWidth;\n      }\n    }\n    return isValid;\n  };\n\n  inputChangeHandler = () => {};\n\n  clickHandler = async (props) => {\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      recordnamelinkactionid,\n      recordnewbuttonactionid,\n    } = this.props.compprops;\n    let { itemType, itemId, itemName, actionid } = props;\n    let localdata = getLocalData(this.props);\n    console.log(props);\n    if (itemType == \"tabletdnamelink\") {\n      serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: actionid,\n          recordid: itemName,\n        },\n      });\n    }\n    if (itemType == \"layoutbutton\") {\n      serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: actionid,\n          recordid: \"\",\n        },\n      });\n    }\n    if (itemType == \"tabledropdown\") {\n    }\n\n    //   serverButtonHandler({ localdata: localdata, clickprops: props });\n  };\n\n  inputKeyupHandler = () => {};\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      parenttableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      filterfieldvalue,\n      action,\n      viewName,\n      datadisplaytype,\n    } = props;\n\n    let metadataParams = {};\n    let dataParams = {};\n    let dataprops = [];\n    let mainPanelHtml = [];\n\n    // tableview metadata\n    metadataParams = {\n      objectName: \"tableview\",\n      objectData: {},\n      keyConditions: [\n        {\n          field: \"orgname\",\n          value: orgname,\n          expression: \"=\",\n        },\n        {\n          field: \"tableviewid\",\n          value:\n            userProfileId +\n            \"-\" +\n            parenttableName +\n            \"-\" +\n            tableName +\n            \"-\" +\n            datadisplaytype,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n    console.log(metadataParams);\n    let metadataresult = await getRecorddata(metadataParams);\n    if (metadataresult.isSuccess === \"false\") {\n      alert(\"metadata\" + metadataresult.message);\n    } else {\n      if (metadataresult.dataprops.Items[0]) {\n        // column data for table\n        let columnMetadata = metadataresult.dataprops.Items[0].data;\n        let viewnamedropdownchangeaction =\n          metadataresult.dataprops.Items[0].viewnamedropdownchangeaction;\n        console.log(columnMetadata);\n        // tableview defult sortparam  get all data if no tableview name given\n        let defaultIdsortparam =\n          metadataresult.dataprops.Items[0].defaultidsortparam;\n        let defaultfilterfieldname =\n          metadataresult.dataprops.Items[0].defaultfilterfieldname;\n        if (\n          viewName != \"\" &&\n          datasortparambeginswith == \"\" &&\n          datasortparamequalsto == \"\"\n        ) {\n          if (viewName != \"recentlyviewed\") {\n            // table view not recentlyviewed\n            for (let i in columnMetadata) {\n              if (columnMetadata[i].name == viewName) {\n                datasortparambeginswith = columnMetadata[i].idsortparam;\n                defaultfilterfieldname = columnMetadata[i].filterfieldname;\n                console.log(columnMetadata[i]);\n              }\n            }\n          } else {\n            // tableview recentlyviewd\n            datasortparambeginswith = defaultIdsortparam;\n          }\n          dataParams = {\n            objectName: tableName,\n            objectData: {},\n            keyConditions: [\n              {\n                field: \"orgname\",\n                value: orgname,\n                expression: \"=\",\n              },\n              {\n                field: \"id\",\n                value: datasortparambeginswith,\n                expression: \"beginswith\",\n              },\n            ],\n            filterConditions: [\n              {\n                field: defaultfilterfieldname,\n                value: filterfieldvalue,\n                expression: \"=\",\n              },\n            ],\n          };\n          console.log(dataParams);\n        } else {\n          // // no tableview name given get data based on equalsto or begin with\n          // if (datasortparamequalsto != \"\") {\n          //   dataParams = {\n          //     objectName: tableName,\n          //     objectData: {},\n          //     keyConditions: [\n          //       {\n          //         field: \"orgname\",\n          //         value: orgname,\n          //         expression: \"=\",\n          //       },\n          //       {\n          //         field: \"id\",\n          //         value: datasortparamequalsto,\n          //         expression: \"=\",\n          //       },\n          //     ],\n          //     filterConditions: [\n          //       {\n          //         field: defaultfilterfieldname,\n          //         value: filterfieldvalue,\n          //         expression: \"=\",\n          //       },\n          //     ],\n          //   };\n          // }\n          // // get records begin with data\n          // if (datasortparambeginswith != \"\") {\n          //   dataParams = {\n          //     objectName: tableName,\n          //     objectData: {},\n          //     keyConditions: [\n          //       {\n          //         field: \"orgname\",\n          //         value: orgname,\n          //         expression: \"=\",\n          //       },\n          //       {\n          //         field: \"id\",\n          //         value: datasortparambeginswith,\n          //         expression: \"beginswith\",\n          //       },\n          //     ],\n          //     filterConditions: [\n          //       {\n          //         field: defaultfilterfieldname,\n          //         value: filterfieldvalue,\n          //         expression: \"=\",\n          //       },\n          //     ],\n          //   };\n          // }\n        }\n        console.log(dataParams);\n        let dataresult = await getRecorddata(dataParams);\n        if (dataresult.isSuccess === \"false\") {\n          alert(\"data\" + dataresult.message);\n          console.log(dataParams);\n        } else {\n          let recordDataList = dataresult.dataprops.Items;\n          console.log(recordDataList);\n          mainPanelHtml.push(\n            <Tablecomp\n              dataProps={{\n                name: \"meganavpanel-list-content-recordname\",\n                type: \"meganavpanel-list-content-recordname\",\n              }}\n              columnMetadata={columnMetadata}\n              tableOnclick={this.clickHandler}\n              tableOnChange={this.inputChangeHandler}\n              recordData={recordDataList}\n              activeTableviewName={viewName}\n              tableName={tableName}\n              tablehtmlid={tableName + \"view\"}\n              rowhtmlid1=\"id\"\n              rowhtmlid2=\"id\"\n              clientstatename={tableName}\n              clientstatetype=\"recordlistdata\"\n              viewnamedropdownchangeaction={viewnamedropdownchangeaction}\n            />\n          );\n          this.setState({ mainPanelHtml: mainPanelHtml });\n          console.log(dataParams);\n        }\n      } else {\n        alert(\"please enter validatee url\");\n      }\n    }\n    ///////////////////////////\n  }\n\n  render() {\n    return (\n      <div id={this.props.htmlid} style={this.props.styleprops}>\n        {this.state.mainPanelHtml}\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}