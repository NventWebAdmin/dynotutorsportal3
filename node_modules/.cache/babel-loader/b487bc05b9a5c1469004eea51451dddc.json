{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/listtable.js\";\nimport React, { Component } from \"react\";\nimport { sortArray, fieldTypeHtmltoDBmapping } from \"../js/index\";\nimport Htmlform from \"./htmlformnew\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tableActionBtnClick = e => {\n      console.log(e.target.dataset);\n      let itemListData = [];\n      let {\n        recordDataTemp\n      } = this.state;\n\n      if (e.target.dataset.name === \"upload\" || e.target.dataset.name === \"download\") {\n        let tableCheckBoxElements = document.querySelectorAll(\".tablecompinputcheckbox\");\n        console.log(tableCheckBoxElements);\n\n        for (let i = 0; i < tableCheckBoxElements.length; i++) {\n          for (let j = 0; j < recordDataTemp.length; j++) {\n            if (tableCheckBoxElements[i].dataset.rowhtmlid1 === recordDataTemp[j][this.props.rowhtmlid1] && tableCheckBoxElements[i].checked) {\n              itemListData.push(recordDataTemp[j]);\n            }\n          }\n        }\n\n        console.log(itemListData);\n\n        if (e.target.dataset.name === \"upload\") {\n          this.props.tableOnclick({\n            itemLabel: \"\",\n            itemName: e.target.dataset.name,\n            itemType: \"tablebutton\",\n            itemData: \"\",\n            itemListData: itemListData\n          });\n        }\n\n        if (e.target.dataset.name === \"download\") {\n          this.setState({\n            downloadTableasCSV: true\n          });\n        }\n      } else {\n        this.props.tableOnclick({\n          itemLabel: \"\",\n          itemName: e.target.dataset.name,\n          itemType: e.target.dataset.actiontype,\n          itemId: e.target.dataset.actionid,\n          actionid: e.target.dataset.actionid,\n          itemData: \"\",\n          itemListData: itemListData\n        });\n      }\n    };\n\n    this.state = {\n      mainpanelHtml: [],\n      recordData: [],\n      recordDataTemp: [],\n      selectedrecordData: [],\n      updaterecorddatafromstate: [],\n      morerecorddatafromstate: []\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.recordData) {\n      let totalRows = this.props.recordData.length;\n      this.setState({\n        totalRows: totalRows,\n        recordData: this.props.recordData,\n        recordDataTemp: this.props.recordData,\n        selectedColumn: \"\"\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.morerecorddata);\n    let {\n      recordData,\n      recordDataTemp,\n      updaterecorddatafromstate,\n      morerecorddatafromstate\n    } = this.state;\n    let {\n      morerecorddata,\n      updaterecorddata\n    } = this.props; //  let { prevmorerecorddata, prevupdaterecorddata } = prevProps;\n\n    if (JSON.stringify(morerecorddatafromstate) !== JSON.stringify(morerecorddata)) {\n      for (let i in morerecorddata) {\n        recordDataTemp.push(morerecorddata[i]);\n      }\n\n      this.setState({\n        recordDataTemp: recordDataTemp,\n        recordData: recordData,\n        morerecorddatafromstate: morerecorddata\n      });\n    }\n\n    if (JSON.stringify(updaterecorddatafromstate) !== JSON.stringify(updaterecorddata)) {\n      for (let i in recordDataTemp) {\n        for (let j in updaterecorddata) {\n          if (recordDataTemp[i].id === updaterecorddata[j].id) {\n            recordDataTemp[i] = Object.assign(recordDataTemp[i], updaterecorddata[j]);\n          }\n        }\n\n        for (let i in recordData) {\n          for (let j in updaterecorddata) {\n            if (recordData[i].id === updaterecorddata[j].id) {\n              recordData[i] = Object.assign(recordData[i], updaterecorddata[j]);\n            }\n          }\n        }\n\n        this.setState({\n          recordDataTemp: recordDataTemp,\n          recordData: recordData,\n          updaterecorddatafromstate: updaterecorddata\n        });\n      }\n    }\n  }\n\n  updateComponentData() {}\n\n  render() {\n    let {\n      columnMetadata,\n      activeTableviewName,\n      listrecordcompsperrow\n    } = this.props;\n    let {\n      recordData\n    } = this.state;\n    let mainpanelHtml = [];\n    let activeColumnMetadata = columnMetadata[activeTableviewName];\n    console.log(activeColumnMetadata); // buttons\n\n    let activeButtons = activeColumnMetadata.buttons;\n    let buttonsArray = [];\n    let buttonsArraySorted = [];\n    let buttonsArrayHtml = [];\n\n    for (let i in activeButtons) {\n      buttonsArray.push(activeButtons[i]);\n    }\n\n    buttonsArraySorted = sortArray(buttonsArray, \"order\", \"integer\");\n\n    for (let i in buttonsArraySorted) {\n      buttonsArrayHtml.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        children: buttonsArraySorted[i].label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }, this));\n    }\n\n    mainpanelHtml.push(buttonsArrayHtml); // dropdown\n\n    let dropdownOptionsHtml = [];\n    let dropdownArray = [];\n    let dropdownArraySorted = [];\n\n    for (let i in columnMetadata) {\n      dropdownArray.push(columnMetadata[i]);\n    }\n\n    dropdownArraySorted = sortArray(dropdownArray, \"order\", \"integer\");\n\n    for (let i in dropdownArraySorted) {\n      dropdownOptionsHtml.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        children: dropdownArraySorted[i].label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 32\n      }, this));\n    }\n\n    mainpanelHtml.push( /*#__PURE__*/_jsxDEV(\"select\", {\n      children: [dropdownOptionsHtml, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 24\n    }, this)); // datapanel\n\n    let dataHtml = []; // let dataprops = [];\n\n    let columnsArray = [];\n    let columnsArraySorted = [];\n\n    for (let i in activeColumnMetadata.columns) {\n      columnsArray.push(activeColumnMetadata.columns[i]);\n    }\n\n    columnsArraySorted = sortArray(columnsArray, \"order\", \"integer\");\n\n    for (let i in recordData) {\n      let fieldDataprops = [];\n\n      for (let j in columnsArraySorted) {\n        fieldDataprops.push({\n          label: columnsArraySorted[j].label,\n          name: \"\",\n          type: fieldTypeHtmltoDBmapping({\n            fieldType: columnsArraySorted[j].type,\n            inputOrOutput: \"output\"\n          }),\n          width: columnsArraySorted[j] ? columnsArraySorted[j].width : \"50%\",\n          height: columnsArraySorted[j] ? columnsArraySorted[j].height : \"50%\",\n          hidelabel: columnsArraySorted[j].hidelabel,\n          direction: columnsArraySorted[j].direction,\n          placeholder: \"\",\n          required: \"false\",\n          readonly: \"true\",\n          defaultvalue: recordData[i][columnsArraySorted[j].name],\n          clientstatename: \"\",\n          clientstatetype: \"\"\n        });\n      }\n\n      let listrecordcompsperrowpercentage = 100 / listrecordcompsperrow + \"%\";\n      console.log(listrecordcompsperrowpercentage);\n      dataHtml.push( /*#__PURE__*/_jsxDEV(Htmlform, {\n        style: {\n          width: listrecordcompsperrowpercentage\n        },\n        inputChanged: \"\",\n        clkHandler: this.clickHandler,\n        inputKeyUp: \"\",\n        dataprops: fieldDataprops,\n        bgcolor: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this));\n    }\n\n    mainpanelHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb org-fr org-fjc-sb org-fai-s \",\n      style: {\n        backgroundColor: \"#F2F2F2\"\n      },\n      children: dataHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this));\n    console.log(columnMetadata);\n    console.log(this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"org-fr\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: mainpanelHtml\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.tableActionBtnClick,\n            \"data-name\": \"\",\n            \"data-actionid\": \"\",\n            \"data-actiontype\": \"morerecordsbutton\",\n            children: \"More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/listtable.js"],"names":["React","Component","sortArray","fieldTypeHtmltoDBmapping","Htmlform","F","constructor","props","tableActionBtnClick","e","console","log","target","dataset","itemListData","recordDataTemp","state","name","tableCheckBoxElements","document","querySelectorAll","i","length","j","rowhtmlid1","checked","push","tableOnclick","itemLabel","itemName","itemType","itemData","setState","downloadTableasCSV","actiontype","itemId","actionid","mainpanelHtml","recordData","selectedrecordData","updaterecorddatafromstate","morerecorddatafromstate","componentDidMount","totalRows","selectedColumn","componentDidUpdate","prevProps","morerecorddata","updaterecorddata","JSON","stringify","id","Object","assign","updateComponentData","render","columnMetadata","activeTableviewName","listrecordcompsperrow","activeColumnMetadata","activeButtons","buttons","buttonsArray","buttonsArraySorted","buttonsArrayHtml","label","dropdownOptionsHtml","dropdownArray","dropdownArraySorted","dataHtml","columnsArray","columnsArraySorted","columns","fieldDataprops","type","fieldType","inputOrOutput","width","height","hidelabel","direction","placeholder","required","readonly","defaultvalue","clientstatename","clientstatetype","listrecordcompsperrowpercentage","clickHandler","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { sortArray, fieldTypeHtmltoDBmapping } from \"../js/index\";\nimport Htmlform from \"./htmlformnew\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainpanelHtml: [],\n      recordData: [],\n      recordDataTemp: [],\n      selectedrecordData: [],\n      updaterecorddatafromstate: [],\n      morerecorddatafromstate: [],\n    };\n  }\n  componentDidMount() {\n    if (this.props.recordData) {\n      let totalRows = this.props.recordData.length;\n      this.setState({\n        totalRows: totalRows,\n        recordData: this.props.recordData,\n        recordDataTemp: this.props.recordData,\n        selectedColumn: \"\",\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.morerecorddata);\n    let {\n      recordData,\n      recordDataTemp,\n      updaterecorddatafromstate,\n      morerecorddatafromstate,\n    } = this.state;\n    let { morerecorddata, updaterecorddata } = this.props;\n    //  let { prevmorerecorddata, prevupdaterecorddata } = prevProps;\n    if (\n      JSON.stringify(morerecorddatafromstate) !== JSON.stringify(morerecorddata)\n    ) {\n      for (let i in morerecorddata) {\n        recordDataTemp.push(morerecorddata[i]);\n      }\n      this.setState({\n        recordDataTemp: recordDataTemp,\n        recordData: recordData,\n        morerecorddatafromstate: morerecorddata,\n      });\n    }\n\n    if (\n      JSON.stringify(updaterecorddatafromstate) !==\n      JSON.stringify(updaterecorddata)\n    ) {\n      for (let i in recordDataTemp) {\n        for (let j in updaterecorddata) {\n          if (recordDataTemp[i].id === updaterecorddata[j].id) {\n            recordDataTemp[i] = Object.assign(\n              recordDataTemp[i],\n              updaterecorddata[j]\n            );\n          }\n        }\n\n        for (let i in recordData) {\n          for (let j in updaterecorddata) {\n            if (recordData[i].id === updaterecorddata[j].id) {\n              recordData[i] = Object.assign(recordData[i], updaterecorddata[j]);\n            }\n          }\n        }\n\n        this.setState({\n          recordDataTemp: recordDataTemp,\n          recordData: recordData,\n          updaterecorddatafromstate: updaterecorddata,\n        });\n      }\n    }\n  }\n\n  tableActionBtnClick = (e) => {\n    console.log(e.target.dataset);\n    let itemListData = [];\n    let { recordDataTemp } = this.state;\n    if (\n      e.target.dataset.name === \"upload\" ||\n      e.target.dataset.name === \"download\"\n    ) {\n      let tableCheckBoxElements = document.querySelectorAll(\n        \".tablecompinputcheckbox\"\n      );\n      console.log(tableCheckBoxElements);\n      for (let i = 0; i < tableCheckBoxElements.length; i++) {\n        for (let j = 0; j < recordDataTemp.length; j++) {\n          if (\n            tableCheckBoxElements[i].dataset.rowhtmlid1 ===\n              recordDataTemp[j][this.props.rowhtmlid1] &&\n            tableCheckBoxElements[i].checked\n          ) {\n            itemListData.push(recordDataTemp[j]);\n          }\n        }\n      }\n      console.log(itemListData);\n      if (e.target.dataset.name === \"upload\") {\n        this.props.tableOnclick({\n          itemLabel: \"\",\n          itemName: e.target.dataset.name,\n          itemType: \"tablebutton\",\n          itemData: \"\",\n          itemListData: itemListData,\n        });\n      }\n\n      if (e.target.dataset.name === \"download\") {\n        this.setState({ downloadTableasCSV: true });\n      }\n    } else {\n      this.props.tableOnclick({\n        itemLabel: \"\",\n        itemName: e.target.dataset.name,\n        itemType: e.target.dataset.actiontype,\n        itemId: e.target.dataset.actionid,\n        actionid: e.target.dataset.actionid,\n        itemData: \"\",\n        itemListData: itemListData,\n      });\n    }\n  };\n\n  updateComponentData() {}\n\n  render() {\n    let {\n      columnMetadata,\n\n      activeTableviewName,\n      listrecordcompsperrow,\n    } = this.props;\n    let { recordData } = this.state;\n    let mainpanelHtml = [];\n\n    let activeColumnMetadata = columnMetadata[activeTableviewName];\n    console.log(activeColumnMetadata);\n\n    // buttons\n    let activeButtons = activeColumnMetadata.buttons;\n    let buttonsArray = [];\n    let buttonsArraySorted = [];\n    let buttonsArrayHtml = [];\n    for (let i in activeButtons) {\n      buttonsArray.push(activeButtons[i]);\n    }\n    buttonsArraySorted = sortArray(buttonsArray, \"order\", \"integer\");\n    for (let i in buttonsArraySorted) {\n      buttonsArrayHtml.push(<button>{buttonsArraySorted[i].label}</button>);\n    }\n    mainpanelHtml.push(buttonsArrayHtml);\n\n    // dropdown\n    let dropdownOptionsHtml = [];\n    let dropdownArray = [];\n    let dropdownArraySorted = [];\n\n    for (let i in columnMetadata) {\n      dropdownArray.push(columnMetadata[i]);\n    }\n    dropdownArraySorted = sortArray(dropdownArray, \"order\", \"integer\");\n    for (let i in dropdownArraySorted) {\n      dropdownOptionsHtml.push(<option>{dropdownArraySorted[i].label}</option>);\n    }\n    mainpanelHtml.push(<select>{dropdownOptionsHtml} </select>);\n\n    // datapanel\n    let dataHtml = [];\n    // let dataprops = [];\n    let columnsArray = [];\n    let columnsArraySorted = [];\n\n    for (let i in activeColumnMetadata.columns) {\n      columnsArray.push(activeColumnMetadata.columns[i]);\n    }\n    columnsArraySorted = sortArray(columnsArray, \"order\", \"integer\");\n    for (let i in recordData) {\n      let fieldDataprops = [];\n      for (let j in columnsArraySorted) {\n        fieldDataprops.push({\n          label: columnsArraySorted[j].label,\n          name: \"\",\n\n          type: fieldTypeHtmltoDBmapping({\n            fieldType: columnsArraySorted[j].type,\n            inputOrOutput: \"output\",\n          }),\n\n          width: columnsArraySorted[j] ? columnsArraySorted[j].width : \"50%\",\n\n          height: columnsArraySorted[j] ? columnsArraySorted[j].height : \"50%\",\n          hidelabel: columnsArraySorted[j].hidelabel,\n          direction: columnsArraySorted[j].direction,\n          placeholder: \"\",\n          required: \"false\",\n          readonly: \"true\",\n\n          defaultvalue: recordData[i][columnsArraySorted[j].name],\n\n          clientstatename: \"\",\n          clientstatetype: \"\",\n        });\n      }\n      let listrecordcompsperrowpercentage = 100 / listrecordcompsperrow + \"%\";\n      console.log(listrecordcompsperrowpercentage);\n      dataHtml.push(\n        <Htmlform\n          style={{ width: listrecordcompsperrowpercentage }}\n          inputChanged=\"\"\n          clkHandler={this.clickHandler}\n          inputKeyUp=\"\"\n          dataprops={fieldDataprops}\n          bgcolor=\"\"\n        />\n      );\n    }\n\n    mainpanelHtml.push(\n      <div\n        className=\"org-flexbasis-100p org-mflexbasis-100p org-lflexbasis-100p org-bb org-fr org-fjc-sb org-fai-s \"\n        style={{\n          backgroundColor: \"#F2F2F2\",\n        }}\n      >\n        {dataHtml}\n      </div>\n    );\n\n    console.log(columnMetadata);\n\n    console.log(this.props);\n\n    return (\n      <div className=\"org-fr\">\n        <div>\n          <input />\n        </div>\n        <div>\n          <div>{mainpanelHtml}</div>\n          <div>\n            <button\n              onClick={this.tableActionBtnClick}\n              data-name=\"\"\n              data-actionid=\"\"\n              data-actiontype=\"morerecordsbutton\"\n            >\n              More\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}