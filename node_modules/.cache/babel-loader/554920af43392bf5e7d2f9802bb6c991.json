{"ast":null,"code":"/*\nCopyright 2015 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/var DRIVE_UPLOAD_URL=\"https://www.googleapis.com/upload/drive/v2/files/\";/**\n * Helper for implementing retries with backoff. Initial retry\n * delay is 1 second, increasing by 2x (+jitter) for subsequent retries\n *\n * @constructor\n */var RetryHandler=function RetryHandler(){this.interval=1000;// Start at one second\nthis.maxInterval=60*1000;// Don't wait longer than a minute\n};/**\n * Invoke the function after waiting\n *\n * @param {function} fn Function to invoke\n */RetryHandler.prototype.retry=function(fn){setTimeout(fn,this.interval);this.interval=this.nextInterval_();};/**\n * Reset the counter (e.g. after successful request.)\n */RetryHandler.prototype.reset=function(){this.interval=1000;};/**\n * Calculate the next wait time.\n * @return {number} Next wait interval, in milliseconds\n *\n * @private\n */RetryHandler.prototype.nextInterval_=function(){var interval=this.interval*2+this.getRandomInt_(0,1000);return Math.min(interval,this.maxInterval);};/**\n * Get a random int in the range of min to max. Used to add jitter to wait times.\n *\n * @param {number} min Lower bounds\n * @param {number} max Upper bounds\n * @private\n */RetryHandler.prototype.getRandomInt_=function(min,max){return Math.floor(Math.random()*(max-min+1)+min);};/**\n * Helper class for resumable uploads using XHR/CORS. Can upload any Blob-like item, whether\n * files or in-memory constructs.\n *\n * @example\n * var content = new Blob([\"Hello world\"], {\"type\": \"text/plain\"});\n * var uploader = new MediaUploader({\n *   file: content,\n *   token: accessToken,\n *   onComplete: function(data) { ... }\n *   onError: function(data) { ... }\n * });\n * uploader.upload();\n *\n * @constructor\n * @param {object} options Hash of options\n * @param {string} options.token Access token\n * @param {blob} options.file Blob-like item to upload\n * @param {string} [options.fileId] ID of file if replacing\n * @param {object} [options.params] Additional query parameters\n * @param {string} [options.contentType] Content-type, if overriding the type of the blob.\n * @param {object} [options.metadata] File metadata\n * @param {function} [options.onComplete] Callback for when upload is complete\n * @param {function} [options.onProgress] Callback for status for the in-progress upload\n * @param {function} [options.onError] Callback if upload fails\n */export function MediaUploader(options){var noop=function noop(){};this.file=options.file;this.contentType=options.contentType||this.file.type||\"application/octet-stream\";this.metadata=options.metadata||{title:this.file.name,mimeType:this.contentType};this.token=options.token;this.onComplete=options.onComplete||noop;this.onProgress=options.onProgress||noop;this.onError=options.onError||noop;this.offset=options.offset||0;this.chunkSize=options.chunkSize||0;this.retryHandler=new RetryHandler();this.url=options.url;if(!this.url){var params=options.params||{};params.uploadType=\"resumable\";this.url=this.buildUrl_(options.fileId,params,options.baseUrl);}this.httpMethod=options.fileId?\"PUT\":\"POST\";}/**\n * Initiate the upload.\n */MediaUploader.prototype.upload=function(){var self=this;var xhr=new XMLHttpRequest();xhr.open(this.httpMethod,this.url,true);xhr.setRequestHeader(\"Authorization\",\"Bearer \"+this.token);xhr.setRequestHeader(\"Content-Type\",\"application/json\");xhr.setRequestHeader(\"X-Upload-Content-Length\",this.file.size);xhr.setRequestHeader(\"X-Upload-Content-Type\",this.contentType);xhr.onload=function(e){if(e.target.status<400){var location=e.target.getResponseHeader(\"Location\");this.url=location;this.sendFile_();}else{this.onUploadError_(e);}}.bind(this);xhr.onerror=this.onUploadError_.bind(this);xhr.send(JSON.stringify(this.metadata));};/**\n * Send the actual file content.\n *\n * @private\n */MediaUploader.prototype.sendFile_=function(){var content=this.file;var end=this.file.size;if(this.offset||this.chunkSize){// Only bother to slice the file if we're either resuming or uploading in chunks\nif(this.chunkSize){end=Math.min(this.offset+this.chunkSize,this.file.size);}content=content.slice(this.offset,end);}var xhr=new XMLHttpRequest();xhr.open(\"PUT\",this.url,true);xhr.setRequestHeader(\"Content-Type\",this.contentType);xhr.setRequestHeader(\"Content-Range\",\"bytes \"+this.offset+\"-\"+(end-1)+\"/\"+this.file.size);xhr.setRequestHeader(\"X-Upload-Content-Type\",this.file.type);if(xhr.upload){xhr.upload.addEventListener(\"progress\",this.onProgress);}xhr.onload=this.onContentUploadSuccess_.bind(this);xhr.onerror=this.onContentUploadError_.bind(this);xhr.send(content);};/**\n * Query for the state of the file for resumption.\n *\n * @private\n */MediaUploader.prototype.resume_=function(){var xhr=new XMLHttpRequest();xhr.open(\"PUT\",this.url,true);xhr.setRequestHeader(\"Content-Range\",\"bytes */\"+this.file.size);xhr.setRequestHeader(\"X-Upload-Content-Type\",this.file.type);if(xhr.upload){xhr.upload.addEventListener(\"progress\",this.onProgress);}xhr.onload=this.onContentUploadSuccess_.bind(this);xhr.onerror=this.onContentUploadError_.bind(this);xhr.send();};/**\n * Extract the last saved range if available in the request.\n *\n * @param {XMLHttpRequest} xhr Request object\n */MediaUploader.prototype.extractRange_=function(xhr){var range=xhr.getResponseHeader(\"Range\");if(range){this.offset=parseInt(range.match(/\\d+/g).pop(),10)+1;}};/**\n * Handle successful responses for uploads. Depending on the context,\n * may continue with uploading the next chunk of the file or, if complete,\n * invokes the caller's callback.\n *\n * @private\n * @param {object} e XHR event\n */MediaUploader.prototype.onContentUploadSuccess_=function(e){if(e.target.status==200||e.target.status==201){this.onComplete(e.target.response);}else if(e.target.status==308){this.extractRange_(e.target);this.retryHandler.reset();this.sendFile_();}};/**\n * Handles errors for uploads. Either retries or aborts depending\n * on the error.\n *\n * @private\n * @param {object} e XHR event\n */MediaUploader.prototype.onContentUploadError_=function(e){if(e.target.status&&e.target.status<500){this.onError(e.target.response);}else{this.retryHandler.retry(this.resume_.bind(this));}};/**\n * Handles errors for the initial request.\n *\n * @private\n * @param {object} e XHR event\n */MediaUploader.prototype.onUploadError_=function(e){this.onError(e.target.response);// TODO - Retries for initial upload\n};/**\n * Construct a query string from a hash/object\n *\n * @private\n * @param {object} [params] Key/value pairs for query string\n * @return {string} query string\n */MediaUploader.prototype.buildQuery_=function(params){params=params||{};return Object.keys(params).map(function(key){return encodeURIComponent(key)+\"=\"+encodeURIComponent(params[key]);}).join(\"&\");};/**\n * Build the drive upload URL\n *\n * @private\n * @param {string} [id] File ID if replacing\n * @param {object} [params] Query parameters\n * @return {string} URL\n */MediaUploader.prototype.buildUrl_=function(id,params,baseUrl){var url=baseUrl||DRIVE_UPLOAD_URL;if(id){url+=id;}var query=this.buildQuery_(params);if(query){url+=\"?\"+query;}return url;};","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/videostorage/cors_upload.js"],"names":["DRIVE_UPLOAD_URL","RetryHandler","interval","maxInterval","prototype","retry","fn","setTimeout","nextInterval_","reset","getRandomInt_","Math","min","max","floor","random","MediaUploader","options","noop","file","contentType","type","metadata","title","name","mimeType","token","onComplete","onProgress","onError","offset","chunkSize","retryHandler","url","params","uploadType","buildUrl_","fileId","baseUrl","httpMethod","upload","self","xhr","XMLHttpRequest","open","setRequestHeader","size","onload","e","target","status","location","getResponseHeader","sendFile_","onUploadError_","bind","onerror","send","JSON","stringify","content","end","slice","addEventListener","onContentUploadSuccess_","onContentUploadError_","resume_","extractRange_","range","parseInt","match","pop","response","buildQuery_","Object","keys","map","key","encodeURIComponent","join","id","query"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,GAAIA,CAAAA,gBAAgB,CAAG,mDAAvB,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,GAAIC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAY,CAC7B,KAAKC,QAAL,CAAgB,IAAhB,CAAsB;AACtB,KAAKC,WAAL,CAAmB,GAAK,IAAxB,CAA8B;AAC/B,CAHD,CAKA;AACA;AACA;AACA;AACA,GACAF,YAAY,CAACG,SAAb,CAAuBC,KAAvB,CAA+B,SAAUC,EAAV,CAAc,CAC3CC,UAAU,CAACD,EAAD,CAAK,KAAKJ,QAAV,CAAV,CACA,KAAKA,QAAL,CAAgB,KAAKM,aAAL,EAAhB,CACD,CAHD,CAKA;AACA;AACA,GACAP,YAAY,CAACG,SAAb,CAAuBK,KAAvB,CAA+B,UAAY,CACzC,KAAKP,QAAL,CAAgB,IAAhB,CACD,CAFD,CAIA;AACA;AACA;AACA;AACA;AACA,GACAD,YAAY,CAACG,SAAb,CAAuBI,aAAvB,CAAuC,UAAY,CACjD,GAAIN,CAAAA,QAAQ,CAAG,KAAKA,QAAL,CAAgB,CAAhB,CAAoB,KAAKQ,aAAL,CAAmB,CAAnB,CAAsB,IAAtB,CAAnC,CACA,MAAOC,CAAAA,IAAI,CAACC,GAAL,CAASV,QAAT,CAAmB,KAAKC,WAAxB,CAAP,CACD,CAHD,CAKA;AACA;AACA;AACA;AACA;AACA;AACA,GACAF,YAAY,CAACG,SAAb,CAAuBM,aAAvB,CAAuC,SAAUE,GAAV,CAAeC,GAAf,CAAoB,CACzD,MAAOF,CAAAA,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACI,MAAL,IAAiBF,GAAG,CAAGD,GAAN,CAAY,CAA7B,EAAkCA,GAA7C,CAAP,CACD,CAFD,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASI,CAAAA,aAAT,CAAuBC,OAAvB,CAAgC,CACrC,GAAIC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAY,CAAE,CAAzB,CACA,KAAKC,IAAL,CAAYF,OAAO,CAACE,IAApB,CACA,KAAKC,WAAL,CACEH,OAAO,CAACG,WAAR,EAAuB,KAAKD,IAAL,CAAUE,IAAjC,EAAyC,0BAD3C,CAEA,KAAKC,QAAL,CAAgBL,OAAO,CAACK,QAAR,EAAoB,CAClCC,KAAK,CAAE,KAAKJ,IAAL,CAAUK,IADiB,CAElCC,QAAQ,CAAE,KAAKL,WAFmB,CAApC,CAIA,KAAKM,KAAL,CAAaT,OAAO,CAACS,KAArB,CACA,KAAKC,UAAL,CAAkBV,OAAO,CAACU,UAAR,EAAsBT,IAAxC,CACA,KAAKU,UAAL,CAAkBX,OAAO,CAACW,UAAR,EAAsBV,IAAxC,CACA,KAAKW,OAAL,CAAeZ,OAAO,CAACY,OAAR,EAAmBX,IAAlC,CACA,KAAKY,MAAL,CAAcb,OAAO,CAACa,MAAR,EAAkB,CAAhC,CACA,KAAKC,SAAL,CAAiBd,OAAO,CAACc,SAAR,EAAqB,CAAtC,CACA,KAAKC,YAAL,CAAoB,GAAI/B,CAAAA,YAAJ,EAApB,CAEA,KAAKgC,GAAL,CAAWhB,OAAO,CAACgB,GAAnB,CACA,GAAI,CAAC,KAAKA,GAAV,CAAe,CACb,GAAIC,CAAAA,MAAM,CAAGjB,OAAO,CAACiB,MAAR,EAAkB,EAA/B,CACAA,MAAM,CAACC,UAAP,CAAoB,WAApB,CACA,KAAKF,GAAL,CAAW,KAAKG,SAAL,CAAenB,OAAO,CAACoB,MAAvB,CAA+BH,MAA/B,CAAuCjB,OAAO,CAACqB,OAA/C,CAAX,CACD,CACD,KAAKC,UAAL,CAAkBtB,OAAO,CAACoB,MAAR,CAAiB,KAAjB,CAAyB,MAA3C,CACD,CAED;AACA;AACA,GACArB,aAAa,CAACZ,SAAd,CAAwBoC,MAAxB,CAAiC,UAAY,CAC3C,GAAIC,CAAAA,IAAI,CAAG,IAAX,CACA,GAAIC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAV,CAEAD,GAAG,CAACE,IAAJ,CAAS,KAAKL,UAAd,CAA0B,KAAKN,GAA/B,CAAoC,IAApC,EACAS,GAAG,CAACG,gBAAJ,CAAqB,eAArB,CAAsC,UAAY,KAAKnB,KAAvD,EACAgB,GAAG,CAACG,gBAAJ,CAAqB,cAArB,CAAqC,kBAArC,EACAH,GAAG,CAACG,gBAAJ,CAAqB,yBAArB,CAAgD,KAAK1B,IAAL,CAAU2B,IAA1D,EACAJ,GAAG,CAACG,gBAAJ,CAAqB,uBAArB,CAA8C,KAAKzB,WAAnD,EAEAsB,GAAG,CAACK,MAAJ,CAAa,SAAUC,CAAV,CAAa,CACxB,GAAIA,CAAC,CAACC,MAAF,CAASC,MAAT,CAAkB,GAAtB,CAA2B,CACzB,GAAIC,CAAAA,QAAQ,CAAGH,CAAC,CAACC,MAAF,CAASG,iBAAT,CAA2B,UAA3B,CAAf,CACA,KAAKnB,GAAL,CAAWkB,QAAX,CACA,KAAKE,SAAL,GACD,CAJD,IAIO,CACL,KAAKC,cAAL,CAAoBN,CAApB,EACD,CACF,CARY,CAQXO,IARW,CAQN,IARM,CAAb,CASAb,GAAG,CAACc,OAAJ,CAAc,KAAKF,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAd,CACAb,GAAG,CAACe,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAe,KAAKrC,QAApB,CAAT,EACD,CArBD,CAuBA;AACA;AACA;AACA;AACA,GACAN,aAAa,CAACZ,SAAd,CAAwBiD,SAAxB,CAAoC,UAAY,CAC9C,GAAIO,CAAAA,OAAO,CAAG,KAAKzC,IAAnB,CACA,GAAI0C,CAAAA,GAAG,CAAG,KAAK1C,IAAL,CAAU2B,IAApB,CAEA,GAAI,KAAKhB,MAAL,EAAe,KAAKC,SAAxB,CAAmC,CACjC;AACA,GAAI,KAAKA,SAAT,CAAoB,CAClB8B,GAAG,CAAGlD,IAAI,CAACC,GAAL,CAAS,KAAKkB,MAAL,CAAc,KAAKC,SAA5B,CAAuC,KAAKZ,IAAL,CAAU2B,IAAjD,CAAN,CACD,CACDc,OAAO,CAAGA,OAAO,CAACE,KAAR,CAAc,KAAKhC,MAAnB,CAA2B+B,GAA3B,CAAV,CACD,CAED,GAAInB,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAV,CACAD,GAAG,CAACE,IAAJ,CAAS,KAAT,CAAgB,KAAKX,GAArB,CAA0B,IAA1B,EACAS,GAAG,CAACG,gBAAJ,CAAqB,cAArB,CAAqC,KAAKzB,WAA1C,EACAsB,GAAG,CAACG,gBAAJ,CACE,eADF,CAEE,SAAW,KAAKf,MAAhB,CAAyB,GAAzB,EAAgC+B,GAAG,CAAG,CAAtC,EAA2C,GAA3C,CAAiD,KAAK1C,IAAL,CAAU2B,IAF7D,EAIAJ,GAAG,CAACG,gBAAJ,CAAqB,uBAArB,CAA8C,KAAK1B,IAAL,CAAUE,IAAxD,EACA,GAAIqB,GAAG,CAACF,MAAR,CAAgB,CACdE,GAAG,CAACF,MAAJ,CAAWuB,gBAAX,CAA4B,UAA5B,CAAwC,KAAKnC,UAA7C,EACD,CACDc,GAAG,CAACK,MAAJ,CAAa,KAAKiB,uBAAL,CAA6BT,IAA7B,CAAkC,IAAlC,CAAb,CACAb,GAAG,CAACc,OAAJ,CAAc,KAAKS,qBAAL,CAA2BV,IAA3B,CAAgC,IAAhC,CAAd,CACAb,GAAG,CAACe,IAAJ,CAASG,OAAT,EACD,CA1BD,CA4BA;AACA;AACA;AACA;AACA,GACA5C,aAAa,CAACZ,SAAd,CAAwB8D,OAAxB,CAAkC,UAAY,CAC5C,GAAIxB,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAV,CACAD,GAAG,CAACE,IAAJ,CAAS,KAAT,CAAgB,KAAKX,GAArB,CAA0B,IAA1B,EACAS,GAAG,CAACG,gBAAJ,CAAqB,eAArB,CAAsC,WAAa,KAAK1B,IAAL,CAAU2B,IAA7D,EACAJ,GAAG,CAACG,gBAAJ,CAAqB,uBAArB,CAA8C,KAAK1B,IAAL,CAAUE,IAAxD,EACA,GAAIqB,GAAG,CAACF,MAAR,CAAgB,CACdE,GAAG,CAACF,MAAJ,CAAWuB,gBAAX,CAA4B,UAA5B,CAAwC,KAAKnC,UAA7C,EACD,CACDc,GAAG,CAACK,MAAJ,CAAa,KAAKiB,uBAAL,CAA6BT,IAA7B,CAAkC,IAAlC,CAAb,CACAb,GAAG,CAACc,OAAJ,CAAc,KAAKS,qBAAL,CAA2BV,IAA3B,CAAgC,IAAhC,CAAd,CACAb,GAAG,CAACe,IAAJ,GACD,CAXD,CAaA;AACA;AACA;AACA;AACA,GACAzC,aAAa,CAACZ,SAAd,CAAwB+D,aAAxB,CAAwC,SAAUzB,GAAV,CAAe,CACrD,GAAI0B,CAAAA,KAAK,CAAG1B,GAAG,CAACU,iBAAJ,CAAsB,OAAtB,CAAZ,CACA,GAAIgB,KAAJ,CAAW,CACT,KAAKtC,MAAL,CAAcuC,QAAQ,CAACD,KAAK,CAACE,KAAN,CAAY,MAAZ,EAAoBC,GAApB,EAAD,CAA4B,EAA5B,CAAR,CAA0C,CAAxD,CACD,CACF,CALD,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAvD,aAAa,CAACZ,SAAd,CAAwB4D,uBAAxB,CAAkD,SAAUhB,CAAV,CAAa,CAC7D,GAAIA,CAAC,CAACC,MAAF,CAASC,MAAT,EAAmB,GAAnB,EAA0BF,CAAC,CAACC,MAAF,CAASC,MAAT,EAAmB,GAAjD,CAAsD,CACpD,KAAKvB,UAAL,CAAgBqB,CAAC,CAACC,MAAF,CAASuB,QAAzB,EACD,CAFD,IAEO,IAAIxB,CAAC,CAACC,MAAF,CAASC,MAAT,EAAmB,GAAvB,CAA4B,CACjC,KAAKiB,aAAL,CAAmBnB,CAAC,CAACC,MAArB,EACA,KAAKjB,YAAL,CAAkBvB,KAAlB,GACA,KAAK4C,SAAL,GACD,CACF,CARD,CAUA;AACA;AACA;AACA;AACA;AACA;AACA,GACArC,aAAa,CAACZ,SAAd,CAAwB6D,qBAAxB,CAAgD,SAAUjB,CAAV,CAAa,CAC3D,GAAIA,CAAC,CAACC,MAAF,CAASC,MAAT,EAAmBF,CAAC,CAACC,MAAF,CAASC,MAAT,CAAkB,GAAzC,CAA8C,CAC5C,KAAKrB,OAAL,CAAamB,CAAC,CAACC,MAAF,CAASuB,QAAtB,EACD,CAFD,IAEO,CACL,KAAKxC,YAAL,CAAkB3B,KAAlB,CAAwB,KAAK6D,OAAL,CAAaX,IAAb,CAAkB,IAAlB,CAAxB,EACD,CACF,CAND,CAQA;AACA;AACA;AACA;AACA;AACA,GACAvC,aAAa,CAACZ,SAAd,CAAwBkD,cAAxB,CAAyC,SAAUN,CAAV,CAAa,CACpD,KAAKnB,OAAL,CAAamB,CAAC,CAACC,MAAF,CAASuB,QAAtB,EAAiC;AAClC,CAFD,CAIA;AACA;AACA;AACA;AACA;AACA;AACA,GACAxD,aAAa,CAACZ,SAAd,CAAwBqE,WAAxB,CAAsC,SAAUvC,MAAV,CAAkB,CACtDA,MAAM,CAAGA,MAAM,EAAI,EAAnB,CACA,MAAOwC,CAAAA,MAAM,CAACC,IAAP,CAAYzC,MAAZ,EACJ0C,GADI,CACA,SAAUC,GAAV,CAAe,CAClB,MAAOC,CAAAA,kBAAkB,CAACD,GAAD,CAAlB,CAA0B,GAA1B,CAAgCC,kBAAkB,CAAC5C,MAAM,CAAC2C,GAAD,CAAP,CAAzD,CACD,CAHI,EAIJE,IAJI,CAIC,GAJD,CAAP,CAKD,CAPD,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA/D,aAAa,CAACZ,SAAd,CAAwBgC,SAAxB,CAAoC,SAAU4C,EAAV,CAAc9C,MAAd,CAAsBI,OAAtB,CAA+B,CACjE,GAAIL,CAAAA,GAAG,CAAGK,OAAO,EAAItC,gBAArB,CACA,GAAIgF,EAAJ,CAAQ,CACN/C,GAAG,EAAI+C,EAAP,CACD,CACD,GAAIC,CAAAA,KAAK,CAAG,KAAKR,WAAL,CAAiBvC,MAAjB,CAAZ,CACA,GAAI+C,KAAJ,CAAW,CACThD,GAAG,EAAI,IAAMgD,KAAb,CACD,CACD,MAAOhD,CAAAA,GAAP,CACD,CAVD","sourcesContent":["/*\nCopyright 2015 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar DRIVE_UPLOAD_URL = \"https://www.googleapis.com/upload/drive/v2/files/\";\n\n/**\n * Helper for implementing retries with backoff. Initial retry\n * delay is 1 second, increasing by 2x (+jitter) for subsequent retries\n *\n * @constructor\n */\nvar RetryHandler = function () {\n  this.interval = 1000; // Start at one second\n  this.maxInterval = 60 * 1000; // Don't wait longer than a minute\n};\n\n/**\n * Invoke the function after waiting\n *\n * @param {function} fn Function to invoke\n */\nRetryHandler.prototype.retry = function (fn) {\n  setTimeout(fn, this.interval);\n  this.interval = this.nextInterval_();\n};\n\n/**\n * Reset the counter (e.g. after successful request.)\n */\nRetryHandler.prototype.reset = function () {\n  this.interval = 1000;\n};\n\n/**\n * Calculate the next wait time.\n * @return {number} Next wait interval, in milliseconds\n *\n * @private\n */\nRetryHandler.prototype.nextInterval_ = function () {\n  var interval = this.interval * 2 + this.getRandomInt_(0, 1000);\n  return Math.min(interval, this.maxInterval);\n};\n\n/**\n * Get a random int in the range of min to max. Used to add jitter to wait times.\n *\n * @param {number} min Lower bounds\n * @param {number} max Upper bounds\n * @private\n */\nRetryHandler.prototype.getRandomInt_ = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n/**\n * Helper class for resumable uploads using XHR/CORS. Can upload any Blob-like item, whether\n * files or in-memory constructs.\n *\n * @example\n * var content = new Blob([\"Hello world\"], {\"type\": \"text/plain\"});\n * var uploader = new MediaUploader({\n *   file: content,\n *   token: accessToken,\n *   onComplete: function(data) { ... }\n *   onError: function(data) { ... }\n * });\n * uploader.upload();\n *\n * @constructor\n * @param {object} options Hash of options\n * @param {string} options.token Access token\n * @param {blob} options.file Blob-like item to upload\n * @param {string} [options.fileId] ID of file if replacing\n * @param {object} [options.params] Additional query parameters\n * @param {string} [options.contentType] Content-type, if overriding the type of the blob.\n * @param {object} [options.metadata] File metadata\n * @param {function} [options.onComplete] Callback for when upload is complete\n * @param {function} [options.onProgress] Callback for status for the in-progress upload\n * @param {function} [options.onError] Callback if upload fails\n */\nexport function MediaUploader(options) {\n  var noop = function () {};\n  this.file = options.file;\n  this.contentType =\n    options.contentType || this.file.type || \"application/octet-stream\";\n  this.metadata = options.metadata || {\n    title: this.file.name,\n    mimeType: this.contentType,\n  };\n  this.token = options.token;\n  this.onComplete = options.onComplete || noop;\n  this.onProgress = options.onProgress || noop;\n  this.onError = options.onError || noop;\n  this.offset = options.offset || 0;\n  this.chunkSize = options.chunkSize || 0;\n  this.retryHandler = new RetryHandler();\n\n  this.url = options.url;\n  if (!this.url) {\n    var params = options.params || {};\n    params.uploadType = \"resumable\";\n    this.url = this.buildUrl_(options.fileId, params, options.baseUrl);\n  }\n  this.httpMethod = options.fileId ? \"PUT\" : \"POST\";\n}\n\n/**\n * Initiate the upload.\n */\nMediaUploader.prototype.upload = function () {\n  var self = this;\n  var xhr = new XMLHttpRequest();\n\n  xhr.open(this.httpMethod, this.url, true);\n  xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.token);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  xhr.setRequestHeader(\"X-Upload-Content-Length\", this.file.size);\n  xhr.setRequestHeader(\"X-Upload-Content-Type\", this.contentType);\n\n  xhr.onload = function (e) {\n    if (e.target.status < 400) {\n      var location = e.target.getResponseHeader(\"Location\");\n      this.url = location;\n      this.sendFile_();\n    } else {\n      this.onUploadError_(e);\n    }\n  }.bind(this);\n  xhr.onerror = this.onUploadError_.bind(this);\n  xhr.send(JSON.stringify(this.metadata));\n};\n\n/**\n * Send the actual file content.\n *\n * @private\n */\nMediaUploader.prototype.sendFile_ = function () {\n  var content = this.file;\n  var end = this.file.size;\n\n  if (this.offset || this.chunkSize) {\n    // Only bother to slice the file if we're either resuming or uploading in chunks\n    if (this.chunkSize) {\n      end = Math.min(this.offset + this.chunkSize, this.file.size);\n    }\n    content = content.slice(this.offset, end);\n  }\n\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"PUT\", this.url, true);\n  xhr.setRequestHeader(\"Content-Type\", this.contentType);\n  xhr.setRequestHeader(\n    \"Content-Range\",\n    \"bytes \" + this.offset + \"-\" + (end - 1) + \"/\" + this.file.size\n  );\n  xhr.setRequestHeader(\"X-Upload-Content-Type\", this.file.type);\n  if (xhr.upload) {\n    xhr.upload.addEventListener(\"progress\", this.onProgress);\n  }\n  xhr.onload = this.onContentUploadSuccess_.bind(this);\n  xhr.onerror = this.onContentUploadError_.bind(this);\n  xhr.send(content);\n};\n\n/**\n * Query for the state of the file for resumption.\n *\n * @private\n */\nMediaUploader.prototype.resume_ = function () {\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"PUT\", this.url, true);\n  xhr.setRequestHeader(\"Content-Range\", \"bytes */\" + this.file.size);\n  xhr.setRequestHeader(\"X-Upload-Content-Type\", this.file.type);\n  if (xhr.upload) {\n    xhr.upload.addEventListener(\"progress\", this.onProgress);\n  }\n  xhr.onload = this.onContentUploadSuccess_.bind(this);\n  xhr.onerror = this.onContentUploadError_.bind(this);\n  xhr.send();\n};\n\n/**\n * Extract the last saved range if available in the request.\n *\n * @param {XMLHttpRequest} xhr Request object\n */\nMediaUploader.prototype.extractRange_ = function (xhr) {\n  var range = xhr.getResponseHeader(\"Range\");\n  if (range) {\n    this.offset = parseInt(range.match(/\\d+/g).pop(), 10) + 1;\n  }\n};\n\n/**\n * Handle successful responses for uploads. Depending on the context,\n * may continue with uploading the next chunk of the file or, if complete,\n * invokes the caller's callback.\n *\n * @private\n * @param {object} e XHR event\n */\nMediaUploader.prototype.onContentUploadSuccess_ = function (e) {\n  if (e.target.status == 200 || e.target.status == 201) {\n    this.onComplete(e.target.response);\n  } else if (e.target.status == 308) {\n    this.extractRange_(e.target);\n    this.retryHandler.reset();\n    this.sendFile_();\n  }\n};\n\n/**\n * Handles errors for uploads. Either retries or aborts depending\n * on the error.\n *\n * @private\n * @param {object} e XHR event\n */\nMediaUploader.prototype.onContentUploadError_ = function (e) {\n  if (e.target.status && e.target.status < 500) {\n    this.onError(e.target.response);\n  } else {\n    this.retryHandler.retry(this.resume_.bind(this));\n  }\n};\n\n/**\n * Handles errors for the initial request.\n *\n * @private\n * @param {object} e XHR event\n */\nMediaUploader.prototype.onUploadError_ = function (e) {\n  this.onError(e.target.response); // TODO - Retries for initial upload\n};\n\n/**\n * Construct a query string from a hash/object\n *\n * @private\n * @param {object} [params] Key/value pairs for query string\n * @return {string} query string\n */\nMediaUploader.prototype.buildQuery_ = function (params) {\n  params = params || {};\n  return Object.keys(params)\n    .map(function (key) {\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n    })\n    .join(\"&\");\n};\n\n/**\n * Build the drive upload URL\n *\n * @private\n * @param {string} [id] File ID if replacing\n * @param {object} [params] Query parameters\n * @return {string} URL\n */\nMediaUploader.prototype.buildUrl_ = function (id, params, baseUrl) {\n  var url = baseUrl || DRIVE_UPLOAD_URL;\n  if (id) {\n    url += id;\n  }\n  var query = this.buildQuery_(params);\n  if (query) {\n    url += \"?\" + query;\n  }\n  return url;\n};\n"]},"metadata":{},"sourceType":"module"}