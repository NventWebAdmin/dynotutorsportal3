{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/note.js\";\nimport React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping } from \"../js/index\";\nimport { getLocalData, serverButtonHandler } from \"../js/index\";\nimport Rteditor from \"./richtexteditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = async () => {\n      let localdata = getLocalData(this.props);\n      console.log(localdata);\n      let {\n        orgname,\n        userid\n      } = localdata;\n      alert(document.getElementById(\"utilitynoteeditablediv\").innerHTML);\n      let recorddata = {\n        orgname: orgname,\n        userid: userid,\n        data: document.getElementById(\"utilitynoteeditablediv\").innerHTML\n      };\n      let result = await createRecord({\n        objectName: \"note\",\n        objectData: recorddata\n      });\n\n      if (result.isSuccess === \"false\") {\n        alert(result.message);\n      } else {\n        console.log(recorddata);\n      }\n    };\n\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datadisplaytype,\n      viewname\n    } = this.props.compprops;\n\n    if (viewname == null) {\n      viewname = \"recentlyviewed\";\n    }\n\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: \"\",\n      viewName: viewname,\n      datadisplaytype: datadisplaytype\n    });\n  }\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      datadisplaytype\n    } = props;\n    let {\n      mainPanelHtmlObj\n    } = this.state;\n    let dataParams = {\n      objectName: tableName,\n      objectData: {},\n      keyConditions: [{\n        field: \"orgname\",\n        value: orgname,\n        expression: \"=\"\n      }, {\n        field: \"userid\",\n        value: userId,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    };\n    let dataresult = await getRecorddata(dataParams);\n\n    if (dataresult.isSuccess === \"false\") {\n      alert(\"data\" + dataresult.message);\n    } else {\n      console.log(dataresult.dataprops.Items);\n\n      if (dataresult.dataprops.Items.length > 0) {\n        let notedata = dataresult.dataprops.Items[0].data;\n        console.log(notedata);\n        document.getElementById(\"utilitynoteeditablediv\").innerHTML = notedata;\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"50vh\",\n          backgroundColor: \"#FFFACD\",\n          color: \"black\"\n        },\n        contenteditable: \"true\",\n        id: \"utilitynoteeditablediv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rteditor, {\n        htmlid: \"utilitynoteeditablediv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        contenteditable: \"true\",\n        onClick: this.handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/note.js"],"names":["React","Component","getRecorddata","createRecord","bulkcreateRecord","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","Rteditor","F","constructor","props","handleSave","localdata","console","log","orgname","userid","alert","document","getElementById","innerHTML","recorddata","data","result","objectName","objectData","isSuccess","message","state","componentDidMount","userprofileid","tablename","datadisplaytype","viewname","compprops","getRecordListMetadataAndDatafromServer","userProfileId","userId","tableName","datasortparambeginswith","datasortparamequalsto","action","viewName","mainPanelHtmlObj","dataParams","keyConditions","field","value","expression","filterConditions","pageSize","limit","exclusiveStartKey","dataresult","dataprops","Items","length","notedata","render","width","height","backgroundColor","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,gBAAtC,QAA8D,aAA9D;AACA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,aAApD;AACA,SAASC,YAAT,EAAuBC,mBAAvB,QAAkD,aAAlD;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;;AAEA,MAAMC,CAAN,SAAgBT,SAAhB,CAA0B;AACxBU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA8EnBC,UA9EmB,GA8EN,YAAY;AACvB,UAAIC,SAAS,GAAGP,YAAY,CAAC,KAAKK,KAAN,CAA5B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,UAAI;AAAEG,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAsBJ,SAA1B;AAEAK,MAAAA,KAAK,CAACC,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,EAAkDC,SAAnD,CAAL;AACA,UAAIC,UAAU,GAAG;AACfN,QAAAA,OAAO,EAAEA,OADM;AAEfC,QAAAA,MAAM,EAAEA,MAFO;AAGfM,QAAAA,IAAI,EAAEJ,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,EAAkDC;AAHzC,OAAjB;AAKA,UAAIG,MAAM,GAAG,MAAMtB,YAAY,CAAC;AAC9BuB,QAAAA,UAAU,EAAE,MADkB;AAE9BC,QAAAA,UAAU,EAAEJ;AAFkB,OAAD,CAA/B;;AAIA,UAAIE,MAAM,CAACG,SAAP,KAAqB,OAAzB,EAAkC;AAChCT,QAAAA,KAAK,CAACM,MAAM,CAACI,OAAR,CAAL;AACD,OAFD,MAEO;AACLd,QAAAA,OAAO,CAACC,GAAR,CAAYO,UAAZ;AACD;AACF,KAlGkB;;AAEjB,SAAKO,KAAL,GAAa,EAAb;AACD;;AAEsB,QAAjBC,iBAAiB,GAAG;AACxBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB;AACA,QAAI;AACFK,MAAAA,OADE;AAEFe,MAAAA,aAFE;AAGFd,MAAAA,MAHE;AAIFe,MAAAA,SAJE;AAKFC,MAAAA,eALE;AAMFC,MAAAA;AANE,QAOA,KAAKvB,KAAL,CAAWwB,SAPf;;AAQA,QAAID,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,MAAAA,QAAQ,GAAG,gBAAX;AACD;;AACD,SAAKE,sCAAL,CAA4C;AAC1CpB,MAAAA,OAAO,EAAEA,OADiC;AAE1CqB,MAAAA,aAAa,EAAEN,aAF2B;AAG1CO,MAAAA,MAAM,EAAErB,MAHkC;AAI1CsB,MAAAA,SAAS,EAAEP,SAJ+B;AAK1CQ,MAAAA,uBAAuB,EAAE,EALiB;AAM1CC,MAAAA,qBAAqB,EAAE,EANmB;AAO1CC,MAAAA,MAAM,EAAE,EAPkC;AAQ1CC,MAAAA,QAAQ,EAAET,QARgC;AAS1CD,MAAAA,eAAe,EAAEA;AATyB,KAA5C;AAWD;;AAE2C,QAAtCG,sCAAsC,CAACzB,KAAD,EAAQ;AAClD,QAAI;AACFK,MAAAA,OADE;AAEFqB,MAAAA,aAFE;AAGFC,MAAAA,MAHE;AAIFC,MAAAA,SAJE;AAKFC,MAAAA,uBALE;AAMFC,MAAAA,qBANE;AAOFC,MAAAA,MAPE;AAQFC,MAAAA,QARE;AASFV,MAAAA;AATE,QAUAtB,KAVJ;AAWA,QAAI;AAAEiC,MAAAA;AAAF,QAAuB,KAAKf,KAAhC;AAEA,QAAIgB,UAAU,GAAG;AACfpB,MAAAA,UAAU,EAAEc,SADG;AAEfb,MAAAA,UAAU,EAAE,EAFG;AAGfoB,MAAAA,aAAa,EAAE,CACb;AACEC,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,KAAK,EAAEhC,OAFT;AAGEiC,QAAAA,UAAU,EAAE;AAHd,OADa,EAMb;AACEF,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,KAAK,EAAEV,MAFT;AAGEW,QAAAA,UAAU,EAAE;AAHd,OANa,CAHA;AAefC,MAAAA,gBAAgB,EAAE,EAfH;AAgBfC,MAAAA,QAAQ,EAAE,EAhBK;AAiBfC,MAAAA,KAAK,EAAE,EAjBQ;AAkBfC,MAAAA,iBAAiB,EAAE;AAlBJ,KAAjB;AAoBA,QAAIC,UAAU,GAAG,MAAMrD,aAAa,CAAC4C,UAAD,CAApC;;AACA,QAAIS,UAAU,CAAC3B,SAAX,KAAyB,OAA7B,EAAsC;AACpCT,MAAAA,KAAK,CAAC,SAASoC,UAAU,CAAC1B,OAArB,CAAL;AACD,KAFD,MAEO;AACLd,MAAAA,OAAO,CAACC,GAAR,CAAYuC,UAAU,CAACC,SAAX,CAAqBC,KAAjC;;AACA,UAAIF,UAAU,CAACC,SAAX,CAAqBC,KAArB,CAA2BC,MAA3B,GAAoC,CAAxC,EAA2C;AACzC,YAAIC,QAAQ,GAAGJ,UAAU,CAACC,SAAX,CAAqBC,KAArB,CAA2B,CAA3B,EAA8BjC,IAA7C;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAY2C,QAAZ;AACAvC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,EAAkDC,SAAlD,GAA8DqC,QAA9D;AACD;AACF;AACF;;AAwBDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BAaE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE,MADF;AAELC,UAAAA,MAAM,EAAE,MAFH;AAGLC,UAAAA,eAAe,EAAE,SAHZ;AAILC,UAAAA,KAAK,EAAE;AAJF,SADT;AAOE,QAAA,eAAe,EAAC,MAPlB;AAQE,QAAA,EAAE,EAAC;AARL;AAAA;AAAA;AAAA;AAAA,cAbF,eAuBE,QAAC,QAAD;AAAU,QAAA,MAAM,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,cAvBF,eAwBE;AAAQ,QAAA,eAAe,EAAC,MAAxB;AAA+B,QAAA,OAAO,EAAE,KAAKnD,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA,oBADF;AA8BD;;AApIuB;;AAuI1B,eAAeH,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping } from \"../js/index\";\nimport { getLocalData, serverButtonHandler } from \"../js/index\";\nimport Rteditor from \"./richtexteditor\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datadisplaytype,\n      viewname,\n    } = this.props.compprops;\n    if (viewname == null) {\n      viewname = \"recentlyviewed\";\n    }\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: \"\",\n      viewName: viewname,\n      datadisplaytype: datadisplaytype,\n    });\n  }\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      datadisplaytype,\n    } = props;\n    let { mainPanelHtmlObj } = this.state;\n\n    let dataParams = {\n      objectName: tableName,\n      objectData: {},\n      keyConditions: [\n        {\n          field: \"orgname\",\n          value: orgname,\n          expression: \"=\",\n        },\n        {\n          field: \"userid\",\n          value: userId,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n    let dataresult = await getRecorddata(dataParams);\n    if (dataresult.isSuccess === \"false\") {\n      alert(\"data\" + dataresult.message);\n    } else {\n      console.log(dataresult.dataprops.Items);\n      if (dataresult.dataprops.Items.length > 0) {\n        let notedata = dataresult.dataprops.Items[0].data;\n        console.log(notedata);\n        document.getElementById(\"utilitynoteeditablediv\").innerHTML = notedata;\n      }\n    }\n  }\n\n  handleSave = async () => {\n    let localdata = getLocalData(this.props);\n    console.log(localdata);\n    let { orgname, userid } = localdata;\n\n    alert(document.getElementById(\"utilitynoteeditablediv\").innerHTML);\n    let recorddata = {\n      orgname: orgname,\n      userid: userid,\n      data: document.getElementById(\"utilitynoteeditablediv\").innerHTML,\n    };\n    let result = await createRecord({\n      objectName: \"note\",\n      objectData: recorddata,\n    });\n    if (result.isSuccess === \"false\") {\n      alert(result.message);\n    } else {\n      console.log(recorddata);\n    }\n  };\n\n  render() {\n    return (\n      <>\n        {/* <textarea\n        style={{\n          width: \"100%\",\n          height: \"50vh\",\n\n          backgroundColor: \"#FFFACD\",\n          color: \"black\",\n        }}\n        onBlur={this.handleSave}\n      >\n        test\n      </textarea> */}\n        <div\n          style={{\n            width: \"100%\",\n            height: \"50vh\",\n            backgroundColor: \"#FFFACD\",\n            color: \"black\",\n          }}\n          contenteditable=\"true\"\n          id=\"utilitynoteeditablediv\"\n        ></div>\n        <Rteditor htmlid=\"utilitynoteeditablediv\" />\n        <button contenteditable=\"true\" onClick={this.handleSave}>\n          Save\n        </button>\n      </>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}