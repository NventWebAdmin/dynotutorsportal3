{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/chat2.js\";\nimport React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping, getLocalData, serverButtonHandler } from \"../js/index\";\nimport { GetGoogleIcon } from \"./icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.resetCompData = () => {\n      let {\n        isConnectedtoWebsocketServer\n      } = this.state;\n\n      if (isConnectedtoWebsocketServer == false) {\n        // get currentuserid, orgname etc\n        let localdata = getLocalData(this.props);\n        let {\n          orgname,\n          userobjectname,\n          userobjectsortparambeginswith,\n          serverretriverowslimit\n        } = this.props.compprops; // get all user data\n\n        this.getServerData({\n          objectname: userobjectname,\n          orgname: orgname,\n          datasortparambeginswith: userobjectsortparambeginswith,\n          touserdatasortparambeginswith: \"\",\n          serverretriverowslimit: serverretriverowslimit,\n          updattingstatename: \"userList\",\n          touserid: \"\"\n        }); // open socket connection\n\n        this.props.localParentMethod({\n          methodname: \"openwebsocketconnection\",\n          props: {}\n        });\n      }\n    };\n\n    this.componentDidUpdate = prevProps => {\n      let {\n        isConnectedtoWebsocketServer,\n        currentuserid,\n        serverMessage,\n        userList,\n        chatMessageObj,\n        selectedTouserId\n      } = this.state;\n      let newlocalParentProps = this.props.localParentProps;\n\n      if (isConnectedtoWebsocketServer != newlocalParentProps.isConnectedtoWebsocketServer) {\n        if (newlocalParentProps.isConnectedtoWebsocketServer == false) {\n          for (let userI in userList) {\n            userList[userI].chatstatus = \"offline\";\n          }\n        }\n\n        this.setState({\n          isConnectedtoWebsocketServer: newlocalParentProps.isConnectedtoWebsocketServer,\n          userList: userList\n        });\n      }\n\n      if (currentuserid != newlocalParentProps.currentuserid) {\n        this.setState({\n          currentuserid: newlocalParentProps.currentuserid\n        });\n      }\n\n      if (serverMessage != newlocalParentProps.serverMessage && newlocalParentProps.serverMessage) {\n        console.log(JSON.parse(newlocalParentProps.serverMessage));\n        let newservermessage = JSON.parse(newlocalParentProps.serverMessage);\n\n        if (newservermessage.messagetype == \"updatestatus\") {\n          for (let userI in userList) {\n            if (userList[userI].id == newservermessage.userid) {\n              userList[userI].chatstatus = newservermessage.chatstatus;\n            }\n          }\n        }\n\n        if (newservermessage.messagetype == \"sendmessage\") {\n          for (let userI in userList) {\n            if (userList[userI].id == newservermessage.userid && currentuserid == newservermessage.touserid) {\n              let userchatMessageObj = chatMessageObj[newservermessage.userid];\n\n              if (newservermessage.userid != selectedTouserId) {\n                userchatMessageObj.noofunreadmsgs = userchatMessageObj.noofunreadmsgs + 1;\n              }\n\n              let newmessages = userchatMessageObj.newmessages;\n              newmessages.push(newservermessage.message);\n              userchatMessageObj.newmessages = newmessages;\n              chatMessageObj[newservermessage.userid] = userchatMessageObj;\n              this.setState({\n                chatMessageObj: chatMessageObj\n              });\n            }\n          }\n        }\n\n        this.setState({\n          serverMessage: newlocalParentProps.serverMessage,\n          userList: userList\n        });\n      }\n    };\n\n    this.getServerData = async props => {\n      let {\n        chatMessageObj,\n        chatuserclickedstr\n      } = this.state;\n      let {\n        objectname,\n        orgname,\n        datasortparambeginswith,\n        touserdatasortparambeginswith,\n        serverretriverowslimit,\n        updattingstatename,\n        touserid\n      } = props;\n      console.log(datasortparambeginswith); // get all users\n\n      let userdataParams = {\n        objectName: objectname,\n        objectData: {},\n        keyConditions: [{\n          field: \"orgname\",\n          value: orgname,\n          expression: \"=\"\n        }, {\n          field: \"id\",\n          value: datasortparambeginswith,\n          expression: \"beginswith\"\n        }],\n        filterConditions: [],\n        pageSize: 1,\n        limit: serverretriverowslimit,\n        exclusiveStartKey: \"\"\n      };\n      let dataresult = await getRecorddata(userdataParams);\n\n      if (dataresult.isSuccess === \"false\") {\n        alert(\"data\" + dataresult.message);\n      } else {\n        let recordDataList = dataresult.dataprops.Items;\n        console.log(recordDataList);\n\n        if (updattingstatename == \"userList\") {\n          for (let i in recordDataList) {\n            chatMessageObj[recordDataList[i].id] = {\n              noofunreadmsgs: 0,\n              oldmessages: [],\n              newmessages: []\n            };\n          }\n\n          this.setState({\n            userList: recordDataList,\n            chatMessageObj: chatMessageObj,\n            chatuserclickedstr: \"\"\n          });\n        }\n\n        if (updattingstatename == \"chatList\") {\n          let chatList = recordDataList;\n          console.log(chatList);\n          let touserdataParams = {\n            objectName: objectname,\n            objectData: {},\n            keyConditions: [{\n              field: \"orgname\",\n              value: orgname,\n              expression: \"=\"\n            }, {\n              field: \"id\",\n              value: touserdatasortparambeginswith,\n              expression: \"beginswith\"\n            }],\n            filterConditions: [],\n            pageSize: 1,\n            limit: serverretriverowslimit,\n            exclusiveStartKey: \"\"\n          };\n          let touserdataresult = await getRecorddata(touserdataParams);\n\n          if (touserdataresult.isSuccess === \"false\") {\n            alert(\"data\" + dataresult.message);\n          } else {\n            let touserchatList = touserdataresult.dataprops.Items;\n            console.log(chatList);\n            console.log(touserchatList); //  console.log(recordDataList);\n\n            let allchatlist = [];\n\n            for (let i in chatList) {\n              allchatlist.push(chatList[i]);\n            }\n\n            for (let i in touserchatList) {\n              allchatlist.push(touserchatList[i]);\n            }\n\n            let allchatlistSorted = sortArray(allchatlist, \"time\", \"integer\");\n            chatMessageObj[touserid] = {\n              noofunreadmsgs: 0,\n              oldmessages: allchatlist,\n              newmessages: []\n            };\n            this.setState({\n              //chatList: allchatlistSorted,\n              chatMessageObj: chatMessageObj\n            });\n          }\n        }\n      }\n    };\n\n    this.getChatData = async touserid => {\n      console.log(touserid);\n      let {\n        currentuserid,\n        chatuserclickedstr\n      } = this.state;\n\n      if (chatuserclickedstr.includes(touserid)) {\n        this.setState({\n          selectedTouserId: touserid\n        });\n      } else {\n        chatuserclickedstr = chatuserclickedstr + touserid;\n        this.setState({\n          selectedTouserId: touserid,\n          chatuserclickedstr: chatuserclickedstr\n        });\n        this.getServerData({\n          objectname: \"chatmessage\",\n          orgname: \"gouthama\",\n          datasortparambeginswith: \"cht_\" + currentuserid + \"_\" + touserid,\n          touserdatasortparambeginswith: \"cht_\" + touserid + \"_\" + currentuserid,\n          serverretriverowslimit: 100,\n          updattingstatename: \"chatList\",\n          touserid: touserid\n        });\n      }\n    };\n\n    this.updateStatus = async props => {\n      let {\n        status\n      } = props;\n      let msgObj = {\n        orgname: \"gouthama\",\n        userid: \"usr-pradeep\",\n        touserid: \"\",\n        messagetype: \"updatestatus\",\n        message: \"\",\n        chatstatus: status\n      };\n      this.props.localParentMethod({\n        methodname: \"sendmessage\",\n        methodprops: msgObj\n      });\n      this.setState({\n        currentuserchatstatus: status\n      });\n    };\n\n    this.sendmessage = () => {\n      let {\n        chatMessageObj,\n        currentuserid,\n        selectedTouserId,\n        currentusermsg\n      } = this.state;\n      var d = new Date();\n      var n = d.getTime();\n      let msgObj = {\n        orgname: \"gouthama\",\n        userid: currentuserid,\n        touserid: selectedTouserId,\n        messagetype: \"sendmessage\",\n        message: {\n          type: \"text\",\n          data: currentusermsg\n        },\n        chatstatus: \"\",\n        time: n\n      };\n      this.props.localParentMethod({\n        methodname: \"sendmessage\",\n        methodprops: msgObj\n      });\n      let userchatMessageObj = chatMessageObj[selectedTouserId];\n      let newmessages = userchatMessageObj.newmessages;\n      newmessages.push(msgObj);\n      userchatMessageObj.newmessages = newmessages;\n      chatMessageObj[selectedTouserId] = userchatMessageObj;\n      this.setState({\n        chatMessageObj: chatMessageObj,\n        currentusermsg: \"\"\n      });\n    };\n\n    this.state = {\n      chatuserclickedstr: \"\",\n      currentusermsg: \"\",\n      selectedTouserId: \"\",\n      currentuserstatus: \"offline\",\n      userList: [],\n      isConnectedtoWebsocketServer: false,\n      currentuserid: \"\",\n      serverMessage: {},\n      chatMessageObj: {}\n    };\n  }\n\n  componentDidMount() {\n    // display all users, connect to websocket server\n    this.resetCompData();\n  }\n\n  render() {\n    let {\n      userList,\n      chatMessageObj,\n      currentuserid,\n      currentuserchatstatus,\n      selectedTouserId\n    } = this.state;\n    let chatList;\n    console.log(this.state); // other users status\n\n    let chatUserArrayHtml = [];\n\n    for (let i in userList) {\n      if (currentuserid && userList[i].id != currentuserid) {\n        let otheruserstatuscolor = \"\";\n\n        if (userList[i].chatstatus == \"available\") {\n          otheruserstatuscolor = \"green\";\n        }\n\n        if (userList[i].chatstatus == \"busy\") {\n          otheruserstatuscolor = \"red\";\n        }\n\n        if (userList[i].chatstatus == \"away\") {\n          otheruserstatuscolor = \"yellow\";\n        }\n\n        if (userList[i].chatstatus == \"offline\") {\n          otheruserstatuscolor = \"grey\";\n        }\n\n        let noofunreadmsgs = \"\";\n\n        if (chatMessageObj && chatMessageObj[userList[i].id]) {\n          noofunreadmsgs = chatMessageObj[userList[i].id].noofunreadmsgs;\n        }\n\n        chatUserArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"org-fr org-fjc-s org-fai-c\",\n          onClick: () => {\n            this.getChatData(userList[i].id);\n          },\n          children: [userList[i].name, \"-\", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              width: \"20px\",\n              backgroundColor: otheruserstatuscolor,\n              padding: \"10px\",\n              borderRadius: \"50%\"\n            },\n            children: \".\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: noofunreadmsgs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    let chatMessageArrayHtml = [];\n\n    for (let i in chatMessageObj) {\n      if (i == selectedTouserId) {\n        let oldmessages = chatMessageObj[i].oldmessages;\n        let newmessages = chatMessageObj[i].newmessages;\n        chatList = [];\n\n        for (let j in oldmessages) {\n          chatList.push(oldmessages[j]);\n        }\n\n        for (let j in newmessages) {\n          chatList.push(newmessages[j]);\n        }\n\n        for (let i in chatList) {\n          console.log(chatList[i]);\n          var d = new Date(chatList[i].time);\n          d = d.toISOString();\n          var msgObj = chatList[i].message;\n          console.log(chatList[i]);\n          var msgStr = \"\";\n\n          if (msgObj && msgObj.type == \"text\") {\n            msgStr = msgObj.data;\n          }\n\n          console.log(msgStr);\n\n          if (currentuserid == chatList[i].userid) {\n            chatMessageArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-fr org-fjc-e\",\n              children: msgStr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this));\n            chatMessageArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-fr org-fjc-e\",\n              children: d\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this));\n          } else {\n            chatMessageArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-fr org-fjc-s\",\n              children: msgStr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 15\n            }, this));\n            chatMessageArrayHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-fr org-fjc-s\",\n              children: d\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 15\n            }, this));\n          }\n        }\n      }\n    }\n\n    let chatMessageActionsHtml = [];\n    chatMessageActionsHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n        name: \"call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n        name: \"videocam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n        name: \"screen_share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this));\n    let chatInputElmntHtml = [];\n    chatInputElmntHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"chatinput\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 29\n    }, this));\n    let currentuserstatuscolor = \"\";\n\n    if (currentuserchatstatus == \"available\") {\n      currentuserstatuscolor = \"green\";\n    }\n\n    if (currentuserchatstatus == \"busy\") {\n      currentuserstatuscolor = \"red\";\n    }\n\n    if (currentuserchatstatus == \"away\") {\n      currentuserstatuscolor = \"yellow\";\n    }\n\n    if (currentuserchatstatus == \"offline\") {\n      currentuserstatuscolor = \"grey\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          width: \"20px\",\n          backgroundColor: currentuserstatuscolor,\n          padding: \"10px\",\n          borderRadius: \"50%\"\n        },\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          this.setState({\n            currentuserid: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          textAlign: \"center\"\n        },\n        onClick: () => {\n          this.updateStatus({\n            status: \"busy\"\n          });\n        },\n        children: \"show status busy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          textAlign: \"center\"\n        },\n        onClick: () => {\n          this.updateStatus({\n            status: \"available\"\n          });\n        },\n        children: \"show status available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          textAlign: \"center\"\n        },\n        onClick: () => {\n          this.updateStatus({\n            status: \"away\"\n          });\n        },\n        children: \"show status away\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"org-fr\",\n        style: {\n          height: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"org-flexbasis-100p org-mflexbasis-20p org-lflexbasis-20p \",\n          children: chatUserArrayHtml\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"org-flexbasis-100p org-mflexbasis-80p org-lflexbasis-80p org-fc \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: \"red\",\n              height: \"85%\",\n              overflow: \"auto\"\n            },\n            children: chatMessageArrayHtml\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"org-fr\",\n            style: {\n              backgroundColor: \"blue\",\n              height: \"15%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-flexbasis-100p org-mflexbasis-80p org-lflexbasis-80p\",\n              children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                style: {\n                  width: \"100%\",\n                  height: \"100%\",\n                  padding: \"0\",\n                  margin: \"0\"\n                },\n                value: this.state.currentusermsg,\n                onChange: e => {\n                  this.setState({\n                    currentusermsg: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"org-flexbasis-100p org-mflexbasis-20p org-lflexbasis-20p\",\n              children: [chatMessageActionsHtml, /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  width: \"100%\",\n                  height: \"100%\",\n                  textAlign: \"center\"\n                },\n                onClick: this.sendmessage,\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/chat2.js"],"names":["React","Component","getRecorddata","createRecord","bulkcreateRecord","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","GetGoogleIcon","F","constructor","props","resetCompData","isConnectedtoWebsocketServer","state","localdata","orgname","userobjectname","userobjectsortparambeginswith","serverretriverowslimit","compprops","getServerData","objectname","datasortparambeginswith","touserdatasortparambeginswith","updattingstatename","touserid","localParentMethod","methodname","componentDidUpdate","prevProps","currentuserid","serverMessage","userList","chatMessageObj","selectedTouserId","newlocalParentProps","localParentProps","userI","chatstatus","setState","console","log","JSON","parse","newservermessage","messagetype","id","userid","userchatMessageObj","noofunreadmsgs","newmessages","push","message","chatuserclickedstr","userdataParams","objectName","objectData","keyConditions","field","value","expression","filterConditions","pageSize","limit","exclusiveStartKey","dataresult","isSuccess","alert","recordDataList","dataprops","Items","i","oldmessages","chatList","touserdataParams","touserdataresult","touserchatList","allchatlist","allchatlistSorted","getChatData","includes","updateStatus","status","msgObj","methodprops","currentuserchatstatus","sendmessage","currentusermsg","d","Date","n","getTime","type","data","time","currentuserstatus","componentDidMount","render","chatUserArrayHtml","otheruserstatuscolor","name","width","backgroundColor","padding","borderRadius","chatMessageArrayHtml","j","toISOString","msgStr","chatMessageActionsHtml","chatInputElmntHtml","currentuserstatuscolor","e","target","textAlign","height","overflow","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,gBAAtC,QAA8D,aAA9D;AACA,SACEC,SADF,EAEEC,wBAFF,EAGEC,YAHF,EAIEC,mBAJF,QAKO,aALP;AAMA,SAASC,aAAT,QAA8B,SAA9B;;;AAEA,MAAMC,CAAN,SAAgBT,SAAhB,CAA0B;AACxBU,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACjB,UAAMA,MAAN;;AADiB,SAoBnBC,aApBmB,GAoBH,MAAM;AACpB,UAAI;AAAEC,QAAAA;AAAF,UAAmC,KAAKC,KAA5C;;AACA,UAAID,4BAA4B,IAAI,KAApC,EAA2C;AACzC;AACA,YAAIE,SAAS,GAAGT,YAAY,CAAC,KAAKK,KAAN,CAA5B;AACA,YAAI;AACFK,UAAAA,OADE;AAEFC,UAAAA,cAFE;AAGFC,UAAAA,6BAHE;AAIFC,UAAAA;AAJE,YAKA,KAAKR,KAAL,CAAWS,SALf,CAHyC,CAUzC;;AACA,aAAKC,aAAL,CAAmB;AACjBC,UAAAA,UAAU,EAAEL,cADK;AAEjBD,UAAAA,OAAO,EAAEA,OAFQ;AAGjBO,UAAAA,uBAAuB,EAAEL,6BAHR;AAIjBM,UAAAA,6BAA6B,EAAE,EAJd;AAKjBL,UAAAA,sBAAsB,EAAEA,sBALP;AAMjBM,UAAAA,kBAAkB,EAAE,UANH;AAOjBC,UAAAA,QAAQ,EAAE;AAPO,SAAnB,EAXyC,CAqBzC;;AACA,aAAKf,KAAL,CAAWgB,iBAAX,CAA6B;AAC3BC,UAAAA,UAAU,EAAE,yBADe;AAE3BjB,UAAAA,KAAK,EAAE;AAFoB,SAA7B;AAID;AACF,KAjDkB;;AAAA,SAoDnBkB,kBApDmB,GAoDGC,SAAD,IAAe;AAClC,UAAI;AACFjB,QAAAA,4BADE;AAEFkB,QAAAA,aAFE;AAGFC,QAAAA,aAHE;AAIFC,QAAAA,QAJE;AAKFC,QAAAA,cALE;AAMFC,QAAAA;AANE,UAOA,KAAKrB,KAPT;AAQA,UAAIsB,mBAAmB,GAAG,KAAKzB,KAAL,CAAW0B,gBAArC;;AACA,UACExB,4BAA4B,IAC5BuB,mBAAmB,CAACvB,4BAFtB,EAGE;AACA,YAAIuB,mBAAmB,CAACvB,4BAApB,IAAoD,KAAxD,EAA+D;AAC7D,eAAK,IAAIyB,KAAT,IAAkBL,QAAlB,EAA4B;AAC1BA,YAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBC,UAAhB,GAA6B,SAA7B;AACD;AACF;;AAED,aAAKC,QAAL,CAAc;AACZ3B,UAAAA,4BAA4B,EAC1BuB,mBAAmB,CAACvB,4BAFV;AAGZoB,UAAAA,QAAQ,EAAEA;AAHE,SAAd;AAKD;;AAED,UAAIF,aAAa,IAAIK,mBAAmB,CAACL,aAAzC,EAAwD;AACtD,aAAKS,QAAL,CAAc;AAAET,UAAAA,aAAa,EAAEK,mBAAmB,CAACL;AAArC,SAAd;AACD;;AAED,UACEC,aAAa,IAAII,mBAAmB,CAACJ,aAArC,IACAI,mBAAmB,CAACJ,aAFtB,EAGE;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,KAAL,CAAWR,mBAAmB,CAACJ,aAA/B,CAAZ;AACA,YAAIa,gBAAgB,GAAGF,IAAI,CAACC,KAAL,CAAWR,mBAAmB,CAACJ,aAA/B,CAAvB;;AACA,YAAIa,gBAAgB,CAACC,WAAjB,IAAgC,cAApC,EAAoD;AAClD,eAAK,IAAIR,KAAT,IAAkBL,QAAlB,EAA4B;AAC1B,gBAAIA,QAAQ,CAACK,KAAD,CAAR,CAAgBS,EAAhB,IAAsBF,gBAAgB,CAACG,MAA3C,EAAmD;AACjDf,cAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBC,UAAhB,GAA6BM,gBAAgB,CAACN,UAA9C;AACD;AACF;AACF;;AAED,YAAIM,gBAAgB,CAACC,WAAjB,IAAgC,aAApC,EAAmD;AACjD,eAAK,IAAIR,KAAT,IAAkBL,QAAlB,EAA4B;AAC1B,gBACEA,QAAQ,CAACK,KAAD,CAAR,CAAgBS,EAAhB,IAAsBF,gBAAgB,CAACG,MAAvC,IACAjB,aAAa,IAAIc,gBAAgB,CAACnB,QAFpC,EAGE;AACA,kBAAIuB,kBAAkB,GAAGf,cAAc,CAACW,gBAAgB,CAACG,MAAlB,CAAvC;;AACA,kBAAIH,gBAAgB,CAACG,MAAjB,IAA2Bb,gBAA/B,EAAiD;AAC/Cc,gBAAAA,kBAAkB,CAACC,cAAnB,GACED,kBAAkB,CAACC,cAAnB,GAAoC,CADtC;AAED;;AACD,kBAAIC,WAAW,GAAGF,kBAAkB,CAACE,WAArC;AACAA,cAAAA,WAAW,CAACC,IAAZ,CAAiBP,gBAAgB,CAACQ,OAAlC;AACAJ,cAAAA,kBAAkB,CAACE,WAAnB,GAAiCA,WAAjC;AACAjB,cAAAA,cAAc,CAACW,gBAAgB,CAACG,MAAlB,CAAd,GAA0CC,kBAA1C;AAEA,mBAAKT,QAAL,CAAc;AACZN,gBAAAA,cAAc,EAAEA;AADJ,eAAd;AAGD;AACF;AACF;;AAED,aAAKM,QAAL,CAAc;AACZR,UAAAA,aAAa,EAAEI,mBAAmB,CAACJ,aADvB;AAEZC,UAAAA,QAAQ,EAAEA;AAFE,SAAd;AAID;AACF,KA7HkB;;AAAA,SA+HnBZ,aA/HmB,GA+HH,MAAOV,KAAP,IAAiB;AAC/B,UAAI;AAAEuB,QAAAA,cAAF;AAAkBoB,QAAAA;AAAlB,UAAyC,KAAKxC,KAAlD;AACA,UAAI;AACFQ,QAAAA,UADE;AAEFN,QAAAA,OAFE;AAGFO,QAAAA,uBAHE;AAIFC,QAAAA,6BAJE;AAKFL,QAAAA,sBALE;AAMFM,QAAAA,kBANE;AAOFC,QAAAA;AAPE,UAQAf,KARJ;AASA8B,MAAAA,OAAO,CAACC,GAAR,CAAYnB,uBAAZ,EAX+B,CAa/B;;AACA,UAAIgC,cAAc,GAAG;AACnBC,QAAAA,UAAU,EAAElC,UADO;AAEnBmC,QAAAA,UAAU,EAAE,EAFO;AAGnBC,QAAAA,aAAa,EAAE,CACb;AACEC,UAAAA,KAAK,EAAE,SADT;AAEEC,UAAAA,KAAK,EAAE5C,OAFT;AAGE6C,UAAAA,UAAU,EAAE;AAHd,SADa,EAMb;AACEF,UAAAA,KAAK,EAAE,IADT;AAEEC,UAAAA,KAAK,EAAErC,uBAFT;AAGEsC,UAAAA,UAAU,EAAE;AAHd,SANa,CAHI;AAenBC,QAAAA,gBAAgB,EAAE,EAfC;AAgBnBC,QAAAA,QAAQ,EAAE,CAhBS;AAiBnBC,QAAAA,KAAK,EAAE7C,sBAjBY;AAkBnB8C,QAAAA,iBAAiB,EAAE;AAlBA,OAArB;AAqBA,UAAIC,UAAU,GAAG,MAAMjE,aAAa,CAACsD,cAAD,CAApC;;AACA,UAAIW,UAAU,CAACC,SAAX,KAAyB,OAA7B,EAAsC;AACpCC,QAAAA,KAAK,CAAC,SAASF,UAAU,CAACb,OAArB,CAAL;AACD,OAFD,MAEO;AACL,YAAIgB,cAAc,GAAGH,UAAU,CAACI,SAAX,CAAqBC,KAA1C;AACA9B,QAAAA,OAAO,CAACC,GAAR,CAAY2B,cAAZ;;AACA,YAAI5C,kBAAkB,IAAI,UAA1B,EAAsC;AACpC,eAAK,IAAI+C,CAAT,IAAcH,cAAd,EAA8B;AAC5BnC,YAAAA,cAAc,CAACmC,cAAc,CAACG,CAAD,CAAd,CAAkBzB,EAAnB,CAAd,GAAuC;AACrCG,cAAAA,cAAc,EAAE,CADqB;AAErCuB,cAAAA,WAAW,EAAE,EAFwB;AAGrCtB,cAAAA,WAAW,EAAE;AAHwB,aAAvC;AAKD;;AACD,eAAKX,QAAL,CAAc;AACZP,YAAAA,QAAQ,EAAEoC,cADE;AAEZnC,YAAAA,cAAc,EAAEA,cAFJ;AAGZoB,YAAAA,kBAAkB,EAAE;AAHR,WAAd;AAKD;;AACD,YAAI7B,kBAAkB,IAAI,UAA1B,EAAsC;AACpC,cAAIiD,QAAQ,GAAGL,cAAf;AACA5B,UAAAA,OAAO,CAACC,GAAR,CAAYgC,QAAZ;AACA,cAAIC,gBAAgB,GAAG;AACrBnB,YAAAA,UAAU,EAAElC,UADS;AAErBmC,YAAAA,UAAU,EAAE,EAFS;AAGrBC,YAAAA,aAAa,EAAE,CACb;AACEC,cAAAA,KAAK,EAAE,SADT;AAEEC,cAAAA,KAAK,EAAE5C,OAFT;AAGE6C,cAAAA,UAAU,EAAE;AAHd,aADa,EAMb;AACEF,cAAAA,KAAK,EAAE,IADT;AAEEC,cAAAA,KAAK,EAAEpC,6BAFT;AAGEqC,cAAAA,UAAU,EAAE;AAHd,aANa,CAHM;AAerBC,YAAAA,gBAAgB,EAAE,EAfG;AAgBrBC,YAAAA,QAAQ,EAAE,CAhBW;AAiBrBC,YAAAA,KAAK,EAAE7C,sBAjBc;AAkBrB8C,YAAAA,iBAAiB,EAAE;AAlBE,WAAvB;AAqBA,cAAIW,gBAAgB,GAAG,MAAM3E,aAAa,CAAC0E,gBAAD,CAA1C;;AACA,cAAIC,gBAAgB,CAACT,SAAjB,KAA+B,OAAnC,EAA4C;AAC1CC,YAAAA,KAAK,CAAC,SAASF,UAAU,CAACb,OAArB,CAAL;AACD,WAFD,MAEO;AACL,gBAAIwB,cAAc,GAAGD,gBAAgB,CAACN,SAAjB,CAA2BC,KAAhD;AACA9B,YAAAA,OAAO,CAACC,GAAR,CAAYgC,QAAZ;AACAjC,YAAAA,OAAO,CAACC,GAAR,CAAYmC,cAAZ,EAHK,CAKL;;AACA,gBAAIC,WAAW,GAAG,EAAlB;;AACA,iBAAK,IAAIN,CAAT,IAAcE,QAAd,EAAwB;AACtBI,cAAAA,WAAW,CAAC1B,IAAZ,CAAiBsB,QAAQ,CAACF,CAAD,CAAzB;AACD;;AACD,iBAAK,IAAIA,CAAT,IAAcK,cAAd,EAA8B;AAC5BC,cAAAA,WAAW,CAAC1B,IAAZ,CAAiByB,cAAc,CAACL,CAAD,CAA/B;AACD;;AACD,gBAAIO,iBAAiB,GAAG3E,SAAS,CAAC0E,WAAD,EAAc,MAAd,EAAsB,SAAtB,CAAjC;AACA5C,YAAAA,cAAc,CAACR,QAAD,CAAd,GAA2B;AACzBwB,cAAAA,cAAc,EAAE,CADS;AAEzBuB,cAAAA,WAAW,EAAEK,WAFY;AAGzB3B,cAAAA,WAAW,EAAE;AAHY,aAA3B;AAKA,iBAAKX,QAAL,CAAc;AACZ;AACAN,cAAAA,cAAc,EAAEA;AAFJ,aAAd;AAID;AACF;AACF;AACF,KA3OkB;;AAAA,SA6OnB8C,WA7OmB,GA6OL,MAAOtD,QAAP,IAAoB;AAChCe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AACA,UAAI;AAAEK,QAAAA,aAAF;AAAiBuB,QAAAA;AAAjB,UAAwC,KAAKxC,KAAjD;;AACA,UAAIwC,kBAAkB,CAAC2B,QAAnB,CAA4BvD,QAA5B,CAAJ,EAA2C;AACzC,aAAKc,QAAL,CAAc;AAAEL,UAAAA,gBAAgB,EAAET;AAApB,SAAd;AACD,OAFD,MAEO;AACL4B,QAAAA,kBAAkB,GAAGA,kBAAkB,GAAG5B,QAA1C;AACA,aAAKc,QAAL,CAAc;AACZL,UAAAA,gBAAgB,EAAET,QADN;AAEZ4B,UAAAA,kBAAkB,EAAEA;AAFR,SAAd;AAIA,aAAKjC,aAAL,CAAmB;AACjBC,UAAAA,UAAU,EAAE,aADK;AAEjBN,UAAAA,OAAO,EAAE,UAFQ;AAGjBO,UAAAA,uBAAuB,EAAE,SAASQ,aAAT,GAAyB,GAAzB,GAA+BL,QAHvC;AAIjBF,UAAAA,6BAA6B,EAAE,SAASE,QAAT,GAAoB,GAApB,GAA0BK,aAJxC;AAKjBZ,UAAAA,sBAAsB,EAAE,GALP;AAMjBM,UAAAA,kBAAkB,EAAE,UANH;AAOjBC,UAAAA,QAAQ,EAAEA;AAPO,SAAnB;AASD;AACF,KAlQkB;;AAAA,SAoQnBwD,YApQmB,GAoQJ,MAAOvE,KAAP,IAAiB;AAC9B,UAAI;AAAEwE,QAAAA;AAAF,UAAaxE,KAAjB;AACA,UAAIyE,MAAM,GAAG;AACXpE,QAAAA,OAAO,EAAE,UADE;AAEXgC,QAAAA,MAAM,EAAE,aAFG;AAGXtB,QAAAA,QAAQ,EAAE,EAHC;AAIXoB,QAAAA,WAAW,EAAE,cAJF;AAKXO,QAAAA,OAAO,EAAE,EALE;AAMXd,QAAAA,UAAU,EAAE4C;AAND,OAAb;AAQA,WAAKxE,KAAL,CAAWgB,iBAAX,CAA6B;AAC3BC,QAAAA,UAAU,EAAE,aADe;AAE3ByD,QAAAA,WAAW,EAAED;AAFc,OAA7B;AAIA,WAAK5C,QAAL,CAAc;AAAE8C,QAAAA,qBAAqB,EAAEH;AAAzB,OAAd;AACD,KAnRkB;;AAAA,SAqRnBI,WArRmB,GAqRL,MAAM;AAClB,UAAI;AACFrD,QAAAA,cADE;AAEFH,QAAAA,aAFE;AAGFI,QAAAA,gBAHE;AAIFqD,QAAAA;AAJE,UAKA,KAAK1E,KALT;AAMA,UAAI2E,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,UAAIC,CAAC,GAAGF,CAAC,CAACG,OAAF,EAAR;AACA,UAAIR,MAAM,GAAG;AACXpE,QAAAA,OAAO,EAAE,UADE;AAEXgC,QAAAA,MAAM,EAAEjB,aAFG;AAGXL,QAAAA,QAAQ,EAAES,gBAHC;AAIXW,QAAAA,WAAW,EAAE,aAJF;AAKXO,QAAAA,OAAO,EAAE;AAAEwC,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,IAAI,EAAEN;AAAtB,SALE;AAMXjD,QAAAA,UAAU,EAAE,EAND;AAOXwD,QAAAA,IAAI,EAAEJ;AAPK,OAAb;AASA,WAAKhF,KAAL,CAAWgB,iBAAX,CAA6B;AAC3BC,QAAAA,UAAU,EAAE,aADe;AAE3ByD,QAAAA,WAAW,EAAED;AAFc,OAA7B;AAKA,UAAInC,kBAAkB,GAAGf,cAAc,CAACC,gBAAD,CAAvC;AACA,UAAIgB,WAAW,GAAGF,kBAAkB,CAACE,WAArC;AACAA,MAAAA,WAAW,CAACC,IAAZ,CAAiBgC,MAAjB;AACAnC,MAAAA,kBAAkB,CAACE,WAAnB,GAAiCA,WAAjC;AACAjB,MAAAA,cAAc,CAACC,gBAAD,CAAd,GAAmCc,kBAAnC;AAEA,WAAKT,QAAL,CAAc;AACZN,QAAAA,cAAc,EAAEA,cADJ;AAEZsD,QAAAA,cAAc,EAAE;AAFJ,OAAd;AAID,KAtTkB;;AAEjB,SAAK1E,KAAL,GAAa;AACXwC,MAAAA,kBAAkB,EAAE,EADT;AAEXkC,MAAAA,cAAc,EAAE,EAFL;AAGXrD,MAAAA,gBAAgB,EAAE,EAHP;AAIX6D,MAAAA,iBAAiB,EAAE,SAJR;AAKX/D,MAAAA,QAAQ,EAAE,EALC;AAMXpB,MAAAA,4BAA4B,EAAE,KANnB;AAOXkB,MAAAA,aAAa,EAAE,EAPJ;AAQXC,MAAAA,aAAa,EAAE,EARJ;AASXE,MAAAA,cAAc,EAAE;AATL,KAAb;AAWD;;AAED+D,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKrF,aAAL;AACD;;AAsSDsF,EAAAA,MAAM,GAAG;AACP,QAAI;AACFjE,MAAAA,QADE;AAEFC,MAAAA,cAFE;AAGFH,MAAAA,aAHE;AAIFuD,MAAAA,qBAJE;AAKFnD,MAAAA;AALE,QAMA,KAAKrB,KANT;AAOA,QAAI4D,QAAJ;AAEAjC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK5B,KAAjB,EAVO,CAYP;;AACA,QAAIqF,iBAAiB,GAAG,EAAxB;;AAEA,SAAK,IAAI3B,CAAT,IAAcvC,QAAd,EAAwB;AACtB,UAAIF,aAAa,IAAIE,QAAQ,CAACuC,CAAD,CAAR,CAAYzB,EAAZ,IAAkBhB,aAAvC,EAAsD;AACpD,YAAIqE,oBAAoB,GAAG,EAA3B;;AAEA,YAAInE,QAAQ,CAACuC,CAAD,CAAR,CAAYjC,UAAZ,IAA0B,WAA9B,EAA2C;AACzC6D,UAAAA,oBAAoB,GAAG,OAAvB;AACD;;AACD,YAAInE,QAAQ,CAACuC,CAAD,CAAR,CAAYjC,UAAZ,IAA0B,MAA9B,EAAsC;AACpC6D,UAAAA,oBAAoB,GAAG,KAAvB;AACD;;AACD,YAAInE,QAAQ,CAACuC,CAAD,CAAR,CAAYjC,UAAZ,IAA0B,MAA9B,EAAsC;AACpC6D,UAAAA,oBAAoB,GAAG,QAAvB;AACD;;AACD,YAAInE,QAAQ,CAACuC,CAAD,CAAR,CAAYjC,UAAZ,IAA0B,SAA9B,EAAyC;AACvC6D,UAAAA,oBAAoB,GAAG,MAAvB;AACD;;AACD,YAAIlD,cAAc,GAAG,EAArB;;AACA,YAAIhB,cAAc,IAAIA,cAAc,CAACD,QAAQ,CAACuC,CAAD,CAAR,CAAYzB,EAAb,CAApC,EAAsD;AACpDG,UAAAA,cAAc,GAAGhB,cAAc,CAACD,QAAQ,CAACuC,CAAD,CAAR,CAAYzB,EAAb,CAAd,CAA+BG,cAAhD;AACD;;AACDiD,QAAAA,iBAAiB,CAAC/C,IAAlB,eACE;AACE,UAAA,SAAS,EAAC,4BADZ;AAEE,UAAA,OAAO,EAAE,MAAM;AACb,iBAAK4B,WAAL,CAAiB/C,QAAQ,CAACuC,CAAD,CAAR,CAAYzB,EAA7B;AACD,WAJH;AAAA,qBAMGd,QAAQ,CAACuC,CAAD,CAAR,CAAY6B,IANf,oBAOE;AACE,YAAA,KAAK,EAAE;AACLC,cAAAA,KAAK,EAAE,MADF;AAELC,cAAAA,eAAe,EAAEH,oBAFZ;AAGLI,cAAAA,OAAO,EAAE,MAHJ;AAILC,cAAAA,YAAY,EAAE;AAJT,aADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,eAiBE;AAAA,sBAAOvD;AAAP;AAAA;AAAA;AAAA;AAAA,kBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAqBD;AACF;;AAED,QAAIwD,oBAAoB,GAAG,EAA3B;;AACA,SAAK,IAAIlC,CAAT,IAActC,cAAd,EAA8B;AAC5B,UAAIsC,CAAC,IAAIrC,gBAAT,EAA2B;AACzB,YAAIsC,WAAW,GAAGvC,cAAc,CAACsC,CAAD,CAAd,CAAkBC,WAApC;AACA,YAAItB,WAAW,GAAGjB,cAAc,CAACsC,CAAD,CAAd,CAAkBrB,WAApC;AACAuB,QAAAA,QAAQ,GAAG,EAAX;;AACA,aAAK,IAAIiC,CAAT,IAAclC,WAAd,EAA2B;AACzBC,UAAAA,QAAQ,CAACtB,IAAT,CAAcqB,WAAW,CAACkC,CAAD,CAAzB;AACD;;AACD,aAAK,IAAIA,CAAT,IAAcxD,WAAd,EAA2B;AACzBuB,UAAAA,QAAQ,CAACtB,IAAT,CAAcD,WAAW,CAACwD,CAAD,CAAzB;AACD;;AAED,aAAK,IAAInC,CAAT,IAAcE,QAAd,EAAwB;AACtBjC,UAAAA,OAAO,CAACC,GAAR,CAAYgC,QAAQ,CAACF,CAAD,CAApB;AACA,cAAIiB,CAAC,GAAG,IAAIC,IAAJ,CAAShB,QAAQ,CAACF,CAAD,CAAR,CAAYuB,IAArB,CAAR;AACAN,UAAAA,CAAC,GAAGA,CAAC,CAACmB,WAAF,EAAJ;AACA,cAAIxB,MAAM,GAAGV,QAAQ,CAACF,CAAD,CAAR,CAAYnB,OAAzB;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAYgC,QAAQ,CAACF,CAAD,CAApB;AACA,cAAIqC,MAAM,GAAG,EAAb;;AACA,cAAIzB,MAAM,IAAIA,MAAM,CAACS,IAAP,IAAe,MAA7B,EAAqC;AACnCgB,YAAAA,MAAM,GAAGzB,MAAM,CAACU,IAAhB;AACD;;AAEDrD,UAAAA,OAAO,CAACC,GAAR,CAAYmE,MAAZ;;AACA,cAAI9E,aAAa,IAAI2C,QAAQ,CAACF,CAAD,CAAR,CAAYxB,MAAjC,EAAyC;AACvC0D,YAAAA,oBAAoB,CAACtD,IAArB,eACE;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA,wBAAmCyD;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADF;AAGAH,YAAAA,oBAAoB,CAACtD,IAArB,eACE;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA,wBAAmCqC;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD,WAPD,MAOO;AACLiB,YAAAA,oBAAoB,CAACtD,IAArB,eACE;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA,wBAAmCyD;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADF;AAGAH,YAAAA,oBAAoB,CAACtD,IAArB,eACE;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAA,wBAAmCqC;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD;AACF;AACF;AACF;;AAED,QAAIqB,sBAAsB,GAAG,EAA7B;AACAA,IAAAA,sBAAsB,CAAC1D,IAAvB,eACE;AAAA,iBACG,GADH,eAEE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASA,QAAI2D,kBAAkB,GAAG,EAAzB;AACAA,IAAAA,kBAAkB,CAAC3D,IAAnB,eAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAxB;AAEA,QAAI4D,sBAAsB,GAAG,EAA7B;;AACA,QAAI1B,qBAAqB,IAAI,WAA7B,EAA0C;AACxC0B,MAAAA,sBAAsB,GAAG,OAAzB;AACD;;AACD,QAAI1B,qBAAqB,IAAI,MAA7B,EAAqC;AACnC0B,MAAAA,sBAAsB,GAAG,KAAzB;AACD;;AACD,QAAI1B,qBAAqB,IAAI,MAA7B,EAAqC;AACnC0B,MAAAA,sBAAsB,GAAG,QAAzB;AACD;;AACD,QAAI1B,qBAAqB,IAAI,SAA7B,EAAwC;AACtC0B,MAAAA,sBAAsB,GAAG,MAAzB;AACD;;AAED,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AACE,QAAA,KAAK,EAAE;AACLV,UAAAA,KAAK,EAAE,MADF;AAELC,UAAAA,eAAe,EAAES,sBAFZ;AAGLR,UAAAA,OAAO,EAAE,MAHJ;AAILC,UAAAA,YAAY,EAAE;AAJT,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAaE;AACE,QAAA,QAAQ,EAAGQ,CAAD,IAAO;AACf,eAAKzE,QAAL,CAAc;AAAET,YAAAA,aAAa,EAAEkF,CAAC,CAACC,MAAF,CAAStD;AAA1B,WAAd;AACD;AAHH;AAAA;AAAA;AAAA;AAAA,cAbF,eAmBE;AACE,QAAA,KAAK,EAAE;AAAEuD,UAAAA,SAAS,EAAE;AAAb,SADT;AAEE,QAAA,OAAO,EAAE,MAAM;AACb,eAAKjC,YAAL,CAAkB;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAlB;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eA2BE;AACE,QAAA,KAAK,EAAE;AAAEgC,UAAAA,SAAS,EAAE;AAAb,SADT;AAEE,QAAA,OAAO,EAAE,MAAM;AACb,eAAKjC,YAAL,CAAkB;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAlB;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF,eAmCE;AACE,QAAA,KAAK,EAAE;AAAEgC,UAAAA,SAAS,EAAE;AAAb,SADT;AAEE,QAAA,OAAO,EAAE,MAAM;AACb,eAAKjC,YAAL,CAAkB;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAlB;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCF,eA2CE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAwB,QAAA,KAAK,EAAE;AAAEiC,UAAAA,MAAM,EAAE;AAAV,SAA/B;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,2DAAf;AAAA,oBACGjB;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,kEAAf;AAAA,kCACE;AACE,YAAA,KAAK,EAAE;AACLI,cAAAA,eAAe,EAAE,KADZ;AAELa,cAAAA,MAAM,EAAE,KAFH;AAGLC,cAAAA,QAAQ,EAAE;AAHL,aADT;AAAA,sBAOGX;AAPH;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE;AACE,YAAA,SAAS,EAAC,QADZ;AAEE,YAAA,KAAK,EAAE;AAAEH,cAAAA,eAAe,EAAE,MAAnB;AAA2Ba,cAAAA,MAAM,EAAE;AAAnC,aAFT;AAAA,oCAIE;AAAK,cAAA,SAAS,EAAC,0DAAf;AAAA,qCACE;AACE,gBAAA,KAAK,EAAE;AACLd,kBAAAA,KAAK,EAAE,MADF;AAELc,kBAAAA,MAAM,EAAE,MAFH;AAGLZ,kBAAAA,OAAO,EAAE,GAHJ;AAILc,kBAAAA,MAAM,EAAE;AAJH,iBADT;AAOE,gBAAA,KAAK,EAAE,KAAKxG,KAAL,CAAW0E,cAPpB;AAQE,gBAAA,QAAQ,EAAGyB,CAAD,IAAO;AACf,uBAAKzE,QAAL,CAAc;AAAEgD,oBAAAA,cAAc,EAAEyB,CAAC,CAACC,MAAF,CAAStD;AAA3B,mBAAd;AACD;AAVH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAJF,eAkBE;AAAK,cAAA,SAAS,EAAC,0DAAf;AAAA,yBACGkD,sBADH,eAEE;AACE,gBAAA,KAAK,EAAE;AAAER,kBAAAA,KAAK,EAAE,MAAT;AAAiBc,kBAAAA,MAAM,EAAE,MAAzB;AAAiCD,kBAAAA,SAAS,EAAE;AAA5C,iBADT;AAEE,gBAAA,OAAO,EAAE,KAAK5B,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA0FD;;AArhBuB;;AAwhB1B,eAAe9E,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport {\n  sortArray,\n  fieldTypeHtmltoDBmapping,\n  getLocalData,\n  serverButtonHandler,\n} from \"../js/index\";\nimport { GetGoogleIcon } from \"./icons\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatuserclickedstr: \"\",\n      currentusermsg: \"\",\n      selectedTouserId: \"\",\n      currentuserstatus: \"offline\",\n      userList: [],\n      isConnectedtoWebsocketServer: false,\n      currentuserid: \"\",\n      serverMessage: {},\n      chatMessageObj: {},\n    };\n  }\n\n  componentDidMount() {\n    // display all users, connect to websocket server\n    this.resetCompData();\n  }\n\n  resetCompData = () => {\n    let { isConnectedtoWebsocketServer } = this.state;\n    if (isConnectedtoWebsocketServer == false) {\n      // get currentuserid, orgname etc\n      let localdata = getLocalData(this.props);\n      let {\n        orgname,\n        userobjectname,\n        userobjectsortparambeginswith,\n        serverretriverowslimit,\n      } = this.props.compprops;\n\n      // get all user data\n      this.getServerData({\n        objectname: userobjectname,\n        orgname: orgname,\n        datasortparambeginswith: userobjectsortparambeginswith,\n        touserdatasortparambeginswith: \"\",\n        serverretriverowslimit: serverretriverowslimit,\n        updattingstatename: \"userList\",\n        touserid: \"\",\n      });\n\n      // open socket connection\n      this.props.localParentMethod({\n        methodname: \"openwebsocketconnection\",\n        props: {},\n      });\n    }\n  };\n\n  // update on parent props such as socket open, close, on message etc\n  componentDidUpdate = (prevProps) => {\n    let {\n      isConnectedtoWebsocketServer,\n      currentuserid,\n      serverMessage,\n      userList,\n      chatMessageObj,\n      selectedTouserId,\n    } = this.state;\n    let newlocalParentProps = this.props.localParentProps;\n    if (\n      isConnectedtoWebsocketServer !=\n      newlocalParentProps.isConnectedtoWebsocketServer\n    ) {\n      if (newlocalParentProps.isConnectedtoWebsocketServer == false) {\n        for (let userI in userList) {\n          userList[userI].chatstatus = \"offline\";\n        }\n      }\n\n      this.setState({\n        isConnectedtoWebsocketServer:\n          newlocalParentProps.isConnectedtoWebsocketServer,\n        userList: userList,\n      });\n    }\n\n    if (currentuserid != newlocalParentProps.currentuserid) {\n      this.setState({ currentuserid: newlocalParentProps.currentuserid });\n    }\n\n    if (\n      serverMessage != newlocalParentProps.serverMessage &&\n      newlocalParentProps.serverMessage\n    ) {\n      console.log(JSON.parse(newlocalParentProps.serverMessage));\n      let newservermessage = JSON.parse(newlocalParentProps.serverMessage);\n      if (newservermessage.messagetype == \"updatestatus\") {\n        for (let userI in userList) {\n          if (userList[userI].id == newservermessage.userid) {\n            userList[userI].chatstatus = newservermessage.chatstatus;\n          }\n        }\n      }\n\n      if (newservermessage.messagetype == \"sendmessage\") {\n        for (let userI in userList) {\n          if (\n            userList[userI].id == newservermessage.userid &&\n            currentuserid == newservermessage.touserid\n          ) {\n            let userchatMessageObj = chatMessageObj[newservermessage.userid];\n            if (newservermessage.userid != selectedTouserId) {\n              userchatMessageObj.noofunreadmsgs =\n                userchatMessageObj.noofunreadmsgs + 1;\n            }\n            let newmessages = userchatMessageObj.newmessages;\n            newmessages.push(newservermessage.message);\n            userchatMessageObj.newmessages = newmessages;\n            chatMessageObj[newservermessage.userid] = userchatMessageObj;\n\n            this.setState({\n              chatMessageObj: chatMessageObj,\n            });\n          }\n        }\n      }\n\n      this.setState({\n        serverMessage: newlocalParentProps.serverMessage,\n        userList: userList,\n      });\n    }\n  };\n\n  getServerData = async (props) => {\n    let { chatMessageObj, chatuserclickedstr } = this.state;\n    let {\n      objectname,\n      orgname,\n      datasortparambeginswith,\n      touserdatasortparambeginswith,\n      serverretriverowslimit,\n      updattingstatename,\n      touserid,\n    } = props;\n    console.log(datasortparambeginswith);\n\n    // get all users\n    let userdataParams = {\n      objectName: objectname,\n      objectData: {},\n      keyConditions: [\n        {\n          field: \"orgname\",\n          value: orgname,\n          expression: \"=\",\n        },\n        {\n          field: \"id\",\n          value: datasortparambeginswith,\n          expression: \"beginswith\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: 1,\n      limit: serverretriverowslimit,\n      exclusiveStartKey: \"\",\n    };\n\n    let dataresult = await getRecorddata(userdataParams);\n    if (dataresult.isSuccess === \"false\") {\n      alert(\"data\" + dataresult.message);\n    } else {\n      let recordDataList = dataresult.dataprops.Items;\n      console.log(recordDataList);\n      if (updattingstatename == \"userList\") {\n        for (let i in recordDataList) {\n          chatMessageObj[recordDataList[i].id] = {\n            noofunreadmsgs: 0,\n            oldmessages: [],\n            newmessages: [],\n          };\n        }\n        this.setState({\n          userList: recordDataList,\n          chatMessageObj: chatMessageObj,\n          chatuserclickedstr: \"\",\n        });\n      }\n      if (updattingstatename == \"chatList\") {\n        let chatList = recordDataList;\n        console.log(chatList);\n        let touserdataParams = {\n          objectName: objectname,\n          objectData: {},\n          keyConditions: [\n            {\n              field: \"orgname\",\n              value: orgname,\n              expression: \"=\",\n            },\n            {\n              field: \"id\",\n              value: touserdatasortparambeginswith,\n              expression: \"beginswith\",\n            },\n          ],\n          filterConditions: [],\n          pageSize: 1,\n          limit: serverretriverowslimit,\n          exclusiveStartKey: \"\",\n        };\n\n        let touserdataresult = await getRecorddata(touserdataParams);\n        if (touserdataresult.isSuccess === \"false\") {\n          alert(\"data\" + dataresult.message);\n        } else {\n          let touserchatList = touserdataresult.dataprops.Items;\n          console.log(chatList);\n          console.log(touserchatList);\n\n          //  console.log(recordDataList);\n          let allchatlist = [];\n          for (let i in chatList) {\n            allchatlist.push(chatList[i]);\n          }\n          for (let i in touserchatList) {\n            allchatlist.push(touserchatList[i]);\n          }\n          let allchatlistSorted = sortArray(allchatlist, \"time\", \"integer\");\n          chatMessageObj[touserid] = {\n            noofunreadmsgs: 0,\n            oldmessages: allchatlist,\n            newmessages: [],\n          };\n          this.setState({\n            //chatList: allchatlistSorted,\n            chatMessageObj: chatMessageObj,\n          });\n        }\n      }\n    }\n  };\n\n  getChatData = async (touserid) => {\n    console.log(touserid);\n    let { currentuserid, chatuserclickedstr } = this.state;\n    if (chatuserclickedstr.includes(touserid)) {\n      this.setState({ selectedTouserId: touserid });\n    } else {\n      chatuserclickedstr = chatuserclickedstr + touserid;\n      this.setState({\n        selectedTouserId: touserid,\n        chatuserclickedstr: chatuserclickedstr,\n      });\n      this.getServerData({\n        objectname: \"chatmessage\",\n        orgname: \"gouthama\",\n        datasortparambeginswith: \"cht_\" + currentuserid + \"_\" + touserid,\n        touserdatasortparambeginswith: \"cht_\" + touserid + \"_\" + currentuserid,\n        serverretriverowslimit: 100,\n        updattingstatename: \"chatList\",\n        touserid: touserid,\n      });\n    }\n  };\n\n  updateStatus = async (props) => {\n    let { status } = props;\n    let msgObj = {\n      orgname: \"gouthama\",\n      userid: \"usr-pradeep\",\n      touserid: \"\",\n      messagetype: \"updatestatus\",\n      message: \"\",\n      chatstatus: status,\n    };\n    this.props.localParentMethod({\n      methodname: \"sendmessage\",\n      methodprops: msgObj,\n    });\n    this.setState({ currentuserchatstatus: status });\n  };\n\n  sendmessage = () => {\n    let {\n      chatMessageObj,\n      currentuserid,\n      selectedTouserId,\n      currentusermsg,\n    } = this.state;\n    var d = new Date();\n    var n = d.getTime();\n    let msgObj = {\n      orgname: \"gouthama\",\n      userid: currentuserid,\n      touserid: selectedTouserId,\n      messagetype: \"sendmessage\",\n      message: { type: \"text\", data: currentusermsg },\n      chatstatus: \"\",\n      time: n,\n    };\n    this.props.localParentMethod({\n      methodname: \"sendmessage\",\n      methodprops: msgObj,\n    });\n\n    let userchatMessageObj = chatMessageObj[selectedTouserId];\n    let newmessages = userchatMessageObj.newmessages;\n    newmessages.push(msgObj);\n    userchatMessageObj.newmessages = newmessages;\n    chatMessageObj[selectedTouserId] = userchatMessageObj;\n\n    this.setState({\n      chatMessageObj: chatMessageObj,\n      currentusermsg: \"\",\n    });\n  };\n\n  render() {\n    let {\n      userList,\n      chatMessageObj,\n      currentuserid,\n      currentuserchatstatus,\n      selectedTouserId,\n    } = this.state;\n    let chatList;\n\n    console.log(this.state);\n\n    // other users status\n    let chatUserArrayHtml = [];\n\n    for (let i in userList) {\n      if (currentuserid && userList[i].id != currentuserid) {\n        let otheruserstatuscolor = \"\";\n\n        if (userList[i].chatstatus == \"available\") {\n          otheruserstatuscolor = \"green\";\n        }\n        if (userList[i].chatstatus == \"busy\") {\n          otheruserstatuscolor = \"red\";\n        }\n        if (userList[i].chatstatus == \"away\") {\n          otheruserstatuscolor = \"yellow\";\n        }\n        if (userList[i].chatstatus == \"offline\") {\n          otheruserstatuscolor = \"grey\";\n        }\n        let noofunreadmsgs = \"\";\n        if (chatMessageObj && chatMessageObj[userList[i].id]) {\n          noofunreadmsgs = chatMessageObj[userList[i].id].noofunreadmsgs;\n        }\n        chatUserArrayHtml.push(\n          <div\n            className=\"org-fr org-fjc-s org-fai-c\"\n            onClick={() => {\n              this.getChatData(userList[i].id);\n            }}\n          >\n            {userList[i].name}-\n            <span\n              style={{\n                width: \"20px\",\n                backgroundColor: otheruserstatuscolor,\n                padding: \"10px\",\n                borderRadius: \"50%\",\n              }}\n            >\n              .\n            </span>\n            <span>{noofunreadmsgs}</span>\n          </div>\n        );\n      }\n    }\n\n    let chatMessageArrayHtml = [];\n    for (let i in chatMessageObj) {\n      if (i == selectedTouserId) {\n        let oldmessages = chatMessageObj[i].oldmessages;\n        let newmessages = chatMessageObj[i].newmessages;\n        chatList = [];\n        for (let j in oldmessages) {\n          chatList.push(oldmessages[j]);\n        }\n        for (let j in newmessages) {\n          chatList.push(newmessages[j]);\n        }\n\n        for (let i in chatList) {\n          console.log(chatList[i]);\n          var d = new Date(chatList[i].time);\n          d = d.toISOString();\n          var msgObj = chatList[i].message;\n          console.log(chatList[i]);\n          var msgStr = \"\";\n          if (msgObj && msgObj.type == \"text\") {\n            msgStr = msgObj.data;\n          }\n\n          console.log(msgStr);\n          if (currentuserid == chatList[i].userid) {\n            chatMessageArrayHtml.push(\n              <div className=\"org-fr org-fjc-e\">{msgStr}</div>\n            );\n            chatMessageArrayHtml.push(\n              <div className=\"org-fr org-fjc-e\">{d}</div>\n            );\n          } else {\n            chatMessageArrayHtml.push(\n              <div className=\"org-fr org-fjc-s\">{msgStr}</div>\n            );\n            chatMessageArrayHtml.push(\n              <div className=\"org-fr org-fjc-s\">{d}</div>\n            );\n          }\n        }\n      }\n    }\n\n    let chatMessageActionsHtml = [];\n    chatMessageActionsHtml.push(\n      <div>\n        {\" \"}\n        <GetGoogleIcon name=\"call\" />\n        <GetGoogleIcon name=\"videocam\" />\n        <GetGoogleIcon name=\"screen_share\" />\n      </div>\n    );\n\n    let chatInputElmntHtml = [];\n    chatInputElmntHtml.push(<div>chatinput</div>);\n\n    let currentuserstatuscolor = \"\";\n    if (currentuserchatstatus == \"available\") {\n      currentuserstatuscolor = \"green\";\n    }\n    if (currentuserchatstatus == \"busy\") {\n      currentuserstatuscolor = \"red\";\n    }\n    if (currentuserchatstatus == \"away\") {\n      currentuserstatuscolor = \"yellow\";\n    }\n    if (currentuserchatstatus == \"offline\") {\n      currentuserstatuscolor = \"grey\";\n    }\n\n    return (\n      <div>\n        <br />\n\n        <span\n          style={{\n            width: \"20px\",\n            backgroundColor: currentuserstatuscolor,\n            padding: \"10px\",\n            borderRadius: \"50%\",\n          }}\n        >\n          .\n        </span>\n        <input\n          onChange={(e) => {\n            this.setState({ currentuserid: e.target.value });\n          }}\n        />\n\n        <button\n          style={{ textAlign: \"center\" }}\n          onClick={() => {\n            this.updateStatus({ status: \"busy\" });\n          }}\n        >\n          show status busy\n        </button>\n        <button\n          style={{ textAlign: \"center\" }}\n          onClick={() => {\n            this.updateStatus({ status: \"available\" });\n          }}\n        >\n          show status available\n        </button>\n        <button\n          style={{ textAlign: \"center\" }}\n          onClick={() => {\n            this.updateStatus({ status: \"away\" });\n          }}\n        >\n          show status away\n        </button>\n        <div className=\"org-fr\" style={{ height: \"100%\" }}>\n          <div className=\"org-flexbasis-100p org-mflexbasis-20p org-lflexbasis-20p \">\n            {chatUserArrayHtml}\n          </div>\n          <div className=\"org-flexbasis-100p org-mflexbasis-80p org-lflexbasis-80p org-fc \">\n            <div\n              style={{\n                backgroundColor: \"red\",\n                height: \"85%\",\n                overflow: \"auto\",\n              }}\n            >\n              {chatMessageArrayHtml}\n            </div>\n            <div\n              className=\"org-fr\"\n              style={{ backgroundColor: \"blue\", height: \"15%\" }}\n            >\n              <div className=\"org-flexbasis-100p org-mflexbasis-80p org-lflexbasis-80p\">\n                <textarea\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    padding: \"0\",\n                    margin: \"0\",\n                  }}\n                  value={this.state.currentusermsg}\n                  onChange={(e) => {\n                    this.setState({ currentusermsg: e.target.value });\n                  }}\n                />\n              </div>\n              <div className=\"org-flexbasis-100p org-mflexbasis-20p org-lflexbasis-20p\">\n                {chatMessageActionsHtml}\n                <button\n                  style={{ width: \"100%\", height: \"100%\", textAlign: \"center\" }}\n                  onClick={this.sendmessage}\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}