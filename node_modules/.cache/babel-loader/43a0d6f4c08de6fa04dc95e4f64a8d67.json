{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recent.js\";\nimport React, { Component } from \"react\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping } from \"../js/index\";\nimport { getLocalData, serverButtonHandler } from \"../js/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass F extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.openRecord = props => {\n      console.log(props);\n      let {\n        orgname,\n        userprofileid,\n        userid,\n        tablename,\n        datadisplaytype,\n        viewname,\n        viewactionid,\n        viewnewtabactionid\n      } = this.props.compprops;\n      let localdata = getLocalData(this.props);\n      let {\n        sametab,\n        recordid,\n        objectname\n      } = props;\n\n      if (sametab) {\n        this.props.serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: viewactionid,\n            recordid: recordid,\n            sametab: sametab,\n            objectname: objectname\n          }\n        });\n      } else {\n        this.props.serverButtonHandler({\n          localdata: localdata,\n          clickprops: {\n            actionid: viewnewtabactionid,\n            recordid: recordid,\n            sametab: sametab,\n            objectname: objectname\n          }\n        });\n      }\n    };\n\n    this.state = {\n      recordDataList: []\n    };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datadisplaytype,\n      viewname\n    } = this.props.compprops;\n\n    if (viewname == null) {\n      viewname = \"recentlyviewed\";\n    }\n\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: \"\",\n      viewName: viewname,\n      datadisplaytype: datadisplaytype\n    });\n  }\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      datadisplaytype\n    } = props;\n    let {\n      mainPanelHtmlObj\n    } = this.state;\n    let dataParams = {\n      objectName: tableName,\n      objectData: {},\n      keyConditions: [{\n        field: \"orgname\",\n        value: orgname,\n        expression: \"=\"\n      }, {\n        field: \"userid\",\n        value: userId,\n        expression: \"=\"\n      }],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\"\n    };\n    let dataresult = await getRecorddata(dataParams);\n\n    if (dataresult.isSuccess === \"false\") {\n      alert(\"data\" + dataresult.message);\n    } else {\n      console.log(dataresult.dataprops.Items);\n\n      if (dataresult.dataprops.Items.length > 0) {\n        let recordDataList = dataresult.dataprops.Items[0].data;\n        console.log(recordDataList);\n        this.setState({\n          recordDataList: recordDataList\n        });\n      }\n    }\n  }\n\n  render() {\n    let {\n      recordDataList\n    } = this.state;\n    let allobjectdatalist = [];\n    let allobjectdatalistSorted = [];\n    console.log(recordDataList);\n\n    for (let i in recordDataList) {\n      let objectlistdata = recordDataList[i].list;\n      console.log(objectlistdata);\n\n      for (let j in objectlistdata) {\n        allobjectdatalist.push(objectlistdata[j]);\n      }\n    }\n\n    console.log(allobjectdatalist);\n    allobjectdatalistSorted = sortArray(allobjectdatalist, \"time\", \"integer\");\n    console.log(allobjectdatalistSorted);\n    let recentrecordArrayhtml = [];\n\n    for (let i = 0; i < allobjectdatalistSorted.length; i++) {\n      recentrecordArrayhtml.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"org-fr cursorpointer\",\n          style: {\n            border: \"1px solid grey\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => this.openRecord({\n              sametab: false,\n              recordid: allobjectdatalistSorted[i].recordid,\n              objectname: allobjectdatalistSorted[i].objectname\n            }),\n            children: /*#__PURE__*/_jsxDEV(GetGoogleIcon, {\n              name: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"org-fc\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mf \",\n              onClick: () => this.openRecord({\n                sametab: true,\n                recordid: allobjectdatalistSorted[i].recordid,\n                objectname: allobjectdatalistSorted[i].objectname\n              }),\n              children: allobjectdatalistSorted[i].title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sf \",\n              onClick: () => this.openRecord({\n                sametab: true,\n                recordid: allobjectdatalistSorted[i].recordid,\n                objectname: allobjectdatalistSorted[i].objectname\n              }),\n              children: allobjectdatalistSorted[i].subtitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false));\n    }\n\n    return recentrecordArrayhtml;\n  }\n\n}\n\nexport default F;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/recent.js"],"names":["React","Component","GetLocalIcon","GetGoogleIcon","getRecorddata","createRecord","bulkcreateRecord","sortArray","fieldTypeHtmltoDBmapping","getLocalData","serverButtonHandler","F","constructor","props","openRecord","console","log","orgname","userprofileid","userid","tablename","datadisplaytype","viewname","viewactionid","viewnewtabactionid","compprops","localdata","sametab","recordid","objectname","clickprops","actionid","state","recordDataList","componentDidMount","getRecordListMetadataAndDatafromServer","userProfileId","userId","tableName","datasortparambeginswith","datasortparamequalsto","action","viewName","mainPanelHtmlObj","dataParams","objectName","objectData","keyConditions","field","value","expression","filterConditions","pageSize","limit","exclusiveStartKey","dataresult","isSuccess","alert","message","dataprops","Items","length","data","setState","render","allobjectdatalist","allobjectdatalistSorted","i","objectlistdata","list","j","push","recentrecordArrayhtml","border","title","subtitle"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { GetLocalIcon, GetGoogleIcon } from \"./icons\";\nimport { getRecorddata, createRecord, bulkcreateRecord } from \"../db/index\";\nimport { sortArray, fieldTypeHtmltoDBmapping } from \"../js/index\";\nimport { getLocalData, serverButtonHandler } from \"../js/index\";\n\nclass F extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { recordDataList: [] };\n  }\n\n  async componentDidMount() {\n    console.log(this.props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datadisplaytype,\n      viewname,\n    } = this.props.compprops;\n    if (viewname == null) {\n      viewname = \"recentlyviewed\";\n    }\n    this.getRecordListMetadataAndDatafromServer({\n      orgname: orgname,\n      userProfileId: userprofileid,\n      userId: userid,\n      tableName: tablename,\n      datasortparambeginswith: \"\",\n      datasortparamequalsto: \"\",\n      action: \"\",\n      viewName: viewname,\n      datadisplaytype: datadisplaytype,\n    });\n  }\n\n  async getRecordListMetadataAndDatafromServer(props) {\n    let {\n      orgname,\n      userProfileId,\n      userId,\n      tableName,\n      datasortparambeginswith,\n      datasortparamequalsto,\n      action,\n      viewName,\n      datadisplaytype,\n    } = props;\n    let { mainPanelHtmlObj } = this.state;\n\n    let dataParams = {\n      objectName: tableName,\n      objectData: {},\n      keyConditions: [\n        {\n          field: \"orgname\",\n          value: orgname,\n          expression: \"=\",\n        },\n        {\n          field: \"userid\",\n          value: userId,\n          expression: \"=\",\n        },\n      ],\n      filterConditions: [],\n      pageSize: \"\",\n      limit: \"\",\n      exclusiveStartKey: \"\",\n    };\n    let dataresult = await getRecorddata(dataParams);\n    if (dataresult.isSuccess === \"false\") {\n      alert(\"data\" + dataresult.message);\n    } else {\n      console.log(dataresult.dataprops.Items);\n      if (dataresult.dataprops.Items.length > 0) {\n        let recordDataList = dataresult.dataprops.Items[0].data;\n        console.log(recordDataList);\n        this.setState({ recordDataList: recordDataList });\n      }\n    }\n  }\n\n  openRecord = (props) => {\n    console.log(props);\n    let {\n      orgname,\n      userprofileid,\n      userid,\n      tablename,\n      datadisplaytype,\n      viewname,\n      viewactionid,\n      viewnewtabactionid,\n    } = this.props.compprops;\n    let localdata = getLocalData(this.props);\n    let { sametab, recordid, objectname } = props;\n\n    if (sametab) {\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: viewactionid,\n          recordid: recordid,\n          sametab: sametab,\n          objectname: objectname,\n        },\n      });\n    } else {\n      this.props.serverButtonHandler({\n        localdata: localdata,\n        clickprops: {\n          actionid: viewnewtabactionid,\n          recordid: recordid,\n          sametab: sametab,\n          objectname: objectname,\n        },\n      });\n    }\n  };\n  render() {\n    let { recordDataList } = this.state;\n    let allobjectdatalist = [];\n    let allobjectdatalistSorted = [];\n    console.log(recordDataList);\n    for (let i in recordDataList) {\n      let objectlistdata = recordDataList[i].list;\n      console.log(objectlistdata);\n      for (let j in objectlistdata) {\n        allobjectdatalist.push(objectlistdata[j]);\n      }\n    }\n    console.log(allobjectdatalist);\n    allobjectdatalistSorted = sortArray(allobjectdatalist, \"time\", \"integer\");\n    console.log(allobjectdatalistSorted);\n\n    let recentrecordArrayhtml = [];\n    for (let i = 0; i < allobjectdatalistSorted.length; i++) {\n      recentrecordArrayhtml.push(\n        <>\n          <span\n            className=\"org-fr cursorpointer\"\n            style={{ border: \"1px solid grey\" }}\n          >\n            <span\n              onClick={() =>\n                this.openRecord({\n                  sametab: false,\n                  recordid: allobjectdatalistSorted[i].recordid,\n                  objectname: allobjectdatalistSorted[i].objectname,\n                })\n              }\n            >\n              <GetGoogleIcon name=\"search\" />\n            </span>\n            <span className=\"org-fc\">\n              <span\n                className=\"mf \"\n                onClick={() =>\n                  this.openRecord({\n                    sametab: true,\n                    recordid: allobjectdatalistSorted[i].recordid,\n                    objectname: allobjectdatalistSorted[i].objectname,\n                  })\n                }\n              >\n                {allobjectdatalistSorted[i].title}\n              </span>\n              <span\n                className=\"sf \"\n                onClick={() =>\n                  this.openRecord({\n                    sametab: true,\n                    recordid: allobjectdatalistSorted[i].recordid,\n                    objectname: allobjectdatalistSorted[i].objectname,\n                  })\n                }\n              >\n                {allobjectdatalistSorted[i].subtitle}\n              </span>\n            </span>\n          </span>\n        </>\n      );\n    }\n    return recentrecordArrayhtml;\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}