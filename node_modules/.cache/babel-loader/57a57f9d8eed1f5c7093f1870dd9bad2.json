{"ast":null,"code":"/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar crypto = require('crypto');\n\nvar os = require('os');\n\nvar fs = require('fs');\n\nvar punycode = require('punycode');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar shared = require('../shared');\n\nvar mimeFuncs = require('../mime-funcs');\n\nvar qp = require('../qp');\n\nvar base64 = require('../base64');\n\nvar addressparser = require('../addressparser');\n\nvar fetch = require('../fetch');\n\nvar LastNewline = require('./last-newline');\n\nvar LeWindows = require('./le-windows');\n\nvar LeUnix = require('./le-unix');\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing\n * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'\n */\n\n\nvar MimeNode = /*#__PURE__*/function () {\n  function MimeNode(contentType, options) {\n    _classCallCheck(this, MimeNode);\n\n    this.nodeCounter = 0;\n    options = options || {};\n    /**\n     * shared part of the unique multipart boundary\n     */\n\n    this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString('hex');\n    this.boundaryPrefix = options.boundaryPrefix || '--_NmP';\n    this.disableFileAccess = !!options.disableFileAccess;\n    this.disableUrlAccess = !!options.disableUrlAccess;\n    this.normalizeHeaderKey = options.normalizeHeaderKey;\n    /**\n     * If date headers is missing and current node is the root, this value is used instead\n     */\n\n    this.date = new Date();\n    /**\n     * Root node for current mime tree\n     */\n\n    this.rootNode = options.rootNode || this;\n    /**\n     * If true include Bcc in generated headers (if available)\n     */\n\n    this.keepBcc = !!options.keepBcc;\n    /**\n     * If filename is specified but contentType is not (probably an attachment)\n     * detect the content type from filename extension\n     */\n\n    if (options.filename) {\n      /**\n       * Filename for this node. Useful with attachments\n       */\n      this.filename = options.filename;\n\n      if (!contentType) {\n        contentType = mimeFuncs.detectMimeType(this.filename.split('.').pop());\n      }\n    }\n    /**\n     * Indicates which encoding should be used for header strings: \"Q\" or \"B\"\n     */\n\n\n    this.textEncoding = (options.textEncoding || '').toString().trim().charAt(0).toUpperCase();\n    /**\n     * Immediate parent for this node (or undefined if not set)\n     */\n\n    this.parentNode = options.parentNode;\n    /**\n     * Hostname for default message-id values\n     */\n\n    this.hostname = options.hostname;\n    /**\n     * If set to 'win' then uses \\r\\n, if 'linux' then \\n. If not set (or `raw` is used) then newlines are kept as is.\n     */\n\n    this.newline = options.newline;\n    /**\n     * An array for possible child nodes\n     */\n\n    this.childNodes = [];\n    /**\n     * Used for generating unique boundaries (prepended to the shared base)\n     */\n\n    this._nodeId = ++this.rootNode.nodeCounter;\n    /**\n     * A list of header values for this node in the form of [{key:'', value:''}]\n     */\n\n    this._headers = [];\n    /**\n     * True if the content only uses ASCII printable characters\n     * @type {Boolean}\n     */\n\n    this._isPlainText = false;\n    /**\n     * True if the content is plain text but has longer lines than allowed\n     * @type {Boolean}\n     */\n\n    this._hasLongLines = false;\n    /**\n     * If set, use instead this value for envelopes instead of generating one\n     * @type {Boolean}\n     */\n\n    this._envelope = false;\n    /**\n     * If set then use this value as the stream content instead of building it\n     * @type {String|Buffer|Stream}\n     */\n\n    this._raw = false;\n    /**\n     * Additional transform streams that the message will be piped before\n     * exposing by createReadStream\n     * @type {Array}\n     */\n\n    this._transforms = [];\n    /**\n     * Additional process functions that the message will be piped through before\n     * exposing by createReadStream. These functions are run after transforms\n     * @type {Array}\n     */\n\n    this._processFuncs = [];\n    /**\n     * If content type is set (or derived from the filename) add it to headers\n     */\n\n    if (contentType) {\n      this.setHeader('Content-Type', contentType);\n    }\n  } /////// PUBLIC METHODS\n\n  /**\n   * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n   *\n   * @param {String} [contentType] Optional content type\n   * @param {Object} [options] Optional options object\n   * @return {Object} Created node object\n   */\n\n\n  _createClass(MimeNode, [{\n    key: \"createChild\",\n    value: function createChild(contentType, options) {\n      if (!options && typeof contentType === 'object') {\n        options = contentType;\n        contentType = undefined;\n      }\n\n      var node = new MimeNode(contentType, options);\n      this.appendChild(node);\n      return node;\n    }\n    /**\n     * Appends an existing node to the mime tree. Removes the node from an existing\n     * tree if needed\n     *\n     * @param {Object} childNode node to be appended\n     * @return {Object} Appended node object\n     */\n\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(childNode) {\n      if (childNode.rootNode !== this.rootNode) {\n        childNode.rootNode = this.rootNode;\n        childNode._nodeId = ++this.rootNode.nodeCounter;\n      }\n\n      childNode.parentNode = this;\n      this.childNodes.push(childNode);\n      return childNode;\n    }\n    /**\n     * Replaces current node with another node\n     *\n     * @param {Object} node Replacement node\n     * @return {Object} Replacement node\n     */\n\n  }, {\n    key: \"replace\",\n    value: function replace(node) {\n      var _this = this;\n\n      if (node === this) {\n        return this;\n      }\n\n      this.parentNode.childNodes.forEach(function (childNode, i) {\n        if (childNode === _this) {\n          node.rootNode = _this.rootNode;\n          node.parentNode = _this.parentNode;\n          node._nodeId = _this._nodeId;\n          _this.rootNode = _this;\n          _this.parentNode = undefined;\n          node.parentNode.childNodes[i] = node;\n        }\n      });\n      return node;\n    }\n    /**\n     * Removes current node from the mime tree\n     *\n     * @return {Object} removed node\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (!this.parentNode) {\n        return this;\n      }\n\n      for (var i = this.parentNode.childNodes.length - 1; i >= 0; i--) {\n        if (this.parentNode.childNodes[i] === this) {\n          this.parentNode.childNodes.splice(i, 1);\n          this.parentNode = undefined;\n          this.rootNode = this;\n          return this;\n        }\n      }\n    }\n    /**\n     * Sets a header value. If the value for selected key exists, it is overwritten.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n\n  }, {\n    key: \"setHeader\",\n    value: function setHeader(key, value) {\n      var _this2 = this;\n\n      var added = false,\n          headerValue; // Allow setting multiple headers at once\n\n      if (!value && key && typeof key === 'object') {\n        // allow {key:'content-type', value: 'text/plain'}\n        if (key.key && 'value' in key) {\n          this.setHeader(key.key, key.value);\n        } else if (Array.isArray(key)) {\n          // allow [{key:'content-type', value: 'text/plain'}]\n          key.forEach(function (i) {\n            _this2.setHeader(i.key, i.value);\n          });\n        } else {\n          // allow {'content-type': 'text/plain'}\n          Object.keys(key).forEach(function (i) {\n            _this2.setHeader(i, key[i]);\n          });\n        }\n\n        return this;\n      }\n\n      key = this._normalizeHeaderKey(key);\n      headerValue = {\n        key: key,\n        value: value\n      }; // Check if the value exists and overwrite\n\n      for (var i = 0, len = this._headers.length; i < len; i++) {\n        if (this._headers[i].key === key) {\n          if (!added) {\n            // replace the first match\n            this._headers[i] = headerValue;\n            added = true;\n          } else {\n            // remove following matches\n            this._headers.splice(i, 1);\n\n            i--;\n            len--;\n          }\n        }\n      } // match not found, append the value\n\n\n      if (!added) {\n        this._headers.push(headerValue);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a header value. If the value for selected key exists, the value is appended\n     * as a new field and old one is not touched.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n\n  }, {\n    key: \"addHeader\",\n    value: function addHeader(key, value) {\n      var _this3 = this;\n\n      // Allow setting multiple headers at once\n      if (!value && key && typeof key === 'object') {\n        // allow {key:'content-type', value: 'text/plain'}\n        if (key.key && key.value) {\n          this.addHeader(key.key, key.value);\n        } else if (Array.isArray(key)) {\n          // allow [{key:'content-type', value: 'text/plain'}]\n          key.forEach(function (i) {\n            _this3.addHeader(i.key, i.value);\n          });\n        } else {\n          // allow {'content-type': 'text/plain'}\n          Object.keys(key).forEach(function (i) {\n            _this3.addHeader(i, key[i]);\n          });\n        }\n\n        return this;\n      } else if (Array.isArray(value)) {\n        value.forEach(function (val) {\n          _this3.addHeader(key, val);\n        });\n        return this;\n      }\n\n      this._headers.push({\n        key: this._normalizeHeaderKey(key),\n        value: value\n      });\n\n      return this;\n    }\n    /**\n     * Retrieves the first mathcing value of a selected key\n     *\n     * @param {String} key Key to search for\n     * @retun {String} Value for the key\n     */\n\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(key) {\n      key = this._normalizeHeaderKey(key);\n\n      for (var i = 0, len = this._headers.length; i < len; i++) {\n        if (this._headers[i].key === key) {\n          return this._headers[i].value;\n        }\n      }\n    }\n    /**\n     * Sets body content for current node. If the value is a string, charset is added automatically\n     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n     * the charset yourself\n     *\n     * @param (String|Buffer) content Body content\n     * @return {Object} current node\n     */\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      var _this4 = this;\n\n      this.content = content;\n\n      if (typeof this.content.pipe === 'function') {\n        // pre-stream handler. might be triggered if a stream is set as content\n        // and 'error' fires before anything is done with this stream\n        this._contentErrorHandler = function (err) {\n          _this4.content.removeListener('error', _this4._contentErrorHandler);\n\n          _this4.content = err;\n        };\n\n        this.content.once('error', this._contentErrorHandler);\n      } else if (typeof this.content === 'string') {\n        this._isPlainText = mimeFuncs.isPlainText(this.content);\n\n        if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {\n          // If there are lines longer than 76 symbols/bytes do not use 7bit\n          this._hasLongLines = true;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build(callback) {\n      var promise;\n\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n\n      var stream = this.createReadStream();\n      var buf = [];\n      var buflen = 0;\n      var returned = false;\n      stream.on('readable', function () {\n        var chunk;\n\n        while ((chunk = stream.read()) !== null) {\n          buf.push(chunk);\n          buflen += chunk.length;\n        }\n      });\n      stream.once('error', function (err) {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        return callback(err);\n      });\n      stream.once('end', function (chunk) {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n\n        if (chunk && chunk.length) {\n          buf.push(chunk);\n          buflen += chunk.length;\n        }\n\n        return callback(null, Buffer.concat(buf, buflen));\n      });\n      return promise;\n    }\n  }, {\n    key: \"getTransferEncoding\",\n    value: function getTransferEncoding() {\n      var transferEncoding = false;\n      var contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();\n\n      if (this.content) {\n        transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();\n\n        if (!transferEncoding || !['base64', 'quoted-printable'].includes(transferEncoding)) {\n          if (/^text\\//i.test(contentType)) {\n            // If there are no special symbols, no need to modify the text\n            if (this._isPlainText && !this._hasLongLines) {\n              transferEncoding = '7bit';\n            } else if (typeof this.content === 'string' || this.content instanceof Buffer) {\n              // detect preferred encoding for string value\n              transferEncoding = this._getTextEncoding(this.content) === 'Q' ? 'quoted-printable' : 'base64';\n            } else {\n              // we can not check content for a stream, so either use preferred encoding or fallback to QP\n              transferEncoding = this.textEncoding === 'B' ? 'base64' : 'quoted-printable';\n            }\n          } else if (!/^(multipart|message)\\//i.test(contentType)) {\n            transferEncoding = transferEncoding || 'base64';\n          }\n        }\n      }\n\n      return transferEncoding;\n    }\n    /**\n     * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n     *\n     * @returns {String} Headers\n     */\n\n  }, {\n    key: \"buildHeaders\",\n    value: function buildHeaders() {\n      var _this5 = this;\n\n      var transferEncoding = this.getTransferEncoding();\n      var headers = [];\n\n      if (transferEncoding) {\n        this.setHeader('Content-Transfer-Encoding', transferEncoding);\n      }\n\n      if (this.filename && !this.getHeader('Content-Disposition')) {\n        this.setHeader('Content-Disposition', 'attachment');\n      } // Ensure mandatory header fields\n\n\n      if (this.rootNode === this) {\n        if (!this.getHeader('Date')) {\n          this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));\n        } // ensure that Message-Id is present\n\n\n        this.messageId();\n\n        if (!this.getHeader('MIME-Version')) {\n          this.setHeader('MIME-Version', '1.0');\n        }\n      }\n\n      this._headers.forEach(function (header) {\n        var key = header.key;\n        var value = header.value;\n        var structured;\n        var param;\n        var options = {};\n        var formattedHeaders = ['From', 'Sender', 'To', 'Cc', 'Bcc', 'Reply-To', 'Date', 'References'];\n\n        if (value && typeof value === 'object' && !formattedHeaders.includes(key)) {\n          Object.keys(value).forEach(function (key) {\n            if (key !== 'value') {\n              options[key] = value[key];\n            }\n          });\n          value = (value.value || '').toString();\n\n          if (!value.trim()) {\n            return;\n          }\n        }\n\n        if (options.prepared) {\n          // header value is\n          if (options.foldLines) {\n            headers.push(mimeFuncs.foldLines(key + ': ' + value));\n          } else {\n            headers.push(key + ': ' + value);\n          }\n\n          return;\n        }\n\n        switch (header.key) {\n          case 'Content-Disposition':\n            structured = mimeFuncs.parseHeaderValue(value);\n\n            if (_this5.filename) {\n              structured.params.filename = _this5.filename;\n            }\n\n            value = mimeFuncs.buildHeaderValue(structured);\n            break;\n\n          case 'Content-Type':\n            structured = mimeFuncs.parseHeaderValue(value);\n\n            _this5._handleContentType(structured);\n\n            if (structured.value.match(/^text\\/plain\\b/) && typeof _this5.content === 'string' && /[\\u0080-\\uFFFF]/.test(_this5.content)) {\n              structured.params.charset = 'utf-8';\n            }\n\n            value = mimeFuncs.buildHeaderValue(structured);\n\n            if (_this5.filename) {\n              // add support for non-compliant clients like QQ webmail\n              // we can't build the value with buildHeaderValue as the value is non standard and\n              // would be converted to parameter continuation encoding that we do not want\n              param = _this5._encodeWords(_this5.filename);\n\n              if (param !== _this5.filename || /[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(param)) {\n                // include value in quotes if needed\n                param = '\"' + param + '\"';\n              }\n\n              value += '; name=' + param;\n            }\n\n            break;\n\n          case 'Bcc':\n            if (!_this5.keepBcc) {\n              // skip BCC values\n              return;\n            }\n\n            break;\n        }\n\n        value = _this5._encodeHeaderValue(key, value); // skip empty lines\n\n        if (!(value || '').toString().trim()) {\n          return;\n        }\n\n        if (typeof _this5.normalizeHeaderKey === 'function') {\n          var normalized = _this5.normalizeHeaderKey(key, value);\n\n          if (normalized && typeof normalized === 'string' && normalized.length) {\n            key = normalized;\n          }\n        }\n\n        headers.push(mimeFuncs.foldLines(key + ': ' + value, 76));\n      });\n\n      return headers.join('\\r\\n');\n    }\n    /**\n     * Streams the rfc2822 message from the current node. If this is a root node,\n     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n     *\n     * @return {String} Compiled message\n     */\n\n  }, {\n    key: \"createReadStream\",\n    value: function createReadStream(options) {\n      options = options || {};\n      var stream = new PassThrough(options);\n      var outputStream = stream;\n      var transform;\n      this.stream(stream, options, function (err) {\n        if (err) {\n          outputStream.emit('error', err);\n          return;\n        }\n\n        stream.end();\n      });\n\n      for (var i = 0, len = this._transforms.length; i < len; i++) {\n        transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];\n        outputStream.once('error', function (err) {\n          transform.emit('error', err);\n        });\n        outputStream = outputStream.pipe(transform);\n      } // ensure terminating newline after possible user transforms\n\n\n      transform = new LastNewline();\n      outputStream.once('error', function (err) {\n        transform.emit('error', err);\n      });\n      outputStream = outputStream.pipe(transform); // dkim and stuff\n\n      for (var _i = 0, _len = this._processFuncs.length; _i < _len; _i++) {\n        transform = this._processFuncs[_i];\n        outputStream = transform(outputStream);\n      }\n\n      if (this.newline) {\n        var winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes(this.newline.toString().toLowerCase());\n        var newlineTransform = winbreak ? new LeWindows() : new LeUnix();\n\n        var _stream = outputStream.pipe(newlineTransform);\n\n        outputStream.on('error', function (err) {\n          return _stream.emit('error', err);\n        });\n        return _stream;\n      }\n\n      return outputStream;\n    }\n    /**\n     * Appends a transform stream object to the transforms list. Final output\n     * is passed through this stream before exposing\n     *\n     * @param {Object} transform Read-Write stream\n     */\n\n  }, {\n    key: \"transform\",\n    value: function transform(_transform) {\n      this._transforms.push(_transform);\n    }\n    /**\n     * Appends a post process function. The functon is run after transforms and\n     * uses the following syntax\n     *\n     *   processFunc(input) -> outputStream\n     *\n     * @param {Object} processFunc Read-Write stream\n     */\n\n  }, {\n    key: \"processFunc\",\n    value: function processFunc(_processFunc) {\n      this._processFuncs.push(_processFunc);\n    }\n  }, {\n    key: \"stream\",\n    value: function stream(outputStream, options, done) {\n      var _this6 = this;\n\n      var transferEncoding = this.getTransferEncoding();\n      var contentStream;\n      var localStream; // protect actual callback against multiple triggering\n\n      var returned = false;\n\n      var callback = function callback(err) {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        done(err);\n      }; // for multipart nodes, push child nodes\n      // for content nodes end the stream\n\n\n      var finalize = function finalize() {\n        var childId = 0;\n\n        var processChildNode = function processChildNode() {\n          if (childId >= _this6.childNodes.length) {\n            outputStream.write('\\r\\n--' + _this6.boundary + '--\\r\\n');\n            return callback();\n          }\n\n          var child = _this6.childNodes[childId++];\n          outputStream.write((childId > 1 ? '\\r\\n' : '') + '--' + _this6.boundary + '\\r\\n');\n          child.stream(outputStream, options, function (err) {\n            if (err) {\n              return callback(err);\n            }\n\n            setImmediate(processChildNode);\n          });\n        };\n\n        if (_this6.multipart) {\n          setImmediate(processChildNode);\n        } else {\n          return callback();\n        }\n      }; // pushes node content\n\n\n      var sendContent = function sendContent() {\n        if (_this6.content) {\n          if (Object.prototype.toString.call(_this6.content) === '[object Error]') {\n            // content is already errored\n            return callback(_this6.content);\n          }\n\n          if (typeof _this6.content.pipe === 'function') {\n            _this6.content.removeListener('error', _this6._contentErrorHandler);\n\n            _this6._contentErrorHandler = function (err) {\n              return callback(err);\n            };\n\n            _this6.content.once('error', _this6._contentErrorHandler);\n          }\n\n          var createStream = function createStream() {\n            if (['quoted-printable', 'base64'].includes(transferEncoding)) {\n              contentStream = new (transferEncoding === 'base64' ? base64 : qp).Encoder(options);\n              contentStream.pipe(outputStream, {\n                end: false\n              });\n              contentStream.once('end', finalize);\n              contentStream.once('error', function (err) {\n                return callback(err);\n              });\n              localStream = _this6._getStream(_this6.content);\n              localStream.pipe(contentStream);\n            } else {\n              // anything that is not QP or Base54 passes as-is\n              localStream = _this6._getStream(_this6.content);\n              localStream.pipe(outputStream, {\n                end: false\n              });\n              localStream.once('end', finalize);\n            }\n\n            localStream.once('error', function (err) {\n              return callback(err);\n            });\n          };\n\n          if (_this6.content._resolve) {\n            var chunks = [];\n            var chunklen = 0;\n            var _returned = false;\n\n            var sourceStream = _this6._getStream(_this6.content);\n\n            sourceStream.on('error', function (err) {\n              if (_returned) {\n                return;\n              }\n\n              _returned = true;\n              callback(err);\n            });\n            sourceStream.on('readable', function () {\n              var chunk;\n\n              while ((chunk = sourceStream.read()) !== null) {\n                chunks.push(chunk);\n                chunklen += chunk.length;\n              }\n            });\n            sourceStream.on('end', function () {\n              if (_returned) {\n                return;\n              }\n\n              _returned = true;\n              _this6.content._resolve = false;\n              _this6.content._resolvedValue = Buffer.concat(chunks, chunklen);\n              setImmediate(createStream);\n            });\n          } else {\n            setImmediate(createStream);\n          }\n\n          return;\n        } else {\n          return setImmediate(finalize);\n        }\n      };\n\n      if (this._raw) {\n        setImmediate(function () {\n          if (Object.prototype.toString.call(_this6._raw) === '[object Error]') {\n            // content is already errored\n            return callback(_this6._raw);\n          } // remove default error handler (if set)\n\n\n          if (typeof _this6._raw.pipe === 'function') {\n            _this6._raw.removeListener('error', _this6._contentErrorHandler);\n          }\n\n          var raw = _this6._getStream(_this6._raw);\n\n          raw.pipe(outputStream, {\n            end: false\n          });\n          raw.on('error', function (err) {\n            return outputStream.emit('error', err);\n          });\n          raw.on('end', finalize);\n        });\n      } else {\n        outputStream.write(this.buildHeaders() + '\\r\\n\\r\\n');\n        setImmediate(sendContent);\n      }\n    }\n    /**\n     * Sets envelope to be used instead of the generated one\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n\n  }, {\n    key: \"setEnvelope\",\n    value: function setEnvelope(envelope) {\n      var _this7 = this;\n\n      var list;\n      this._envelope = {\n        from: false,\n        to: []\n      };\n\n      if (envelope.from) {\n        list = [];\n\n        this._convertAddresses(this._parseAddresses(envelope.from), list);\n\n        list = list.filter(function (address) {\n          return address && address.address;\n        });\n\n        if (list.length && list[0]) {\n          this._envelope.from = list[0].address;\n        }\n      }\n\n      ['to', 'cc', 'bcc'].forEach(function (key) {\n        if (envelope[key]) {\n          _this7._convertAddresses(_this7._parseAddresses(envelope[key]), _this7._envelope.to);\n        }\n      });\n      this._envelope.to = this._envelope.to.map(function (to) {\n        return to.address;\n      }).filter(function (address) {\n        return address;\n      });\n      var standardFields = ['to', 'cc', 'bcc', 'from'];\n      Object.keys(envelope).forEach(function (key) {\n        if (!standardFields.includes(key)) {\n          _this7._envelope[key] = envelope[key];\n        }\n      });\n      return this;\n    }\n    /**\n     * Generates and returns an object with parsed address fields\n     *\n     * @return {Object} Address object\n     */\n\n  }, {\n    key: \"getAddresses\",\n    value: function getAddresses() {\n      var _this8 = this;\n\n      var addresses = {};\n\n      this._headers.forEach(function (header) {\n        var key = header.key.toLowerCase();\n\n        if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].includes(key)) {\n          if (!Array.isArray(addresses[key])) {\n            addresses[key] = [];\n          }\n\n          _this8._convertAddresses(_this8._parseAddresses(header.value), addresses[key]);\n        }\n      });\n\n      return addresses;\n    }\n    /**\n     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n\n  }, {\n    key: \"getEnvelope\",\n    value: function getEnvelope() {\n      var _this9 = this;\n\n      if (this._envelope) {\n        return this._envelope;\n      }\n\n      var envelope = {\n        from: false,\n        to: []\n      };\n\n      this._headers.forEach(function (header) {\n        var list = [];\n\n        if (header.key === 'From' || !envelope.from && ['Reply-To', 'Sender'].includes(header.key)) {\n          _this9._convertAddresses(_this9._parseAddresses(header.value), list);\n\n          if (list.length && list[0]) {\n            envelope.from = list[0].address;\n          }\n        } else if (['To', 'Cc', 'Bcc'].includes(header.key)) {\n          _this9._convertAddresses(_this9._parseAddresses(header.value), envelope.to);\n        }\n      });\n\n      envelope.to = envelope.to.map(function (to) {\n        return to.address;\n      });\n      return envelope;\n    }\n    /**\n     * Returns Message-Id value. If it does not exist, then creates one\n     *\n     * @return {String} Message-Id value\n     */\n\n  }, {\n    key: \"messageId\",\n    value: function messageId() {\n      var messageId = this.getHeader('Message-ID'); // You really should define your own Message-Id field!\n\n      if (!messageId) {\n        messageId = this._generateMessageId();\n        this.setHeader('Message-ID', messageId);\n      }\n\n      return messageId;\n    }\n    /**\n     * Sets pregenerated content that will be used as the output of this node\n     *\n     * @param {String|Buffer|Stream} Raw MIME contents\n     */\n\n  }, {\n    key: \"setRaw\",\n    value: function setRaw(raw) {\n      var _this10 = this;\n\n      this._raw = raw;\n\n      if (this._raw && typeof this._raw.pipe === 'function') {\n        // pre-stream handler. might be triggered if a stream is set as content\n        // and 'error' fires before anything is done with this stream\n        this._contentErrorHandler = function (err) {\n          _this10._raw.removeListener('error', _this10._contentErrorHandler);\n\n          _this10._raw = err;\n        };\n\n        this._raw.once('error', this._contentErrorHandler);\n      }\n\n      return this;\n    } /////// PRIVATE METHODS\n\n    /**\n     * Detects and returns handle to a stream related with the content.\n     *\n     * @param {Mixed} content Node content\n     * @returns {Object} Stream object\n     */\n\n  }, {\n    key: \"_getStream\",\n    value: function _getStream(content) {\n      var contentStream;\n\n      if (content._resolvedValue) {\n        // pass string or buffer content as a stream\n        contentStream = new PassThrough();\n        setImmediate(function () {\n          return contentStream.end(content._resolvedValue);\n        });\n        return contentStream;\n      } else if (typeof content.pipe === 'function') {\n        // assume as stream\n        return content;\n      } else if (content && typeof content.path === 'string' && !content.href) {\n        if (this.disableFileAccess) {\n          contentStream = new PassThrough();\n          setImmediate(function () {\n            return contentStream.emit('error', new Error('File access rejected for ' + content.path));\n          });\n          return contentStream;\n        } // read file\n\n\n        return fs.createReadStream(content.path);\n      } else if (content && typeof content.href === 'string') {\n        if (this.disableUrlAccess) {\n          contentStream = new PassThrough();\n          setImmediate(function () {\n            return contentStream.emit('error', new Error('Url access rejected for ' + content.href));\n          });\n          return contentStream;\n        } // fetch URL\n\n\n        return fetch(content.href, {\n          headers: content.httpHeaders\n        });\n      } else {\n        // pass string or buffer content as a stream\n        contentStream = new PassThrough();\n        setImmediate(function () {\n          return contentStream.end(content || '');\n        });\n        return contentStream;\n      }\n    }\n    /**\n     * Parses addresses. Takes in a single address or an array or an\n     * array of address arrays (eg. To: [[first group], [second group],...])\n     *\n     * @param {Mixed} addresses Addresses to be parsed\n     * @return {Array} An array of address objects\n     */\n\n  }, {\n    key: \"_parseAddresses\",\n    value: function _parseAddresses(addresses) {\n      var _this11 = this;\n\n      return [].concat.apply([], [].concat(addresses).map(function (address) {\n        // eslint-disable-line prefer-spread\n        if (address && address.address) {\n          address.address = _this11._normalizeAddress(address.address);\n          address.name = address.name || '';\n          return [address];\n        }\n\n        return addressparser(address);\n      }));\n    }\n    /**\n     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n     *\n     * @param {String} key Key to be normalized\n     * @return {String} key in Camel-Case form\n     */\n\n  }, {\n    key: \"_normalizeHeaderKey\",\n    value: function _normalizeHeaderKey(key) {\n      key = (key || '').toString() // no newlines in keys\n      .replace(/\\r?\\n|\\r/g, ' ').trim().toLowerCase() // use uppercase words, except MIME\n      .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, function (c) {\n        return c.toUpperCase();\n      }) // special case\n      .replace(/^Content-Features$/i, 'Content-features');\n      return key;\n    }\n    /**\n     * Checks if the content type is multipart and defines boundary if needed.\n     * Doesn't return anything, modifies object argument instead.\n     *\n     * @param {Object} structured Parsed header value for 'Content-Type' key\n     */\n\n  }, {\n    key: \"_handleContentType\",\n    value: function _handleContentType(structured) {\n      this.contentType = structured.value.trim().toLowerCase();\n      this.multipart = /^multipart\\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf('/') + 1) : false;\n\n      if (this.multipart) {\n        this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n      } else {\n        this.boundary = false;\n      }\n    }\n    /**\n     * Generates a multipart boundary value\n     *\n     * @return {String} boundary value\n     */\n\n  }, {\n    key: \"_generateBoundary\",\n    value: function _generateBoundary() {\n      return this.rootNode.boundaryPrefix + '-' + this.rootNode.baseBoundary + '-Part_' + this._nodeId;\n    }\n    /**\n     * Encodes a header value for use in the generated rfc2822 email.\n     *\n     * @param {String} key Header key\n     * @param {String} value Header value\n     */\n\n  }, {\n    key: \"_encodeHeaderValue\",\n    value: function _encodeHeaderValue(key, value) {\n      key = this._normalizeHeaderKey(key);\n\n      switch (key) {\n        // Structured headers\n        case 'From':\n        case 'Sender':\n        case 'To':\n        case 'Cc':\n        case 'Bcc':\n        case 'Reply-To':\n          return this._convertAddresses(this._parseAddresses(value));\n        // values enclosed in <>\n\n        case 'Message-ID':\n        case 'In-Reply-To':\n        case 'Content-Id':\n          value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n          if (value.charAt(0) !== '<') {\n            value = '<' + value;\n          }\n\n          if (value.charAt(value.length - 1) !== '>') {\n            value = value + '>';\n          }\n\n          return value;\n        // space separated list of values enclosed in <>\n\n        case 'References':\n          value = [].concat.apply([], [].concat(value || '').map(function (elm) {\n            // eslint-disable-line prefer-spread\n            elm = (elm || '').toString().replace(/\\r?\\n|\\r/g, ' ').trim();\n            return elm.replace(/<[^>]*>/g, function (str) {\n              return str.replace(/\\s/g, '');\n            }).split(/\\s+/);\n          })).map(function (elm) {\n            if (elm.charAt(0) !== '<') {\n              elm = '<' + elm;\n            }\n\n            if (elm.charAt(elm.length - 1) !== '>') {\n              elm = elm + '>';\n            }\n\n            return elm;\n          });\n          return value.join(' ').trim();\n\n        case 'Date':\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return value.toUTCString().replace(/GMT/, '+0000');\n          }\n\n          value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n          return this._encodeWords(value);\n\n        case 'Content-Type':\n        case 'Content-Disposition':\n          // if it includes a filename then it is already encoded\n          return (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n        default:\n          value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' '); // encodeWords only encodes if needed, otherwise the original string is returned\n\n          return this._encodeWords(value);\n      }\n    }\n    /**\n     * Rebuilds address object using punycode and other adjustments\n     *\n     * @param {Array} addresses An array of address objects\n     * @param {Array} [uniqueList] An array to be populated with addresses\n     * @return {String} address string\n     */\n\n  }, {\n    key: \"_convertAddresses\",\n    value: function _convertAddresses(addresses, uniqueList) {\n      var _this12 = this;\n\n      var values = [];\n      uniqueList = uniqueList || [];\n      [].concat(addresses || []).forEach(function (address) {\n        if (address.address) {\n          address.address = _this12._normalizeAddress(address.address);\n\n          if (!address.name) {\n            values.push(address.address);\n          } else if (address.name) {\n            values.push(_this12._encodeAddressName(address.name) + ' <' + address.address + '>');\n          }\n\n          if (address.address) {\n            if (!uniqueList.filter(function (a) {\n              return a.address === address.address;\n            }).length) {\n              uniqueList.push(address);\n            }\n          }\n        } else if (address.group) {\n          values.push(_this12._encodeAddressName(address.name) + ':' + (address.group.length ? _this12._convertAddresses(address.group, uniqueList) : '').trim() + ';');\n        }\n      });\n      return values.join(', ');\n    }\n    /**\n     * Normalizes an email address\n     *\n     * @param {Array} address An array of address objects\n     * @return {String} address string\n     */\n\n  }, {\n    key: \"_normalizeAddress\",\n    value: function _normalizeAddress(address) {\n      address = (address || '').toString().trim();\n      var lastAt = address.lastIndexOf('@');\n\n      if (lastAt < 0) {\n        // Bare username\n        return address;\n      }\n\n      var user = address.substr(0, lastAt);\n      var domain = address.substr(lastAt + 1); // Usernames are not touched and are kept as is even if these include unicode\n      // Domains are punycoded by default\n      // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n      // non-unicode domains are left as is\n\n      return user + '@' + punycode.toASCII(domain.toLowerCase());\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n\n  }, {\n    key: \"_encodeAddressName\",\n    value: function _encodeAddressName(name) {\n      if (!/^[\\w ']*$/.test(name)) {\n        if (/^[\\x20-\\x7e]*$/.test(name)) {\n          return '\"' + name.replace(/([\\\\\"])/g, '\\\\$1') + '\"';\n        } else {\n          return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);\n        }\n      }\n\n      return name;\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n\n  }, {\n    key: \"_encodeWords\",\n    value: function _encodeWords(value) {\n      // set encodeAll parameter to true even though it is against the recommendation of RFC2047,\n      // by default only words that include non-ascii should be converted into encoded words\n      // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace\n      return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);\n    }\n    /**\n     * Detects best mime encoding for a text value\n     *\n     * @param {String} value Value to check for\n     * @return {String} either 'Q' or 'B'\n     */\n\n  }, {\n    key: \"_getTextEncoding\",\n    value: function _getTextEncoding(value) {\n      value = (value || '').toString();\n      var encoding = this.textEncoding;\n      var latinLen;\n      var nonLatinLen;\n\n      if (!encoding) {\n        // count latin alphabet symbols and 8-bit range symbols + control symbols\n        // if there are more latin characters, then use quoted-printable\n        // encoding, otherwise use base64\n        nonLatinLen = (value.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\u0080-\\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex\n\n        latinLen = (value.match(/[a-z]/gi) || []).length; // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B\n\n        encoding = nonLatinLen < latinLen ? 'Q' : 'B';\n      }\n\n      return encoding;\n    }\n    /**\n     * Generates a message id\n     *\n     * @return {String} Random Message-ID value\n     */\n\n  }, {\n    key: \"_generateMessageId\",\n    value: function _generateMessageId() {\n      return '<' + [2, 2, 2, 6].reduce( // crux to generate UUID-like random strings\n      function (prev, len) {\n        return prev + '-' + crypto.randomBytes(len).toString('hex');\n      }, crypto.randomBytes(4).toString('hex')) + '@' + // try to use the domain of the FROM address or fallback to server hostname\n      (this.getEnvelope().from || this.hostname || os.hostname() || 'localhost').split('@').pop() + '>';\n    }\n  }]);\n\n  return MimeNode;\n}();\n\nmodule.exports = MimeNode;","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/node_modules/nodemailer/lib/mime-node/index.js"],"names":["crypto","require","os","fs","punycode","PassThrough","shared","mimeFuncs","qp","base64","addressparser","fetch","LastNewline","LeWindows","LeUnix","MimeNode","contentType","options","nodeCounter","baseBoundary","randomBytes","toString","boundaryPrefix","disableFileAccess","disableUrlAccess","normalizeHeaderKey","date","Date","rootNode","keepBcc","filename","detectMimeType","split","pop","textEncoding","trim","charAt","toUpperCase","parentNode","hostname","newline","childNodes","_nodeId","_headers","_isPlainText","_hasLongLines","_envelope","_raw","_transforms","_processFuncs","setHeader","undefined","node","appendChild","childNode","push","forEach","i","length","splice","key","value","added","headerValue","Array","isArray","Object","keys","_normalizeHeaderKey","len","addHeader","val","content","pipe","_contentErrorHandler","err","removeListener","once","isPlainText","hasLongerLines","callback","promise","Promise","resolve","reject","callbackPromise","stream","createReadStream","buf","buflen","returned","on","chunk","read","Buffer","concat","transferEncoding","getHeader","toLowerCase","includes","test","_getTextEncoding","getTransferEncoding","headers","toUTCString","replace","messageId","header","structured","param","formattedHeaders","prepared","foldLines","parseHeaderValue","params","buildHeaderValue","_handleContentType","match","charset","_encodeWords","_encodeHeaderValue","normalized","join","outputStream","transform","emit","end","winbreak","newlineTransform","processFunc","done","contentStream","localStream","finalize","childId","processChildNode","write","boundary","child","setImmediate","multipart","sendContent","prototype","call","createStream","Encoder","_getStream","_resolve","chunks","chunklen","sourceStream","_resolvedValue","raw","buildHeaders","envelope","list","from","to","_convertAddresses","_parseAddresses","filter","address","map","standardFields","addresses","_generateMessageId","path","href","Error","httpHeaders","apply","_normalizeAddress","name","c","substr","indexOf","_generateBoundary","elm","str","uniqueList","values","_encodeAddressName","a","group","lastAt","lastIndexOf","user","domain","toASCII","encodeWord","encodeWords","encoding","latinLen","nonLatinLen","reduce","prev","getEnvelope","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */\n\n'use strict';\n\nconst crypto = require('crypto');\nconst os = require('os');\nconst fs = require('fs');\nconst punycode = require('punycode');\nconst PassThrough = require('stream').PassThrough;\nconst shared = require('../shared');\n\nconst mimeFuncs = require('../mime-funcs');\nconst qp = require('../qp');\nconst base64 = require('../base64');\nconst addressparser = require('../addressparser');\nconst fetch = require('../fetch');\nconst LastNewline = require('./last-newline');\n\nconst LeWindows = require('./le-windows');\nconst LeUnix = require('./le-unix');\n\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing\n * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'\n */\nclass MimeNode {\n    constructor(contentType, options) {\n        this.nodeCounter = 0;\n\n        options = options || {};\n\n        /**\n         * shared part of the unique multipart boundary\n         */\n        this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString('hex');\n        this.boundaryPrefix = options.boundaryPrefix || '--_NmP';\n\n        this.disableFileAccess = !!options.disableFileAccess;\n        this.disableUrlAccess = !!options.disableUrlAccess;\n\n        this.normalizeHeaderKey = options.normalizeHeaderKey;\n\n        /**\n         * If date headers is missing and current node is the root, this value is used instead\n         */\n        this.date = new Date();\n\n        /**\n         * Root node for current mime tree\n         */\n        this.rootNode = options.rootNode || this;\n\n        /**\n         * If true include Bcc in generated headers (if available)\n         */\n        this.keepBcc = !!options.keepBcc;\n\n        /**\n         * If filename is specified but contentType is not (probably an attachment)\n         * detect the content type from filename extension\n         */\n        if (options.filename) {\n            /**\n             * Filename for this node. Useful with attachments\n             */\n            this.filename = options.filename;\n            if (!contentType) {\n                contentType = mimeFuncs.detectMimeType(this.filename.split('.').pop());\n            }\n        }\n\n        /**\n         * Indicates which encoding should be used for header strings: \"Q\" or \"B\"\n         */\n        this.textEncoding = (options.textEncoding || '').toString().trim().charAt(0).toUpperCase();\n\n        /**\n         * Immediate parent for this node (or undefined if not set)\n         */\n        this.parentNode = options.parentNode;\n\n        /**\n         * Hostname for default message-id values\n         */\n        this.hostname = options.hostname;\n\n        /**\n         * If set to 'win' then uses \\r\\n, if 'linux' then \\n. If not set (or `raw` is used) then newlines are kept as is.\n         */\n        this.newline = options.newline;\n\n        /**\n         * An array for possible child nodes\n         */\n        this.childNodes = [];\n\n        /**\n         * Used for generating unique boundaries (prepended to the shared base)\n         */\n        this._nodeId = ++this.rootNode.nodeCounter;\n\n        /**\n         * A list of header values for this node in the form of [{key:'', value:''}]\n         */\n        this._headers = [];\n\n        /**\n         * True if the content only uses ASCII printable characters\n         * @type {Boolean}\n         */\n        this._isPlainText = false;\n\n        /**\n         * True if the content is plain text but has longer lines than allowed\n         * @type {Boolean}\n         */\n        this._hasLongLines = false;\n\n        /**\n         * If set, use instead this value for envelopes instead of generating one\n         * @type {Boolean}\n         */\n        this._envelope = false;\n\n        /**\n         * If set then use this value as the stream content instead of building it\n         * @type {String|Buffer|Stream}\n         */\n        this._raw = false;\n\n        /**\n         * Additional transform streams that the message will be piped before\n         * exposing by createReadStream\n         * @type {Array}\n         */\n        this._transforms = [];\n\n        /**\n         * Additional process functions that the message will be piped through before\n         * exposing by createReadStream. These functions are run after transforms\n         * @type {Array}\n         */\n        this._processFuncs = [];\n\n        /**\n         * If content type is set (or derived from the filename) add it to headers\n         */\n        if (contentType) {\n            this.setHeader('Content-Type', contentType);\n        }\n    }\n\n    /////// PUBLIC METHODS\n\n    /**\n     * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n     *\n     * @param {String} [contentType] Optional content type\n     * @param {Object} [options] Optional options object\n     * @return {Object} Created node object\n     */\n    createChild(contentType, options) {\n        if (!options && typeof contentType === 'object') {\n            options = contentType;\n            contentType = undefined;\n        }\n        let node = new MimeNode(contentType, options);\n        this.appendChild(node);\n        return node;\n    }\n\n    /**\n     * Appends an existing node to the mime tree. Removes the node from an existing\n     * tree if needed\n     *\n     * @param {Object} childNode node to be appended\n     * @return {Object} Appended node object\n     */\n    appendChild(childNode) {\n        if (childNode.rootNode !== this.rootNode) {\n            childNode.rootNode = this.rootNode;\n            childNode._nodeId = ++this.rootNode.nodeCounter;\n        }\n\n        childNode.parentNode = this;\n\n        this.childNodes.push(childNode);\n        return childNode;\n    }\n\n    /**\n     * Replaces current node with another node\n     *\n     * @param {Object} node Replacement node\n     * @return {Object} Replacement node\n     */\n    replace(node) {\n        if (node === this) {\n            return this;\n        }\n\n        this.parentNode.childNodes.forEach((childNode, i) => {\n            if (childNode === this) {\n                node.rootNode = this.rootNode;\n                node.parentNode = this.parentNode;\n                node._nodeId = this._nodeId;\n\n                this.rootNode = this;\n                this.parentNode = undefined;\n\n                node.parentNode.childNodes[i] = node;\n            }\n        });\n\n        return node;\n    }\n\n    /**\n     * Removes current node from the mime tree\n     *\n     * @return {Object} removed node\n     */\n    remove() {\n        if (!this.parentNode) {\n            return this;\n        }\n\n        for (let i = this.parentNode.childNodes.length - 1; i >= 0; i--) {\n            if (this.parentNode.childNodes[i] === this) {\n                this.parentNode.childNodes.splice(i, 1);\n                this.parentNode = undefined;\n                this.rootNode = this;\n                return this;\n            }\n        }\n    }\n\n    /**\n     * Sets a header value. If the value for selected key exists, it is overwritten.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n    setHeader(key, value) {\n        let added = false,\n            headerValue;\n\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === 'object') {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && 'value' in key) {\n                this.setHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach(i => {\n                    this.setHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach(i => {\n                    this.setHeader(i, key[i]);\n                });\n            }\n            return this;\n        }\n\n        key = this._normalizeHeaderKey(key);\n\n        headerValue = {\n            key,\n            value\n        };\n\n        // Check if the value exists and overwrite\n        for (let i = 0, len = this._headers.length; i < len; i++) {\n            if (this._headers[i].key === key) {\n                if (!added) {\n                    // replace the first match\n                    this._headers[i] = headerValue;\n                    added = true;\n                } else {\n                    // remove following matches\n                    this._headers.splice(i, 1);\n                    i--;\n                    len--;\n                }\n            }\n        }\n\n        // match not found, append the value\n        if (!added) {\n            this._headers.push(headerValue);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a header value. If the value for selected key exists, the value is appended\n     * as a new field and old one is not touched.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n    addHeader(key, value) {\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === 'object') {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && key.value) {\n                this.addHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach(i => {\n                    this.addHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach(i => {\n                    this.addHeader(i, key[i]);\n                });\n            }\n            return this;\n        } else if (Array.isArray(value)) {\n            value.forEach(val => {\n                this.addHeader(key, val);\n            });\n            return this;\n        }\n\n        this._headers.push({\n            key: this._normalizeHeaderKey(key),\n            value\n        });\n\n        return this;\n    }\n\n    /**\n     * Retrieves the first mathcing value of a selected key\n     *\n     * @param {String} key Key to search for\n     * @retun {String} Value for the key\n     */\n    getHeader(key) {\n        key = this._normalizeHeaderKey(key);\n        for (let i = 0, len = this._headers.length; i < len; i++) {\n            if (this._headers[i].key === key) {\n                return this._headers[i].value;\n            }\n        }\n    }\n\n    /**\n     * Sets body content for current node. If the value is a string, charset is added automatically\n     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n     * the charset yourself\n     *\n     * @param (String|Buffer) content Body content\n     * @return {Object} current node\n     */\n    setContent(content) {\n        this.content = content;\n        if (typeof this.content.pipe === 'function') {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = err => {\n                this.content.removeListener('error', this._contentErrorHandler);\n                this.content = err;\n            };\n            this.content.once('error', this._contentErrorHandler);\n        } else if (typeof this.content === 'string') {\n            this._isPlainText = mimeFuncs.isPlainText(this.content);\n            if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {\n                // If there are lines longer than 76 symbols/bytes do not use 7bit\n                this._hasLongLines = true;\n            }\n        }\n        return this;\n    }\n\n    build(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        let stream = this.createReadStream();\n        let buf = [];\n        let buflen = 0;\n        let returned = false;\n\n        stream.on('readable', () => {\n            let chunk;\n\n            while ((chunk = stream.read()) !== null) {\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n        });\n\n        stream.once('error', err => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            return callback(err);\n        });\n\n        stream.once('end', chunk => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            if (chunk && chunk.length) {\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n            return callback(null, Buffer.concat(buf, buflen));\n        });\n\n        return promise;\n    }\n\n    getTransferEncoding() {\n        let transferEncoding = false;\n        let contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();\n\n        if (this.content) {\n            transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();\n            if (!transferEncoding || !['base64', 'quoted-printable'].includes(transferEncoding)) {\n                if (/^text\\//i.test(contentType)) {\n                    // If there are no special symbols, no need to modify the text\n                    if (this._isPlainText && !this._hasLongLines) {\n                        transferEncoding = '7bit';\n                    } else if (typeof this.content === 'string' || this.content instanceof Buffer) {\n                        // detect preferred encoding for string value\n                        transferEncoding = this._getTextEncoding(this.content) === 'Q' ? 'quoted-printable' : 'base64';\n                    } else {\n                        // we can not check content for a stream, so either use preferred encoding or fallback to QP\n                        transferEncoding = this.textEncoding === 'B' ? 'base64' : 'quoted-printable';\n                    }\n                } else if (!/^(multipart|message)\\//i.test(contentType)) {\n                    transferEncoding = transferEncoding || 'base64';\n                }\n            }\n        }\n        return transferEncoding;\n    }\n\n    /**\n     * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n     *\n     * @returns {String} Headers\n     */\n    buildHeaders() {\n        let transferEncoding = this.getTransferEncoding();\n        let headers = [];\n\n        if (transferEncoding) {\n            this.setHeader('Content-Transfer-Encoding', transferEncoding);\n        }\n\n        if (this.filename && !this.getHeader('Content-Disposition')) {\n            this.setHeader('Content-Disposition', 'attachment');\n        }\n\n        // Ensure mandatory header fields\n        if (this.rootNode === this) {\n            if (!this.getHeader('Date')) {\n                this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));\n            }\n\n            // ensure that Message-Id is present\n            this.messageId();\n\n            if (!this.getHeader('MIME-Version')) {\n                this.setHeader('MIME-Version', '1.0');\n            }\n        }\n\n        this._headers.forEach(header => {\n            let key = header.key;\n            let value = header.value;\n            let structured;\n            let param;\n            let options = {};\n            let formattedHeaders = ['From', 'Sender', 'To', 'Cc', 'Bcc', 'Reply-To', 'Date', 'References'];\n\n            if (value && typeof value === 'object' && !formattedHeaders.includes(key)) {\n                Object.keys(value).forEach(key => {\n                    if (key !== 'value') {\n                        options[key] = value[key];\n                    }\n                });\n                value = (value.value || '').toString();\n                if (!value.trim()) {\n                    return;\n                }\n            }\n\n            if (options.prepared) {\n                // header value is\n                if (options.foldLines) {\n                    headers.push(mimeFuncs.foldLines(key + ': ' + value));\n                } else {\n                    headers.push(key + ': ' + value);\n                }\n                return;\n            }\n\n            switch (header.key) {\n                case 'Content-Disposition':\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    if (this.filename) {\n                        structured.params.filename = this.filename;\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    break;\n\n                case 'Content-Type':\n                    structured = mimeFuncs.parseHeaderValue(value);\n\n                    this._handleContentType(structured);\n\n                    if (structured.value.match(/^text\\/plain\\b/) && typeof this.content === 'string' && /[\\u0080-\\uFFFF]/.test(this.content)) {\n                        structured.params.charset = 'utf-8';\n                    }\n\n                    value = mimeFuncs.buildHeaderValue(structured);\n\n                    if (this.filename) {\n                        // add support for non-compliant clients like QQ webmail\n                        // we can't build the value with buildHeaderValue as the value is non standard and\n                        // would be converted to parameter continuation encoding that we do not want\n                        param = this._encodeWords(this.filename);\n\n                        if (param !== this.filename || /[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(param)) {\n                            // include value in quotes if needed\n                            param = '\"' + param + '\"';\n                        }\n                        value += '; name=' + param;\n                    }\n                    break;\n\n                case 'Bcc':\n                    if (!this.keepBcc) {\n                        // skip BCC values\n                        return;\n                    }\n                    break;\n            }\n\n            value = this._encodeHeaderValue(key, value);\n\n            // skip empty lines\n            if (!(value || '').toString().trim()) {\n                return;\n            }\n\n            if (typeof this.normalizeHeaderKey === 'function') {\n                let normalized = this.normalizeHeaderKey(key, value);\n                if (normalized && typeof normalized === 'string' && normalized.length) {\n                    key = normalized;\n                }\n            }\n\n            headers.push(mimeFuncs.foldLines(key + ': ' + value, 76));\n        });\n\n        return headers.join('\\r\\n');\n    }\n\n    /**\n     * Streams the rfc2822 message from the current node. If this is a root node,\n     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n     *\n     * @return {String} Compiled message\n     */\n    createReadStream(options) {\n        options = options || {};\n\n        let stream = new PassThrough(options);\n        let outputStream = stream;\n        let transform;\n\n        this.stream(stream, options, err => {\n            if (err) {\n                outputStream.emit('error', err);\n                return;\n            }\n            stream.end();\n        });\n\n        for (let i = 0, len = this._transforms.length; i < len; i++) {\n            transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];\n            outputStream.once('error', err => {\n                transform.emit('error', err);\n            });\n            outputStream = outputStream.pipe(transform);\n        }\n\n        // ensure terminating newline after possible user transforms\n        transform = new LastNewline();\n        outputStream.once('error', err => {\n            transform.emit('error', err);\n        });\n        outputStream = outputStream.pipe(transform);\n\n        // dkim and stuff\n        for (let i = 0, len = this._processFuncs.length; i < len; i++) {\n            transform = this._processFuncs[i];\n            outputStream = transform(outputStream);\n        }\n\n        if (this.newline) {\n            const winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes(this.newline.toString().toLowerCase());\n            const newlineTransform = winbreak ? new LeWindows() : new LeUnix();\n\n            const stream = outputStream.pipe(newlineTransform);\n            outputStream.on('error', err => stream.emit('error', err));\n            return stream;\n        }\n\n        return outputStream;\n    }\n\n    /**\n     * Appends a transform stream object to the transforms list. Final output\n     * is passed through this stream before exposing\n     *\n     * @param {Object} transform Read-Write stream\n     */\n    transform(transform) {\n        this._transforms.push(transform);\n    }\n\n    /**\n     * Appends a post process function. The functon is run after transforms and\n     * uses the following syntax\n     *\n     *   processFunc(input) -> outputStream\n     *\n     * @param {Object} processFunc Read-Write stream\n     */\n    processFunc(processFunc) {\n        this._processFuncs.push(processFunc);\n    }\n\n    stream(outputStream, options, done) {\n        let transferEncoding = this.getTransferEncoding();\n        let contentStream;\n        let localStream;\n\n        // protect actual callback against multiple triggering\n        let returned = false;\n        let callback = err => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(err);\n        };\n\n        // for multipart nodes, push child nodes\n        // for content nodes end the stream\n        let finalize = () => {\n            let childId = 0;\n            let processChildNode = () => {\n                if (childId >= this.childNodes.length) {\n                    outputStream.write('\\r\\n--' + this.boundary + '--\\r\\n');\n                    return callback();\n                }\n                let child = this.childNodes[childId++];\n                outputStream.write((childId > 1 ? '\\r\\n' : '') + '--' + this.boundary + '\\r\\n');\n                child.stream(outputStream, options, err => {\n                    if (err) {\n                        return callback(err);\n                    }\n                    setImmediate(processChildNode);\n                });\n            };\n\n            if (this.multipart) {\n                setImmediate(processChildNode);\n            } else {\n                return callback();\n            }\n        };\n\n        // pushes node content\n        let sendContent = () => {\n            if (this.content) {\n                if (Object.prototype.toString.call(this.content) === '[object Error]') {\n                    // content is already errored\n                    return callback(this.content);\n                }\n\n                if (typeof this.content.pipe === 'function') {\n                    this.content.removeListener('error', this._contentErrorHandler);\n                    this._contentErrorHandler = err => callback(err);\n                    this.content.once('error', this._contentErrorHandler);\n                }\n\n                let createStream = () => {\n                    if (['quoted-printable', 'base64'].includes(transferEncoding)) {\n                        contentStream = new (transferEncoding === 'base64' ? base64 : qp).Encoder(options);\n\n                        contentStream.pipe(outputStream, {\n                            end: false\n                        });\n                        contentStream.once('end', finalize);\n                        contentStream.once('error', err => callback(err));\n\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(contentStream);\n                    } else {\n                        // anything that is not QP or Base54 passes as-is\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(outputStream, {\n                            end: false\n                        });\n                        localStream.once('end', finalize);\n                    }\n\n                    localStream.once('error', err => callback(err));\n                };\n\n                if (this.content._resolve) {\n                    let chunks = [];\n                    let chunklen = 0;\n                    let returned = false;\n                    let sourceStream = this._getStream(this.content);\n                    sourceStream.on('error', err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        callback(err);\n                    });\n                    sourceStream.on('readable', () => {\n                        let chunk;\n                        while ((chunk = sourceStream.read()) !== null) {\n                            chunks.push(chunk);\n                            chunklen += chunk.length;\n                        }\n                    });\n                    sourceStream.on('end', () => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        this.content._resolve = false;\n                        this.content._resolvedValue = Buffer.concat(chunks, chunklen);\n                        setImmediate(createStream);\n                    });\n                } else {\n                    setImmediate(createStream);\n                }\n                return;\n            } else {\n                return setImmediate(finalize);\n            }\n        };\n\n        if (this._raw) {\n            setImmediate(() => {\n                if (Object.prototype.toString.call(this._raw) === '[object Error]') {\n                    // content is already errored\n                    return callback(this._raw);\n                }\n\n                // remove default error handler (if set)\n                if (typeof this._raw.pipe === 'function') {\n                    this._raw.removeListener('error', this._contentErrorHandler);\n                }\n\n                let raw = this._getStream(this._raw);\n                raw.pipe(outputStream, {\n                    end: false\n                });\n                raw.on('error', err => outputStream.emit('error', err));\n                raw.on('end', finalize);\n            });\n        } else {\n            outputStream.write(this.buildHeaders() + '\\r\\n\\r\\n');\n            setImmediate(sendContent);\n        }\n    }\n\n    /**\n     * Sets envelope to be used instead of the generated one\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n    setEnvelope(envelope) {\n        let list;\n\n        this._envelope = {\n            from: false,\n            to: []\n        };\n\n        if (envelope.from) {\n            list = [];\n            this._convertAddresses(this._parseAddresses(envelope.from), list);\n            list = list.filter(address => address && address.address);\n            if (list.length && list[0]) {\n                this._envelope.from = list[0].address;\n            }\n        }\n        ['to', 'cc', 'bcc'].forEach(key => {\n            if (envelope[key]) {\n                this._convertAddresses(this._parseAddresses(envelope[key]), this._envelope.to);\n            }\n        });\n\n        this._envelope.to = this._envelope.to.map(to => to.address).filter(address => address);\n\n        let standardFields = ['to', 'cc', 'bcc', 'from'];\n        Object.keys(envelope).forEach(key => {\n            if (!standardFields.includes(key)) {\n                this._envelope[key] = envelope[key];\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Generates and returns an object with parsed address fields\n     *\n     * @return {Object} Address object\n     */\n    getAddresses() {\n        let addresses = {};\n\n        this._headers.forEach(header => {\n            let key = header.key.toLowerCase();\n            if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].includes(key)) {\n                if (!Array.isArray(addresses[key])) {\n                    addresses[key] = [];\n                }\n\n                this._convertAddresses(this._parseAddresses(header.value), addresses[key]);\n            }\n        });\n\n        return addresses;\n    }\n\n    /**\n     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n    getEnvelope() {\n        if (this._envelope) {\n            return this._envelope;\n        }\n\n        let envelope = {\n            from: false,\n            to: []\n        };\n        this._headers.forEach(header => {\n            let list = [];\n            if (header.key === 'From' || (!envelope.from && ['Reply-To', 'Sender'].includes(header.key))) {\n                this._convertAddresses(this._parseAddresses(header.value), list);\n                if (list.length && list[0]) {\n                    envelope.from = list[0].address;\n                }\n            } else if (['To', 'Cc', 'Bcc'].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), envelope.to);\n            }\n        });\n\n        envelope.to = envelope.to.map(to => to.address);\n\n        return envelope;\n    }\n\n    /**\n     * Returns Message-Id value. If it does not exist, then creates one\n     *\n     * @return {String} Message-Id value\n     */\n    messageId() {\n        let messageId = this.getHeader('Message-ID');\n        // You really should define your own Message-Id field!\n        if (!messageId) {\n            messageId = this._generateMessageId();\n            this.setHeader('Message-ID', messageId);\n        }\n        return messageId;\n    }\n\n    /**\n     * Sets pregenerated content that will be used as the output of this node\n     *\n     * @param {String|Buffer|Stream} Raw MIME contents\n     */\n    setRaw(raw) {\n        this._raw = raw;\n\n        if (this._raw && typeof this._raw.pipe === 'function') {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = err => {\n                this._raw.removeListener('error', this._contentErrorHandler);\n                this._raw = err;\n            };\n            this._raw.once('error', this._contentErrorHandler);\n        }\n\n        return this;\n    }\n\n    /////// PRIVATE METHODS\n\n    /**\n     * Detects and returns handle to a stream related with the content.\n     *\n     * @param {Mixed} content Node content\n     * @returns {Object} Stream object\n     */\n    _getStream(content) {\n        let contentStream;\n\n        if (content._resolvedValue) {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(() => contentStream.end(content._resolvedValue));\n            return contentStream;\n        } else if (typeof content.pipe === 'function') {\n            // assume as stream\n            return content;\n        } else if (content && typeof content.path === 'string' && !content.href) {\n            if (this.disableFileAccess) {\n                contentStream = new PassThrough();\n                setImmediate(() => contentStream.emit('error', new Error('File access rejected for ' + content.path)));\n                return contentStream;\n            }\n            // read file\n            return fs.createReadStream(content.path);\n        } else if (content && typeof content.href === 'string') {\n            if (this.disableUrlAccess) {\n                contentStream = new PassThrough();\n                setImmediate(() => contentStream.emit('error', new Error('Url access rejected for ' + content.href)));\n                return contentStream;\n            }\n            // fetch URL\n            return fetch(content.href, { headers: content.httpHeaders });\n        } else {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(() => contentStream.end(content || ''));\n            return contentStream;\n        }\n    }\n\n    /**\n     * Parses addresses. Takes in a single address or an array or an\n     * array of address arrays (eg. To: [[first group], [second group],...])\n     *\n     * @param {Mixed} addresses Addresses to be parsed\n     * @return {Array} An array of address objects\n     */\n    _parseAddresses(addresses) {\n        return [].concat.apply(\n            [],\n            [].concat(addresses).map(address => {\n                // eslint-disable-line prefer-spread\n                if (address && address.address) {\n                    address.address = this._normalizeAddress(address.address);\n                    address.name = address.name || '';\n                    return [address];\n                }\n                return addressparser(address);\n            })\n        );\n    }\n\n    /**\n     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n     *\n     * @param {String} key Key to be normalized\n     * @return {String} key in Camel-Case form\n     */\n    _normalizeHeaderKey(key) {\n        key = (key || '')\n            .toString()\n            // no newlines in keys\n            .replace(/\\r?\\n|\\r/g, ' ')\n            .trim()\n            .toLowerCase()\n            // use uppercase words, except MIME\n            .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, c => c.toUpperCase())\n            // special case\n            .replace(/^Content-Features$/i, 'Content-features');\n\n        return key;\n    }\n\n    /**\n     * Checks if the content type is multipart and defines boundary if needed.\n     * Doesn't return anything, modifies object argument instead.\n     *\n     * @param {Object} structured Parsed header value for 'Content-Type' key\n     */\n    _handleContentType(structured) {\n        this.contentType = structured.value.trim().toLowerCase();\n\n        this.multipart = /^multipart\\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf('/') + 1) : false;\n\n        if (this.multipart) {\n            this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n        } else {\n            this.boundary = false;\n        }\n    }\n\n    /**\n     * Generates a multipart boundary value\n     *\n     * @return {String} boundary value\n     */\n    _generateBoundary() {\n        return this.rootNode.boundaryPrefix + '-' + this.rootNode.baseBoundary + '-Part_' + this._nodeId;\n    }\n\n    /**\n     * Encodes a header value for use in the generated rfc2822 email.\n     *\n     * @param {String} key Header key\n     * @param {String} value Header value\n     */\n    _encodeHeaderValue(key, value) {\n        key = this._normalizeHeaderKey(key);\n\n        switch (key) {\n            // Structured headers\n            case 'From':\n            case 'Sender':\n            case 'To':\n            case 'Cc':\n            case 'Bcc':\n            case 'Reply-To':\n                return this._convertAddresses(this._parseAddresses(value));\n\n            // values enclosed in <>\n            case 'Message-ID':\n            case 'In-Reply-To':\n            case 'Content-Id':\n                value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n                if (value.charAt(0) !== '<') {\n                    value = '<' + value;\n                }\n\n                if (value.charAt(value.length - 1) !== '>') {\n                    value = value + '>';\n                }\n                return value;\n\n            // space separated list of values enclosed in <>\n            case 'References':\n                value = [].concat\n                    .apply(\n                        [],\n                        [].concat(value || '').map(elm => {\n                            // eslint-disable-line prefer-spread\n                            elm = (elm || '')\n                                .toString()\n                                .replace(/\\r?\\n|\\r/g, ' ')\n                                .trim();\n                            return elm.replace(/<[^>]*>/g, str => str.replace(/\\s/g, '')).split(/\\s+/);\n                        })\n                    )\n                    .map(elm => {\n                        if (elm.charAt(0) !== '<') {\n                            elm = '<' + elm;\n                        }\n                        if (elm.charAt(elm.length - 1) !== '>') {\n                            elm = elm + '>';\n                        }\n                        return elm;\n                    });\n\n                return value.join(' ').trim();\n\n            case 'Date':\n                if (Object.prototype.toString.call(value) === '[object Date]') {\n                    return value.toUTCString().replace(/GMT/, '+0000');\n                }\n\n                value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n                return this._encodeWords(value);\n\n            case 'Content-Type':\n            case 'Content-Disposition':\n                // if it includes a filename then it is already encoded\n                return (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n            default:\n                value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n                // encodeWords only encodes if needed, otherwise the original string is returned\n                return this._encodeWords(value);\n        }\n    }\n\n    /**\n     * Rebuilds address object using punycode and other adjustments\n     *\n     * @param {Array} addresses An array of address objects\n     * @param {Array} [uniqueList] An array to be populated with addresses\n     * @return {String} address string\n     */\n    _convertAddresses(addresses, uniqueList) {\n        let values = [];\n\n        uniqueList = uniqueList || [];\n\n        [].concat(addresses || []).forEach(address => {\n            if (address.address) {\n                address.address = this._normalizeAddress(address.address);\n\n                if (!address.name) {\n                    values.push(address.address);\n                } else if (address.name) {\n                    values.push(this._encodeAddressName(address.name) + ' <' + address.address + '>');\n                }\n\n                if (address.address) {\n                    if (!uniqueList.filter(a => a.address === address.address).length) {\n                        uniqueList.push(address);\n                    }\n                }\n            } else if (address.group) {\n                values.push(\n                    this._encodeAddressName(address.name) + ':' + (address.group.length ? this._convertAddresses(address.group, uniqueList) : '').trim() + ';'\n                );\n            }\n        });\n\n        return values.join(', ');\n    }\n\n    /**\n     * Normalizes an email address\n     *\n     * @param {Array} address An array of address objects\n     * @return {String} address string\n     */\n    _normalizeAddress(address) {\n        address = (address || '').toString().trim();\n\n        let lastAt = address.lastIndexOf('@');\n        if (lastAt < 0) {\n            // Bare username\n            return address;\n        }\n        let user = address.substr(0, lastAt);\n        let domain = address.substr(lastAt + 1);\n\n        // Usernames are not touched and are kept as is even if these include unicode\n        // Domains are punycoded by default\n        // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n        // non-unicode domains are left as is\n\n        return user + '@' + punycode.toASCII(domain.toLowerCase());\n    }\n\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n    _encodeAddressName(name) {\n        if (!/^[\\w ']*$/.test(name)) {\n            if (/^[\\x20-\\x7e]*$/.test(name)) {\n                return '\"' + name.replace(/([\\\\\"])/g, '\\\\$1') + '\"';\n            } else {\n                return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);\n            }\n        }\n        return name;\n    }\n\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n    _encodeWords(value) {\n        // set encodeAll parameter to true even though it is against the recommendation of RFC2047,\n        // by default only words that include non-ascii should be converted into encoded words\n        // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace\n        return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);\n    }\n\n    /**\n     * Detects best mime encoding for a text value\n     *\n     * @param {String} value Value to check for\n     * @return {String} either 'Q' or 'B'\n     */\n    _getTextEncoding(value) {\n        value = (value || '').toString();\n\n        let encoding = this.textEncoding;\n        let latinLen;\n        let nonLatinLen;\n\n        if (!encoding) {\n            // count latin alphabet symbols and 8-bit range symbols + control symbols\n            // if there are more latin characters, then use quoted-printable\n            // encoding, otherwise use base64\n            nonLatinLen = (value.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\u0080-\\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex\n            latinLen = (value.match(/[a-z]/gi) || []).length;\n            // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B\n            encoding = nonLatinLen < latinLen ? 'Q' : 'B';\n        }\n        return encoding;\n    }\n\n    /**\n     * Generates a message id\n     *\n     * @return {String} Random Message-ID value\n     */\n    _generateMessageId() {\n        return (\n            '<' +\n            [2, 2, 2, 6].reduce(\n                // crux to generate UUID-like random strings\n                (prev, len) => prev + '-' + crypto.randomBytes(len).toString('hex'),\n                crypto.randomBytes(4).toString('hex')\n            ) +\n            '@' +\n            // try to use the domain of the FROM address or fallback to server hostname\n            (this.getEnvelope().from || this.hostname || os.hostname() || 'localhost').split('@').pop() +\n            '>'\n        );\n    }\n}\n\nmodule.exports = MimeNode;\n"]},"metadata":{},"sourceType":"script"}