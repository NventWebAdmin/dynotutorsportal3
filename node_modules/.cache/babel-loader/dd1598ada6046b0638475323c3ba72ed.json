{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/auth/signincheck.js\";\nimport React from \"react\";\nimport Signin from \"./signin\";\nimport Sfdclogo from \"../../images/sfdc.svg\";\nimport { isAuthenticatedUser } from \"../../auth/index\";\nimport { signin, refreshtoken, signup, resetPassword, signInwithGoogle, signInwithFacebook } from \"../../auth/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction F(Components) {\n  let textPanel = [];\n  textPanel.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Salesforcee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"lf\",\n      children: \"top rated CRM getting used by most of the fortune 100 companies for Marketing, Sales and Service cloud implementations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true));\n  let isUserAuthenticated = sessionStorage.getItem(\"orgidToken\"); //isUserAuthenticated = true;\n\n  console.log(isUserAuthenticated);\n  let tokenexpiryTime = sessionStorage.getItem(\"orgexpiresAt\");\n  console.log(tokenexpiryTime);\n  let d = new Date();\n  let n = d.getTime();\n  let currentime = parseInt(n);\n  console.log(currentime);\n  let expirytime = parseInt(tokenexpiryTime);\n  console.log(expirytime);\n  let askforRefreshtokentimelimit = 60000;\n  let resetsigninTimeLimt = 3480000;\n  resetsigninTimeLimt = 0;\n  askforRefreshtokentimelimit = 0;\n  expirytime = expirytime - resetsigninTimeLimt;\n  console.log(expirytime);\n  let askforRefreshtokentime = expirytime - askforRefreshtokentimelimit;\n  let d3 = new Date(expirytime);\n  console.log(d3);\n  console.log(askforRefreshtokentime);\n\n  if (isUserAuthenticated !== \"\" && isUserAuthenticated !== undefined && isUserAuthenticated !== null) {\n    if (currentime > askforRefreshtokentime && currentime < expirytime) {\n      return props => /*#__PURE__*/_jsxDEV(Signin, { ...props,\n        textPanel: textPanel,\n        logo: Sfdclogo,\n        template: \"loginPanelLeft\",\n        isrefreshtoken: \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    } else if (currentime > expirytime) {\n      // sessionStorage.removeItem(\"orgemail\");\n      // sessionStorage.removeItem(\"orgexpiresAt\");\n      // sessionStorage.removeItem(\"orgidToken\");\n      // sessionStorage.removeItem(\"orgrefreshToken\");\n      sessionStorage.clear();\n      return props => /*#__PURE__*/_jsxDEV(Signin, { ...props,\n        textPanel: textPanel,\n        logo: Sfdclogo,\n        template: \"loginPanelLeft\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this);\n    } else {\n      return props => /*#__PURE__*/_jsxDEV(Components, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this);\n    }\n  } else {\n    return props => /*#__PURE__*/_jsxDEV(Signin, { ...props,\n      textPanel: textPanel,\n      logo: Sfdclogo,\n      template: \"loginPanelLeft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_c = F;\nexport default F;\n\nvar _c;\n\n$RefreshReg$(_c, \"F\");","map":{"version":3,"sources":["/Users/pradeep/Downloads/twilioudemy1/nventwebgithub/dynotutorsportal3/src/components/auth/signincheck.js"],"names":["React","Signin","isAuthenticatedUser","signin","refreshtoken","signup","resetPassword","signInwithGoogle","signInwithFacebook","F","Components","textPanel","push","isUserAuthenticated","sessionStorage","getItem","console","log","tokenexpiryTime","d","Date","n","getTime","currentime","parseInt","expirytime","askforRefreshtokentimelimit","resetsigninTimeLimt","askforRefreshtokentime","d3","undefined","props","Sfdclogo","clear"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Signin from \"./signin\";\nimport Sfdclogo from \"../../images/sfdc.svg\";\nimport { isAuthenticatedUser } from \"../../auth/index\";\nimport {\n  signin,\n  refreshtoken,\n  signup,\n  resetPassword,\n  signInwithGoogle,\n  signInwithFacebook,\n} from \"../../auth/index\";\n\nfunction F(Components) {\n  let textPanel = [];\n  textPanel.push(\n    <>\n      {\" \"}\n      <h1>Welcome to Salesforcee</h1>\n      <p className=\"lf\">\n        top rated CRM getting used by most of the fortune 100 companies for\n        Marketing, Sales and Service cloud implementations\n      </p>\n    </>\n  );\n\n  let isUserAuthenticated = sessionStorage.getItem(\"orgidToken\");\n  //isUserAuthenticated = true;\n  console.log(isUserAuthenticated);\n  let tokenexpiryTime = sessionStorage.getItem(\"orgexpiresAt\");\n  console.log(tokenexpiryTime);\n\n  let d = new Date();\n  let n = d.getTime();\n  let currentime = parseInt(n);\n  console.log(currentime);\n\n  let expirytime = parseInt(tokenexpiryTime);\n  console.log(expirytime);\n  let askforRefreshtokentimelimit = 60000;\n  let resetsigninTimeLimt = 3480000;\n  resetsigninTimeLimt = 0;\n  askforRefreshtokentimelimit = 0;\n  expirytime = expirytime - resetsigninTimeLimt;\n  console.log(expirytime);\n  let askforRefreshtokentime = expirytime - askforRefreshtokentimelimit;\n  let d3 = new Date(expirytime);\n  console.log(d3);\n  console.log(askforRefreshtokentime);\n\n  if (\n    isUserAuthenticated !== \"\" &&\n    isUserAuthenticated !== undefined &&\n    isUserAuthenticated !== null\n  ) {\n    if (currentime > askforRefreshtokentime && currentime < expirytime) {\n      return (props) => (\n        <Signin\n          {...props}\n          textPanel={textPanel}\n          logo={Sfdclogo}\n          template=\"loginPanelLeft\"\n          isrefreshtoken=\"true\"\n        />\n      );\n    } else if (currentime > expirytime) {\n      // sessionStorage.removeItem(\"orgemail\");\n      // sessionStorage.removeItem(\"orgexpiresAt\");\n      // sessionStorage.removeItem(\"orgidToken\");\n      // sessionStorage.removeItem(\"orgrefreshToken\");\n      sessionStorage.clear();\n      return (props) => (\n        <Signin\n          {...props}\n          textPanel={textPanel}\n          logo={Sfdclogo}\n          template=\"loginPanelLeft\"\n        />\n      );\n    } else {\n      return (props) => <Components {...props} />;\n    }\n  } else {\n    return (props) => (\n      <Signin\n        {...props}\n        textPanel={textPanel}\n        logo={Sfdclogo}\n        template=\"loginPanelLeft\"\n      />\n    );\n  }\n}\n\nexport default F;\n"]},"metadata":{},"sourceType":"module"}